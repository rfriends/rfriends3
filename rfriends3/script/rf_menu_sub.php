<?php
 function rfmenu_rec_date_all($ex_type,$d,$cnt) { global $ex_radiru_vod; $fmt = array(); $dt0 = time(); for ($i=0;$i<$cnt;$i++) { $dt = $dt0 + (24 * 60 * 60) * $d; $dt1 = date("m/d", $dt); $w = date("D", $dt); $d++; $fmt[] = array('title' => "$dt1($w)", 'val' => $dt); } return $fmt; } function rfmenu_rec_date_fmt($d) { $dt = strtotime("$d day"); $dt1 = date("m/d", $dt); $w = date("D", $dt); $fmt = "$dt1($w)"; return $fmt; } function rfmenu_rec_date_fmt2($dt) { $dt1 = date("m/d", $dt); $w = date("D", $dt); $fmt = "$dt1($w)"; return $fmt; } function rf_sel_menu($mnu,$st) { global $ui_mode; $n = 0; foreach($mnu as $m) { if ($m == "-") { echo_menu(2, "-",1); } else { $n++; $mes = sprintf("%2d. %s",$n,$m); echo_menu(2, $mes,1); } } if ($st == 0) { echo_menu_all_wt(); } echo_menu_ret_wt(); if ($n <= 0) { return -1; } echo_scr(2, ""); $ans = echo_select(2, "番号を選択してください($st-$n) : "); if ($ans == "" || $ans == "R" || $ans == "r") { return -1; } if (!is_numeric($ans)) { return -1; } if ($ans < $st || $ans > $n) { return -1; } return $ans; } function rfmenu_info_ini_check($mode) { global $scrdir; global $defdir; global $cfgdir; global $DS; $ret = rfmenu_info_ini_check_sub($mode); if ($ret === false) { echo_msg(2, "パラメータチェックエラー"); return false; } if ($mode == 1) { $mes = "パラメータ"; $file = "rfriends.ini"; } else { $mes = "タグ設定"; $file = "rfriends_tag.ini"; } echo_scr(2,""); echo_scr(2, $mes."ファイルの更新を行います。"); echo_scr(2, "コメント部分を最新にしますが、現在の値は保持します。"); echo_scr(2,""); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { $ret = rfmenu_update_para($mode,$file); echo_scr(2,""); if ($ret === false) { echo_scr(2,$mes."ファイルを更新できませんでした。"); } else{ echo_scr(2,$mes."ファイルを更新しました。"); } rf_pause(); } } function rfmenu_info_ini_check_sub($mode) { global $scrdir; global $defdir; global $cfgdir; global $DS; global $ui_mode; if ($mode == 1) { $ini = "rfriends"; $mes = "パラメータ"; } else { $ini = "rfriends_tag"; $mes = "タグ設定"; } $fl_sys = $scrdir.$ini.".ini"; $fl_usr = $cfgdir.$ini.".ini"; $fl_dif = $cfgdir.$ini.".ini.dif"; echo_msg(2, "sys : $fl_sys"); echo_msg(2, "usr : $fl_usr"); if (($ini_sys = @parse_ini_file($fl_sys)) === false) { echo_msg(2, "$fl_sys parse error"); return false; } if (($ini_usr = @parse_ini_file($fl_usr)) === false) { echo_msg(2, "$fl_usr parse error"); return false; } $n = 0; $m = 0; $new_key = array(); $dif_key = array(); $dt = date("Y/m/d H:i:s",time()); $dif_key = array(); $dif_key[] = "\n"; $dif_key[] = "diff result $dt \n"; foreach ($ini_sys as $key => $val) { if (array_key_exists($key, $ini_usr)) { if ($ini_sys[$key] != $ini_usr[$key]) { $dif_key[] = "\n"; $dif_key[] = "DIFF sys : $key = $ini_sys[$key]\n"; $dif_key[] = "DIFF usr : $key = $ini_usr[$key]\n"; $m++; } } else { $dif_key[] = "\n"; $dif_key[] = "NONE sys : $key = \"$ini_sys[$key]\"\n"; $new_key[] = "$key = \"$ini_sys[$key]\" \n"; $n++; } } $dif_key[] = "\n"; if ($n == 0) { $dif_key[] = "キーの不足はありません。\n"; } else { $dif_key[] = $n."個のキーが不足しています。\n"; } if ($m == 0) { $dif_key[] = "キーの変更はありません。\n"; } else { $dif_key[] = $m."個のキーが変更されています。\n"; } foreach($dif_key as $key) { if ($ui_mode == 2) { echo_msg(2,$key); } else { echo_scr_n(2,$key); } } return true; } function rfmenu_name() { global $ui_mode; global $rfriends_name; global $rfriends_name_esc; global $rfriends_name_color; global $rfname; $hname = $rfriends_name; $hname_esc = $rfriends_name_esc; $hname_color = $rfriends_name_color; if ($hname == '') { if (($hname = gethostname()) === false) { $hname = ''; } } if ($ui_mode == 2) { $rfname = "<font color= '$hname_color'>".$hname.'</font>'; return $rfname; } if ($hname_esc != '') { $hname_esc = str_replace('\e',"\e",$hname_esc,$esccnt); if ($esccnt == 0) { $hname_esc = ''; } } if ($hname_esc == '') { $rfname = "[$hname] "; } else { $rfname = "[".$hname_esc.$hname."\e[0m"."] "; } return $rfname; } function rfmenu_info_ini() { global $usrdir; global $tmpdir; global $os_s; global $os_l; global $wake_to_run; global $sch_battery; global $dont_sleep; global $base; global $sch_head; global $sch_qno; global $at_que_no; global $sch_daily; global $sch_daily2; global $rfriends; global $sch_rsv_radiko; global $sch_rsv_radiru; global $sch_rsv_timefree; global $sch_rsv_radiru_vod; global $sch_rsv_radiru_gogaku; global $sch_rsv_podcast; global $access_type; global $editor_cui_win; global $editor_gui_win; global $snd_player_win; global $editor_cui_lnx; global $editor_gui_lnx; global $snd_player_lnx; global $editor_cui_osx; global $editor_gui_osx; global $snd_player_osx; global $rftrans; global $rftrans_dir; global $rftrans_radiko; global $rftrans_radiru; global $rftrans_timefree; global $rftrans_radiru_vod; global $rftrans_radiru_gogaku; global $rftrans_codec; global $rftrans_codec_opt; global $premium_delay; global $premium_pre_margin; global $premium_post_margin; global $radiko_delay; global $radiko_pre_margin; global $radiko_post_margin; global $radiru_delay; global $radiru_pre_margin; global $radiru_post_margin; global $premium_genre; global $radiko_genre; global $radiru_genre; global $timefree_genre; global $rfriends_task_kill; global $split_program; global $retry_rec; global $radiko_ng_rec_auto; global $timefree_ng_rec; global $auth_life_time; global $standby_time; global $radiru_callsign; global $reserve_limit; global $storage_control_exec; global $storage_control_disk; global $radiko_double_rec; global $radiru_double_rec; global $radiru_vod_double_rec; global $timefree_double_rec; global $timefree_radiko_del; global $radiru_vod_radiru_del; $rfriends_ver = trim(file_get_contents($base.$rfriends)); $exque = get_at_que_no($at_que_no); $w = rf_calc_width(); echo_msg(2, "[rfriends.ini]"); echo_msg(2, str_repeat("-", $w)); echo_msg(2, "スリープ  　: 解除:$wake_to_run 監視:$dont_sleep battery駆動:$sch_battery"); echo_msg(2, "デイリー処理: $sch_daily  $sch_daily2  rk:$sch_rsv_radiko rr:$sch_rsv_radiru tf:$sch_rsv_timefree vd:$sch_rsv_radiru_vod gk:$sch_rsv_radiru_gogaku pc:$sch_rsv_podcast"); echo_msg(2, "ヘッダ      : $sch_head     キュー番号: ".$exque[0]." ".$exque[1]); echo_msg(2, ""); if (rf_product_check() == "P") { echo_msg(2, "prem.  mgn等: delay:$premium_delay pre:$premium_pre_margin post:$premium_post_margin"); } echo_msg(2, "radiko mgn等: " ."delay:$radiko_delay pre:$radiko_pre_margin post:$radiko_post_margin  auth_lt:$auth_life_time"); echo_msg(2, "radiru mgn等: " ."delay:$radiru_delay pre:$radiru_pre_margin post:$radiru_post_margin  callsign:$radiru_callsign"); if (rf_product_check() == "P") { echo_msg(2, "ジャンル  　: ko:$radiko_genre ru:$radiru_genre tf:$timefree_genre prem:$premium_genre"); } else { echo_msg(2, "ジャンル  　: " ."radiko:$radiko_genre radiru:$radiru_genre tfree:$timefree_genre"); } echo_msg(2, "重複録音  　: " ."radiko:$radiko_double_rec radiru:$radiru_double_rec " ."timefree:$timefree_double_rec radiru_vod:$radiru_vod_double_rec"); echo_msg(2, "　　　　  　: timefree_radiko_del:$timefree_radiko_del"); echo_msg(2, "　　　　  　: radiru_vod_radiru_del:$radiru_vod_radiru_del"); echo_msg(2, "配信なし録音: radiko:$radiko_ng_rec_auto timefree:$timefree_ng_rec"); echo_msg(2, "番組関連  　: 分割:$split_program 再予約:$retry_rec 予約制限:$reserve_limit 中止:'$rfriends_task_kill'"); echo_msg(2, ""); echo_msg(2, "usrdir      : $usrdir"); echo_msg(2, "tmpdir      : $tmpdir"); echo_msg(2, "転送        : $rftrans_dir"); echo_msg(2, "転送有効    : " ."mode:$rftrans ko:$rftrans_radiko ru:$rftrans_radiru " ."tf:$rftrans_timefree od:$rftrans_radiru_vod gg:$rftrans_radiru_gogaku codec:$rftrans_codec"); echo_msg(2, "領域制御    : exec:$storage_control_exec disk:$storage_control_disk"); echo_msg(2, ""); echo_msg(2, "環境        : type:$access_type"); echo_msg(2, str_repeat("-", $w)); } function rfmenu_info_tag() { global $fr_fmt; global $to_fmt; global $dt_fmt; global $nm_fmt; global $tag_fr_fmt; global $tag_to_fmt; global $tag_dt_fmt; global $tag_title_fmt; global $tag_artist_fmt; global $tag_album_fmt; global $tag_albumat_fmt; global $tag_genre_fmt; global $tag_year_fmt; global $tag_comment_fmt; global $tag_comment_fmt2; global $tag_track_fmt; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; $wdata = "20170102030400 20170102050600 7320 0 0 0 ch prog person img kw b c d e f g h i"; $para = get_para($wdata, 1); $nam = fnam_edit($ex_radiko,$para); $tag = tag_edit("ffmpeg", $para, 1, "", ""); echo_msg(2, "[friends_tag.ini]"); echo_msg(2, "1:fr 2:to 3:dur 4:ch 5:prog 6:person 7:kw 8:date 9:genre 10:track 11:prog(s) 12:music"); $w = rf_calc_width(); echo_msg(2, str_repeat("-", $w)); $val = date($fr_fmt, strtotime($para[0])); echo_msg(2, "from(fr_fmt='$fr_fmt') : $val"); $val = date($to_fmt, strtotime($para[1])); echo_msg(2, "to  (to_fmt='$to_fmt') : $val"); $val = date($dt_fmt, strtotime($para[0])); echo_msg(2, "date(dt_fmt='$dt_fmt') : $val"); echo_msg(2, ""); echo_msg(2, "録音名(nm_fmt='$nm_fmt') : '$nam'"); echo_msg(2, str_repeat("-", $w)); $val = date($tag_fr_fmt, strtotime($para[0])); echo_msg(2, "from(tag_fr_fmt='$tag_fr_fmt') : $val"); $val = date($tag_to_fmt, strtotime($para[1])); echo_msg(2, "to  (tag_to_fmt='$tag_to_fmt') : $val"); $val = date($tag_dt_fmt, strtotime($para[0])); echo_msg(2, "date(tag_dt_fmt='$tag_dt_fmt') : $val"); echo_msg(2, ""); $val = $tag['title']; echo_msg(2, "title  (tag_title_fmt  ='$tag_title_fmt') : $val"); $val = $tag['artist']; echo_msg(2, "artist (tag_artist_fmt ='$tag_artist_fmt') : $val"); $val = $tag['album']; echo_msg(2, "album  (tag_album_fmt  ='$tag_album_fmt') : $val"); $val = $tag['album_artist']; echo_msg(2, "albumat(tag_albumat_fmt='$tag_albumat_fmt') : $val"); $val = $tag['genre']; echo_msg(2, "genre  (tag_genre_fmt  ='$tag_genre_fmt') : $val"); $val = $tag['date']; echo_msg(2, "date   (tag_year_fmt   ='$tag_year_fmt') : $val"); $val = $tag['comment']; echo_msg(2, "comment(tag_comment_fmt ='$tag_comment_fmt ') : $val"); echo_msg(2, "comment(tag_comment_fmt2='$tag_comment_fmt2') : $val"); $val = $tag['track']; echo_msg(2, "track  (tag_track_fmt  ='$tag_track_fmt') : $val"); echo_msg(2, str_repeat("-", $w)); } function rfmenu_ttl($enco,$fnam2) { global $tmpdir; global $rsvdir; $ttl = ""; if ($enco != "radiko" && $enco != "radiru") return $ttl; $pos = strpos($fnam2,'.'); if ($pos === false) return $ttl; $fdat = $rsvdir.substr($fnam2,0,$pos).".dat"; if (!file_exists($fdat)) return $ttl; $wdata = @file_get_contents($fdat); if ($wdata === false) return $ttl; $para = get_para($wdata, $enco); $ttl = $para[7]; return $ttl; } function rfmenu_rec($nw, $t, $mode) { global $tmpdir; $lw = rf_calc_width() - 1; $pid_data = rfgw_ffmpeg_pid($mode); if (count_73($pid_data) < 1) { return; } if ($t == 1) { $ns = "   "; } else { $ns = " "; } $fmt = sprintf("%6s %-6s %s %s", "PID", "TYPE", "経過時間", "録音名"); $n = 0; $fmt_data = array(); foreach ($pid_data as $val) { $n++; $task = explode(",", $val); $pid = $task[0]; $enco = $task[1]; $sttm = $task[2]; $fnam = str_replace($tmpdir, "", $task[3]); $fnam_pc = $fnam; $fnam2 = $fnam; $fnam = substr($fnam,4); $fnam = str_replace("00_", "_", $fnam); $enco = str_replace('"', '', $enco); $enco = str_replace('encoder=', '', $enco); switch ($enco) { case "radiko": $encoder = "radiko "; break; case "radiru": $encoder = "radiru "; break; case "timefree": $encoder = "timefre"; break; case "radiru_vod": $encoder = "radiruv"; break; case "radiru_gogaku": $encoder = "radirug"; break; case "standby": $encoder = "standby"; break; case "podcast": $encoder = "podcast"; $fnam = $fnam_pc; break; default: $encoder = "unknown"; break; } if ($encoder == "unknown" && substr($fnam_pc,0,4) == "podcast") { $encoder = "podcast"; } $hms =""; $ttl = rfmenu_ttl($enco,$fnam2); $fmt = sprintf("%6d %7s %s %s", $pid, $encoder, $fnam,$ttl); $fmt = rf_strimwidth($fmt, 0, $lw); $fmt_data[] = $fmt; } return $fmt_data; } function rfmenu_rec_del($ex_type, $wdat, $head,$auto) { global $ui_mode; global $multi_sw; $mode = 0; if ($ui_mode == 2) $mode = 2; sort($wdat); $flist = rfmenu_program_list($ex_type, $wdat,$mode); $nmax = count_73($flist); if ($auto == 0) { $opt = array( "title" => "予約一覧 ($nmax 件)", "input_type" => 1, "page_control" => 1, "return_mes" => "終了", "input_mes" => "どれを削除しますか", "mode" => 1, "multi" => $multi_sw, "confirm" => 1, "ht_selid" => "selpgm" ); $no = rf_pctl_disp($flist, $opt); $ans = $no[0]; if ($ans == "r") { return false; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); return true; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); return true; } $nmax2 = count_73($no); if ($nmax2 == 1) { $j = $no[0]; echo_msg(2, "$j ".$flist[$j-1]['title']); $wdat2 = rfmenu_wdata_sel($wdat, $no); $para = get_para($wdat2[0], $ex_type); echo_msg(2,"   $para[8]"); echo_msg(2,"   $para[10]"); if ($para[18] != "" && $para[18] != ";") echo_msg(2,"   $para[18]"); } else { for ($i=0; $i<$nmax2; $i++) { $j = $no[$i]; echo_msg(2, "$j ".$flist[$j-1]['title']); } } echo_msg(2, ""); $yn = echo_yesno(2, "削除しますか？(y/N) : "); if (($yn != "y") and ($yn != "Y")) { return true; } $wdat = rfmenu_wdata_sel($wdat, $no); } echo_msg(2, ""); $test_mode = 0; foreach ($wdat as $key => $wdata) { $para = get_para($wdata, $ex_type); $ret = rfgw_program_del($test_mode, $ex_type, $para, $head); switch ($ret) { case 0: $mes = "削除しました"; break; case 1: $mes = "削除できませんでした"; break; default: $mes = "削除エラー"; break; } $fmt = sprintf(" %03d $mes", $key); echo_msg(2, $fmt); } if ($auto == 0) { rf_pause(); return true; } else { return false; } } function rfmenu_rec_sel_rsv($ex_type, $wdat) { global $ex_radiko; global $ex_radiru; global $rsvdir; global $reserve_limit; global $reserve_limit_atonce; global $schradiko_head; global $schradiru_head; global $area_code; $head = ""; if ($ex_type == $ex_radiko) { $head = $schradiko_head; } if ($ex_type == $ex_radiru) { $head = $schradiru_head; } $test_mode = 0; $wdatcnt = 0; $st = time(); foreach ($wdat as $key => $wdata) { $wdatcnt++; if ($wdatcnt > $reserve_limit_atonce) { echo_msg(2,""); echo_msg(2, "一度に予約処理する制限を超えました。( > $reserve_limit_atonce)"); break; } $para = get_para($wdata, $ex_type); $para[14] = $area_code; $rty = 0; $ret = rf_program_rsv($test_mode, $ex_type, $para, $head, $rty); switch ($ret) { case 0: $mes = "録音予約しました"; break; case 1: $mes = "番組途中より録音予約しました"; break; case 2: $mes = "番組終了または終了間近のため録音予約できません"; break; case 3: $mes = "同時予約数が制限を超えているため録音予約できません( > $reserve_limit)"; break; case 4: $mes = "録音予約済です"; break; case 5: $mes = "録音予約に失敗しました"; break; default: $mes = "録音予約エラー"; break; } if ($ret > 2) { $fr = substr($para[0],8,6); $to = substr($para[1],8,6); echo_msg(2, "X $fr-$to $para[6] $para[7]"); } $fmt = sprintf(" %03d $mes", $key+1); echo_msg(2, $fmt); echo_msg(2, ""); } $elapse = time() - $st; echo_msg(2,"処理時間 : $elapse sec(s)"); } function rfmenu_rec_sel($ex_type, $wdat) { global $area_code; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; if (count_73($wdat) <= 0) { echo_msg(2,"リストが空です。"); rf_pause(); return; } $rmes = "終了"; $imes = "どれを録音しますか"; $ynmes1 = "録音しますか ? (y/N) : "; $ynmes2 = "録音しますか ? (y/N,r=聴取) : "; switch ($ex_type) { case $ex_radiko: case $ex_radiru: sort($wdat); $wdat = rfmenu_wdata_org($wdat); $wdat = rfmenu_del_passed_program($wdat); $confirm = 1; $ttl = "放送番組一覧"; break; case $ex_timefree: sort($wdat); $confirm = 0; $ttl = "放送済番組一覧"; break; case $ex_radiru_vod: case $ex_radiru_gogaku: rsort($wdat); $confirm = 0; $ttl = "放送済番組一覧"; break; default: $ttl = ""; break; } while(1==1) { $wdat0 = rf_dat_sel($ex_type, $wdat, $ttl, $rmes, $imes,$confirm); if ($wdat0 === true) { return; } if ($wdat0 === false) { continue; } $live = false; $flg = 0; $n = count_73($wdat0); if ($n == 1) { $para = get_para($wdat0[0], $ex_type); echo_msg(2," $para[8]"); if ($ex_type == $ex_radiko || $ex_type == $ex_radiru) { $onair = rf_program_onair_check($para); if ($onair === true) $live = true; } if ($ex_type == $ex_timefree) { $arc = rf_program_archive_check($para); if ($arc === true) $live = true; } } echo_msg(2, ""); if ($live === true) { $ynmes = $ynmes2; $flg = rfgw_check_sshd(); } else { $ynmes = $ynmes1; } $ans = echo_yesno(2, $ynmes); if ($live === true && ($ans == "r" || $ans == "R")) { echo_msg(2, ""); rfgw_reconnect_bd(); rfriends_live($ex_type,$para,$flg); rf_pause(); continue; } if ($ans != "y" && $ans != "Y") continue; echo_msg(2, ""); switch ($ex_type) { case $ex_radiko: case $ex_radiru: rfmenu_rec_sel_rsv($ex_type, $wdat0); break; case $ex_timefree: case $ex_radiru_vod: case $ex_radiru_gogaku: rf_batsh_rec($ex_type, 0, 0, 0, $wdat0); echo_msg(2, "録音を開始しました"); break; } rf_pause(); } } function rf_dat_sel($ex_type, $wdat, $ttl, $rmes, $imes,$confirm) { global $ui_mode; global $multi_sw; $mode = 0; if ($ui_mode == 2) $mode = 2; $flist = rfmenu_program_list($ex_type, $wdat,$mode); $n = count_73($flist); $opt = array( "title" => "$ttl ($n 件)", "input_type" => 1, "page_control" => 1, "return_mes" => "$rmes", "input_mes" => "$imes", "mode" => 1, "multi" => $multi_sw, "confirm" => $confirm, "ht_selid" => "selpgm" ); $no = rf_pctl_disp($flist, $opt); $ans = $no[0]; if ($ans == "r") { return true; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); return false; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); return false; } $wdat = rfmenu_wdata_sel($wdat, $no); if (count_73($wdat) <= 0) { return false; } rfmenu_program_disp($ex_type, $wdat, $no, -1); return $wdat; } function rf_file_sel($dir, $pat, $ttl, $rmes, $imes, $ynmes, $ityp) { global $multi_sw; $files = array_filter(glob($dir.$pat), 'is_file'); echo_scr(2,""); if ($files === false) { echo_msg(2, "リストが空です(エラー)"); rf_pause(); return false; } if (count_73($files) <= 0) { echo_msg(2, "リストが空です"); rf_pause(); return false; } $opt = array( "title" => "$ttl", "input_type" => $ityp, "page_control" => 1, "return_mes" => "$rmes", "input_mes" => "$imes", "mode" => 1, "multi" => $multi_sw, "confirm" => 0, "ht_selid" => "" ); $bfiles = array(); foreach($files as $file) { $bn = basename($file); $bfiles[] = array('title' => $bn,'val' => $bn); } $no = rf_pctl_disp($bfiles, $opt); $ans = $no[0]; if ($ans == "r") { return false; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); return false; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); return false; } $fl = $bfiles[$ans-1]['title']; return $fl; } function rf_nhk_mcode2ch($mcode_sel) { $ch = ""; if ($mcode_sel == 5) $ch = "R1"; if ($mcode_sel == 6) $ch = "R2"; if ($mcode_sel == 7) $ch = "FM"; if ($mcode_sel == -1) $ch = "GG"; return $ch; } function rf_nhk_select() { global $radiru_ch; global $ex_radiru; global $ui_mode; $n = 0; $nhk_ch = [0,0,0]; $flist = array(); foreach ($radiru_ch as $key) { $mcode_sel = 0; if ($key == "r1") $mcode_sel = 5; if ($key == "r2") $mcode_sel = 6; if ($key == "r3") $mcode_sel = 7; if (!valid_chk($ex_radiru, $key)) { continue; } $n++; $no = sprintf("%2d", $n); $key2 = substr($key."          ", 0, 2); $val = "NHK"; $nhk_ch[$no-1] = $key; if ($ui_mode == 2) { $flist[] = array('title' => "$key2 : NHK",'val' => $mcode_sel); } else { echo_menu(2, "$no.  $key2 : $val",1); } } if ($ui_mode == 2) { $opt = array( "title" => "CHを選択してください。", "mode" => 1, "multi" => 0, "confirm" => 0, "ht_selid" => "" ); ht_ask_list($flist,$opt); return false; } echo_menu_all_wt(); echo_menu_ret_wt(); echo_scr(2, ""); if ($n < 1) { echo_msg(2,"リストが空です"); rf_pause(); return false; } $ans = echo_ask(2, "CHの番号を入力してください (1-$n 0:ALL) : "); echo_scr(2, ""); if ($ans == "" || $ans == "R" || $ans == "r") { return false; } $ans = rfmenu_check_range($ans,0,$n); if ($ans === false) { return false; } if ($ans == 0) { return 0; } if ($nhk_ch[$ans -1] == "r1") return 5; if ($nhk_ch[$ans -1] == "r2") return 6; if ($nhk_ch[$ans -1] == "r3") return 7; return 0; } function rf_menu_kw_list() { global $keyword; echo_msg(2,"・キーワード数"); echo_msg(2,str_repeat("-", 40)); foreach($keyword as $key => $val) { $valn = count_73($val); if ($valn > 0) { echo_msg(2,"$key : $valn"); } } echo_msg(2,str_repeat("-", 40)); echo_msg(2, ""); echo_msg(2, "・キーワード詳細（rawデータ）"); echo_msg(2, ""); $ans2 = echo_yesno(2,"表示しますか？(y/N) "); if ($ans2 != "y" && $ans2 != "Y" ) { return; } print_r($keyword); rf_pause(); } function rf_menu_kw_update() { global $kw_name_dat; global $ui_mode; global $ht_jump_btn1_label; $kw = array(); $i = 0; foreach($kw_name_dat as $key => $kw_name) { if ($ui_mode == 2) { $kw[] = array('title'=>"$kw_name",'val'=>"$key"); } else { $i++; $kw[$i] = $key; echo_menu(2,$i.". ".$kw_name."(".$key.")",1); } } if ($ui_mode ==2 ) { $mes = "キーワード一覧"; $opt = array( "title" => $mes, "mode" => 1, "multi" => 1, "confirm" => 1, "ht_selid" => "" ); $ht_jump_btn1_label = "選択"; ht_ask_list($kw,$opt); return; } echo_menu_ret_wt(); echo_scr(2,""); $ans = echo_ask(2,"初期化する番号を選択(1-$i,0:all) "); if ($ans == "" || $ans == "R" || $ans == "r") { return; } $ans = rfmenu_check_range($ans,0,$i); if ($ans === false) { return; } echo_msg(2, ""); if ($ans == 0) { echo_msg(2,"0 全キーワード"); } else { $kwn = $kw[$ans]; echo_msg(2,$ans." ".$kw_name_dat[$kwn]."(".$kwn.")"); } echo_scr(2, ""); echo_msg(2, "今設定しているキーワードがクリアされます。"); echo_msg(2, ""); $ans2 = echo_yesno(2,"キーワード初期化を実行しますか？(y/N) "); if ($ans2 != "y" && $ans2 != "Y" ) { return; } if ($ans == 0) { foreach ($kw as $kwn) { $ret = rf_menu_kw($kwn); } } else { $ret = rf_menu_kw($kwn); } rf_pause(); } function rf_menu_kw_multi($kws) { foreach($kws as $kw) { rf_menu_kw($kw); } } function rf_menu_kw($kw) { global $scrdir; global $radiru_gogaku_kw; global $kwdir; global $kw_dat; global $station_kw; global $program_kw; $kwdat = $kw_dat["$kw"]; $dst = $kwdir.$kwdat; $dst_swp = $kwdir.".".$kwdat.".swp"; fin_unlink($dst_swp); $dst_tmp = $dst.".tmp"; $dst_bak = $dst.".bak"; rf_move($dst,$dst_bak); copy_newkw_sub(0, $kwdat); echo_msg(2,"got default keyword"); echo_msg(2,$dst." を初期化しました。"); return true; } function pref_view() { global $pref_code; global $scr_width; if ($scr_width < 50) { $pd = " "; $jmax = intval(($scr_width - 8) / 8); } else { $pd = "　"; $jmax = intval(($scr_width - 8) / 9); } $i = 1; $j = 0; $str = ""; foreach ($pref_code as $key => $val) { $val2 = mb_ereg_replace("県","",$val); $val2 = mb_ereg_replace("府","",$val2); $val2 = mb_ereg_replace("東京都","東京",$val2); $j++; if ($j >= $jmax) { $str .= sprintf("%2s %s", $key, $val2); echo_msg(2, $str); $str = ""; $j = 0; } else { $val2 = mb_substr($val2.$pd,0,3); $str .= sprintf("%2s %s", $key, $val2); } } echo_msg(2, $str); } function rfmenu_set_premium_area() { global $nowarea; global $homearea; global $home_area_code; echo_msg(2, "ラジコプレミアムのエリア変更を行います。"); $area = rf_input_pref(); if ($area !== false) { $ret = premium_putarea($area); } } function rfmenu_rec_date_calc($ex_type) { global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $radiko_timeofbegin; global $radiru_timeofbegin; global $premium_timefree30; $h = date("H"); $dt = -7; $cnt = 8; switch ($ex_type) { case $ex_timefree: if ($premium_timefree30 == 1) { $dt = -30; $cnt = 31; } if ($h < $radiko_timeofbegin) { $dt = $dt -1; } break; case $ex_radiru_vod: if ($h < $radiru_timeofbegin) { $dt = -8; $cnt = 8; } break; case $ex_radiru_gogaku: if ($h < $radiru_timeofbegin) { $dt = -8; $cnt = 8; } else { $dt = -7; $cnt = 8; } break; default: return false; break; } $ans[0] = $dt; $ans[1] = $cnt; return $ans; } function rfmenu_rec_date($ex_type) { global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $ui_mode; global $multi_sw; $r = rfmenu_rec_date_calc($ex_type); $dt = $r[0]; $cnt = $r[1]; $d_st = $dt; $d_en = $d_st + $cnt - 1; if ($ex_type == $ex_radiru_gogaku) { $ans1 = 0; } else { $fmt = rfmenu_rec_date_all($ex_type,$dt,$cnt); if ($ui_mode == 2) { $opt = array( "title" => "日付を選択してください", "mode" => 1, "multi" => 1, "confirm" => 1, "ht_selid" => "" ); ht_ask_list($fmt,$opt); $r[0] = ""; $r[1] = 0; return $r; } for ($i=0; $i<$cnt; $i++) { $f = $fmt[$i]['title']; $d = $fmt[$i]['val']; $j = $i+1; echo_menu(2, " $j. $f",1); } echo_menu_all_wt(); echo_menu_ret_wt(); echo_scr(2, ""); $ans0 = echo_ask(2, "日付を選択してください (1-$cnt 0:all) : "); if ($ans0 == "") { $r[0] = ""; $r[1] = 0; return $r; } $ans1 = rfmenu_check_range($ans0,0,$cnt); if ($ans1 === false) { return false; } } if ($ans1 == 0) { $fmt1 = rfmenu_rec_date_fmt($d_st); $fmt2 = rfmenu_rec_date_fmt($d_en); echo_msg(2, "$fmt1 - $fmt2"); } else { $d1 = $d_st + $ans1 - 1; $fmt = rfmenu_rec_date_fmt($d1); echo_msg(2, "$fmt"); $r[0] = $d1; $r[1] = 1; } echo_msg(2, ""); return $r; } function rfmenu_subtitle($mes) { global $ttl_no; global $ttl_mes; global $rfsubtitle; global $ui_mode; global $ht_jump_addr; global $ht_jump_addr_s; global $ht_jump_no; $rfsubtitle = array(); $mtmp1 = array(); $mtmp2 = array(); $mnav = ""; $no = 0; $ht_jump_no = 0; if ($ttl_no[0] > 0) { $no = $ttl_no[1]; $m = $ttl_mes[1]; if (substr($m,0,1) == "-") { $m = substr($m,1); } $mtmp1[] = "[$no] $m"; $mtmp2[] = "$m"; $n = sprintf("%02d",$no); $ht_jump_no = $n; } if ($ttl_no[0] > 1) { $no = $ttl_no[1]."-".$ttl_no[2]; $m = $ttl_mes[2]; if (substr($m,0,1) == "-") { $m = substr($m,1); } $mtmp1[] = "[$no] $m"; $mtmp2[] = "$m"; $ht_jump_no = sprintf("%02d%02d",$ttl_no[1],$ttl_no[2]); } if ($ttl_no[0] > 2) { $no = $ttl_no[1]."-".$ttl_no[2]."-".$ttl_no[3]; $m = $ttl_mes[3]; if (substr($m,0,1) == "-") { $m = substr($m,1); } $mtmp1[] = "[$no] $m"; $mtmp2[] = "$m"; $ht_jump_no = sprintf("%02d%02d%02d",$ttl_no[1],$ttl_no[2],$ttl_no[3]); } switch($ttl_no[0]) { case 1: $mnav = "[$no]　".$mtmp2[0]; break; case 2: $mnav = "[$no]　".$mtmp2[0]. "　＞　".$mtmp2[1]; break; case 3: $mnav = "[$no]　".$mtmp2[0]."　＞　".$mtmp2[1]."　＞　".$mtmp2[2]; break; } if ($ui_mode == 0) { echo_scr(2, ""); foreach($mtmp1 as $m) { echo_msg(2,$m); } echo_scr(2,""); if ($mes != "") { echo_msg(2,$mes); echo_scr(2,""); } } else if ($ui_mode == 2) { } else { $rfsubtitle = $mtmp1; if ($mes != "") { $rfsubtitle[] = $mes; } } } function rf_usedisk($path) { global $space_min; $disk_t = disk_total_space($path); $disk_f = disk_free_space($path); $disk_u = $disk_t - $disk_f + ($space_min * 1000 * 1000); if ($disk_t <= 0) { $disk_p = 1; } else { if ($disk_u >= $disk_t) { $disk_p = 1; } else { $disk_p = $disk_u / $disk_t; } } return $disk_p; } function rfmenu_wdata_org($wdat) { $wdat2 = array(); foreach ($wdat as $wdata) { if (substr($wdata, 0, 1) == "#") { continue; } if (($para = get_para($wdata, 1)) == null) { continue; } $wdat2[] = $wdata; } return $wdat2; } function rfmenu_wdata_sel($wdat, $no) { $wdat2 = array(); $wmax = count_73($wdat); if ($wmax <= 0) { return $wdat2; } if (count_73($no) <= 0) { return $wdat2; } foreach ($no as $val) { if ($val < 1 || $val > $wmax) { continue; } $wdat2[] = $wdat[$val-1]; } return $wdat2; } function rfmenu_program_list($ex_type, $rsvdata,$mode) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $scr_width; global $ui_mode; $nw = time(); $flist = array(); foreach ($rsvdata as $key => $wdata) { $para = get_para($wdata, 1); $fromtime = $para[0]; $totime = $para[1]; $channel = $para[6]; $title = $para[7]; $fr = get_mktime($fromtime); $to = get_mktime($totime); $dt = date("m/d", $fr); $tm = date("H:i", $fr)."-".date("H:i", $to); $rnw = " "; if ($ex_type == $ex_radiko || $ex_type == $ex_radiru) { if (strtotime($fromtime) <= $nw) { $rnw = "*"; } if (strtotime($totime) < $nw) { $rnw = "-"; } } if (substr($para[14], 0, 2) == "JP") { $area = substr($para[14]."    ", 0, 4); } else { $area = ""; } if ($ex_type == $ex_radiru || $ex_type == $ex_radiru_vod) { $area = ""; $ch = substr($channel."        ", 0, 5); } else { $ch = substr($channel."        ", 0, 7); } if ($area == "") { $areach = "$ch"; } else { $areach = "$area $ch"; } if ($ui_mode == 2) { $areach = str_replace(" ","&nbsp;",$areach); } switch($mode) { case 1: $ttl = rf_strimwidth("$tm $areach $title" ,0, $scr_width-5); break; case 2: $ttl = "$rnw$dt $tm $areach $title"; break; case 0: default: $ttl = "$rnw$dt $tm $areach $title"; break; } $flist[] = array('title' => $ttl, 'val' => $wdata); } return $flist; } function rfmenu_del_passed_program($rsvdata) { $nw = time(); $rsv2 = array(); $i = 0; foreach ($rsvdata as $key => $wdata) { $para = get_para($wdata, 1); $fromtime = $para[0]; $totime = $para[1]; $fr = get_mktime($fromtime); $to = get_mktime($totime); if (strtotime($totime) > $nw) { $rsv2[$i] = $wdata; $i++; } } return $rsv2; } function rfmenu_program_disp($ex_type, $rsvdata, $no, $lmt) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $scr_width; $rsvn = count_73($rsvdata); if ($lmt != -1) { if ($rsvn > $lmt) { $rsvn = $lmt; } } $ln = 1; $n = 0; foreach ($rsvdata as $key => $wdata) { $n++; if ($n > $rsvn) { break; } $para = get_para($wdata, 1); $n = strlen($para[6]); if ($n > $ln) { $ln = $n; } } $spcln = str_repeat(" ", $ln); $nw = time(); $n = 0; foreach ($rsvdata as $key => $wdata) { $n++; if ($n > $rsvn) { break; } $para = get_para($wdata, 1); $fromtime = $para[0]; $totime = $para[1]; $fr = get_mktime($fromtime); $to = get_mktime($totime); $rnw = " "; if ($ex_type != $ex_timefree && $ex_type != $ex_radiru_vod) { if (strtotime($fromtime) <= $nw) { $rnw = "*"; } if (strtotime($totime) < $nw) { $rnw = "-"; } } $nx = 48 - $ln; $pgm = fmt_pgm($para, $ex_type, $nx, $nx); $pgm[4] = substr($pgm[4].$spcln, 0, $ln); $nox = sprintf("%03s", $no[$n-1]); if ($para[14] == ";" || $ex_type == $ex_radiru || $ex_type == $ex_radiru_vod) { $area = $pgm[4]; } else { $area = substr($para[14]." ", 0, 4)." ".$pgm[4]; } echo_msg(2, "$rnw$nox $pgm[0] $pgm[1]-$pgm[2] $area $pgm[5]"); } } function rfmenu_check_digit($ans) { $ans1 = str_replace(' ' ,'',trim($ans)); if ($ans1 == "") { return false; } $no = explode(",", $ans1); if (count_73($no) <= 0) { return false; } $no2 = array(); foreach ($no as $val) { $val2 = explode("-", $val); $cnt = count_73($val2); if ($cnt == 1) { $ret = ctype_digit($val); if ($ret === false) return false; $no2[] = $val; } else if ($cnt == 2) { $st = $val2[0]; $en = $val2[1]; $ret = ctype_digit($st); if ($ret === false) return false; $ret = ctype_digit($en); if ($ret === false) return false; if ($st > $en) return false; for($i=$st;$i<=$en;$i++) { $no2[] = $i; } } else { return false; } } array_unique($no2); sort($no2); return $no2; } function rfmenu_check_range($ans,$min,$max) { $no = explode(",", trim($ans)); if (count_73($no) != 1) { return false; } $ans = $no[0]; $ret = ctype_digit($ans); if ($ret == false) { return false; } if ($ans < $min || $ans > $max) { return false; } return $ans; } function rfmenu_radiko_rsv_now($selch,$rd) { global $area_code; global $prog_url; global $prog_retry; global $prog_wait; global $dlmt; global $failed_record; global $in_ng; global $out_ng; global $radiko_timeofbegin; global $ex_radiko; global $radiko_today_disp_offset; global $radiko_today_disp_dur; global $radiko_reserve_now; global $radiru_reserve_now; $offs = $radiko_today_disp_offset; $dur = $radiko_reserve_now * 24 * 3600; $nw = time(); $fr_nw = $nw + $offs; $to_nw = $fr_nw + $dur; $cnt = $rd; if ($cnt <= 0) $cnt = 1; $tm = date("H", $fr_nw); if ($tm >= 0 && $tm <= $radiko_timeofbegin) { $dt = -1; if ($cnt == 1) $cnt++; } else { $dt = 0; } $dt1 = strtotime("$dt day"); $rsvdata = array(); $xml = rf_get_schedule_radiko($dt1, $cnt, $area_code, 0); if ($xml == array()) return $rsvdata; $ttl = 0; $skp = 0; for ($i = 0; $i < $cnt; $i++) { foreach ($xml[$i]->stations->station as $station) { $station_xml = simplexml_load_string($station->asXml()); foreach ($station_xml->progs->prog as $prog_xml) { $ch = $station_xml['id']; if ($selch != "" && $selch != $ch) continue; $ttl++; $hit = 0; $to = $prog_xml['to']; $ft = $prog_xml['ft']; $tto = get_mktime($to); $tfr = get_mktime($ft); if ($tfr <= $fr_nw && $tto >= $fr_nw) { $hit = 1; } if ($tfr > $fr_nw && $tfr < $to_nw) { $hit = 2; if ($rd == 0) $hit = 0; } if ($hit == 0) { continue; } if (!valid_chk($ex_radiko, $ch)) { continue; } $dur = $prog_xml['dur']; $failed_record = $prog_xml->failed_record; $in_ng = $prog_xml->ts_in_ng; $out_ng = $prog_xml->ts_out_ng; $title = $prog_xml->title; $artist = $prog_xml->pfm; $img = $prog_xml->img; $dur = sprintf("%05d", $dur); $title = fn_edit($title); $artist = fn_edit($artist); if ($artist == "") { $artist = $dlmt; } if ($img == "") { $img = $dlmt; } $kw = $dlmt; if ($hit == 1) { $kw = "NOW"; } if ($hit == 2) { $kw = "RSV"; } $prog_id= $prog_xml['id']; $genrec = $prog_xml->genre->personality['id']; $genrec .= ",".$prog_xml->genre->personality->name; $genre = $prog_xml->genre->program['id']; $genre .= ",".$prog_xml->genre->program->name; $genrec = str_replace(" ","",$genrec); $genre = str_replace(" ","",$genre); if ($genrec == ",") $genrec = $dlmt; if ($genre == ",") $genre = $dlmt; $musiclist = $dlmt; $idx = $ch."_".$title."_".$ft; $wdata = rf_make_wdata($ft, $to, $dur, $failed_record, $in_ng, $out_ng, $ch, $title, $artist, $img, $kw, $prog_id, $dlmt, $dlmt, $dlmt, $dlmt, $genre, $dlmt, $musiclist); if (!array_key_exists($idx, $rsvdata)) { $rsvdata[$idx] = $wdata; } } } } $rsv = count_73($rsvdata); return $rsvdata; } function rfmenu_radiru_rsv_now($netch,$rd) { global $radiru_timeofbegin; global $radiru_area_1; global $dlmt; global $radiru_today_disp_offset; global $radiru_today_disp_dur; global $radiko_reserve_now; global $radiru_reserve_now; $offs = $radiru_today_disp_offset; $dur = $radiru_reserve_now * 24 * 3600; $area = $radiru_area_1; $nw = time(); $fr_nw = $nw + $offs; $to_nw = $fr_nw + $dur; $cnt = $rd; if ($cnt <= 0 ) $cnt = 1; $tm = date("H", $fr_nw); if ($tm >= 0 && $tm <= $radiru_timeofbegin) { $dt = -1; if ($cnt == 1) $cnt++; } else { $dt = 0; } $dt1 = strtotime("$dt day"); $url_xml = rf_get_config_radiru(); $ch2 = $url_xml["$area"]->areakey; $ch2en = $url_xml["$area"]->area; $xml = rf_get_schedule_radiru($dt1, $cnt, $ch2, $netch, 0); $ttl = 0; $skp = 0; $rsvdata = array(); $k = -1; foreach($xml as $js) { $k++; $cnt2 = count_73($js["list"]["$netch"]); for ($i=0; $i<$cnt2; $i++) { $st = $js["list"]["$netch"][$i]; $ttl++; $ft = $st["start_time"]; $to = $st["end_time"]; $hit = 0; $tto = strtotime($to); $tfr = strtotime($ft); if ($tfr < $fr_nw && $tto > $fr_nw) { $hit = 1; } if ($tfr >= $fr_nw && $tfr < $to_nw) { $hit = 2; if ($rd == 0) $hit = 0; } if ($hit == 0) { continue; } $prog_id= $st["event_id"]; $title = $st["title"]; $artist = $st["act"]; $ch = $st["service"]["id"]; $failed_record = 0; $in_ng = 0; $out_ng = 0; $img = ""; $imgm = ""; if ($st["images"]["logo_l"] != null) { $img = $st["images"]["logo_l"]["url"]; } if ($st["images"]["thumbnail_m"] != null) { $imgm = $st["images"]["thumbnail_m"]["url"]; } if ($img == "") $img = $imgm; $title = fn_edit($title); $artist = fn_edit($artist); if ($artist == "") { $artist = $dlmt; } if ($img == "" || $img == null) { $img = $dlmt; } $chx = $ch . "_" . $ch2en; if ($ch == "r2" || $ch2en == "tokyo") { $chx = $ch; } $ft = date("YmdHis", strtotime($ft)); $to = date("YmdHis", strtotime($to)); $dur = sprintf("%05d", strtotime($to) - strtotime($ft)); $kw = ";"; $genre = rf_get_radiru_genre($st); $music = $st["music"]; $musiclist = fn_edit($music); $wdata = rf_make_wdata($ft, $to, $dur, $failed_record, $in_ng, $out_ng, $chx, $title, $artist, $img, $kw, $prog_id, $dlmt, $dlmt, $dlmt, $dlmt, $genre, $dlmt, $musiclist); $idx = $chx."_".$ft."_".$title; if (!array_key_exists($idx, $rsvdata)) { $rsvdata[$idx] = $wdata; } else { } } } return $rsvdata; } function rfmenu_radiko_program($ch, $dt, $dtn) { global $area_code; global $prog_url; global $prog_retry; global $prog_wait; global $dlmt; global $radiko_timeofbegin; $xml = rf_get_schedule_radiko($dt, $dtn, $area_code, 0); $rsvdata = array(); for ($i=0; $i<$dtn; $i++) { foreach ($xml[$i]->stations->station as $station) { $station_xml = simplexml_load_string($station->asXml()); $ch2 = $station_xml['id']; if ($ch != $ch2) { continue; } foreach ($station_xml->progs->prog as $prog_xml) { $prog_id= $prog_xml['id']; $to = $prog_xml['to']; $ft = $prog_xml['ft']; $tto = get_mktime($to); $tfr = get_mktime($ft); $dur = $prog_xml['dur']; $failed_record = $prog_xml->failed_record; $in_ng = $prog_xml->ts_in_ng; $out_ng = $prog_xml->ts_out_ng; $title = $prog_xml->title; $artist = $prog_xml->pfm; $img = $prog_xml->img; $dur = sprintf("%05d", $dur); $title = fn_edit($title); $artist = fn_edit($artist); if ($artist == "") { $artist = $dlmt; } $kw = $ch; $genrec = $prog_xml->genre->personality['id']; $genrec .= ",".$prog_xml->genre->personality->name; $genre = $prog_xml->genre->program['id']; $genre .= ",".$prog_xml->genre->program->name; $genrec = str_replace(" ","",$genrec); $genre = str_replace(" ","",$genre); if ($genrec == ",") $genrec = $dlmt; if ($genre == ",") $genre = $dlmt; $musiclist = $dlmt; $idx = $ch."_".$title."_".$ft; $wdata = rf_make_wdata($ft, $to, $dur, $failed_record, $in_ng, $out_ng, $ch, $title, $artist, $img, $kw, $prog_id, $dlmt, $dlmt, $area_code, $dlmt, $genre, $genrec, $musiclist); if (!array_key_exists($idx, $rsvdata)) { $rsvdata[$idx] = $wdata; } } } } $rsv = count_73($rsvdata); return $rsvdata; } function rfmenu_radiru_program($ch, $dt, $n) { global $radiru_area_1; global $radiru_timeogbegin; $kwdat[0] = $ch; $kwdat_ng = array(); $parea = $radiru_area_1; $chlist[0] = $ch; $rsvdata = radiru_rsv_ex($kwdat,$kwdat_ng, $dt, $n, 0, $parea, $chlist); return $rsvdata; } function rfmenu_radiko_plisting($fn,$ymd,$area_code) { $dat = rf_sch_radiko($ymd, $area_code); if ($dat === false) return false; $ret = file_put_contents($fn, $dat, LOCK_EX); if ($ret === false) return false; return true; } function rfmenu_radiru_plisting($fn,$ymd,$areakey,$netch) { $dat = rf_sch_radiru($ymd, $areakey, $netch); if ($dat === false) return false; $ret = file_put_contents($fn, $dat, LOCK_EX); if ($ret === false) return false; return true; } function rfmenu_onair($ex_type) { while(1 == 1) { $wdat = rfmenu_get_onair($ex_type); if ($wdat === false) { echo_msg(2,"リストが空です。"); rf_pause(); break; } $ret = rfmenu_onair_sel($ex_type,$wdat); if ($ret === true) break; } return; } function rfmenu_get_onair($ex_type) { global $nowarea; global $area_code; global $radiru_ch; global $ex_radiko; global $ex_radiru; global $radiru_area_1; global $radiko_today_disp_offset; global $radiko_today_disp_dur; global $radiru_today_disp_offset; global $radiru_today_disp_dur; $flg = rfgw_check_sshd(); rfgw_reconnect_bd(); switch ($ex_type) { case $ex_radiko: $offs = $radiko_today_disp_offset; $dur = $radiko_today_disp_dur; $authtoken = auth_ex(0); echo_msg(2, "area : $nowarea ($area_code)"); $rsvdata = rfmenu_radiko_rsv_now("",0); break; case $ex_radiru: $offs = $radiru_today_disp_offset; $dur = $radiru_today_disp_dur; echo_msg(2, "area : $radiru_area_1"); $rsvdata = array(); foreach ($radiru_ch as $netch) { if (!valid_chk($ex_radiru, $netch)) { continue; } $rsvd = rfmenu_radiru_rsv_now($netch,0); $rsvdata = array_merge($rsvdata, $rsvd); } break; default: return; break; } if (count_73($rsvdata) <= 0) { return false; } $wdat = rfmenu_wdata_org($rsvdata); $wdat = rfmenu_del_passed_program($wdat); return $wdat; } function rfmenu_onair_sel($ex_type, $wdat) { global $area_code; global $ex_radiko; global $ex_radiru; $rmes = "終了"; $imes = "どれを聴取しますか"; $ttl = "放送番組"; echo_msg(2,""); $onairch = rfmenu_play_piddata(); $wdat0 = rf_dat_sel_onair($ex_type, $wdat, $ttl,$onairch, $rmes, $imes); if ($wdat0 === true) { return true; } if ($wdat0 === false) { return false; } $n = count_73($wdat0); if ($n != 1) { echo_msg(2,"リストが異常です。"); rf_pause(); return true; } $para = get_para($wdat0[0], $ex_type); echo_msg(2," $para[8]"); $onair = rf_program_onair_check($para); if ($onair !== true) { echo_msg(2,"選択した番組はonair中ではありませんが"); echo_msg(2,"同一の局を選択します。"); } $flg = rfgw_check_sshd(); echo_msg(2, ""); $ynmes = "聴取しますか ? (y/N) : "; rfriends_live($ex_type,$para,$flg); rf_pause(); return false; } function rf_amixer_sub($amixer) { if ($amixer != 0) { rfmenu_play_abort(1); echo_msg(2, ""); echo_msg(2, "聴取を中止しました"); rf_pause(); return false; } while(1 == 1) { $ret = rfgw_amixer_utl(1); echo_msg(2, " 1. 聴取を中止"); echo_msg(2, " 2. amixer on"); echo_msg(2, " 3. amixer off (mute)"); echo_msg(2, " 4. 音量 up (+10)"); echo_msg(2, " 5. 音量 dn (-10)"); echo_msg(2, " 6. 音量 n  (0-100)"); echo_msg(2, ""); $no = echo_ask(2, "番号を入力 (1-6) [ret:戻る] "); echo_msg(2, ""); if (($no2 = rfmenu_check_range($no,1,6)) === false) { break; } if ($no2 == 1) { rfmenu_play_abort(1); echo_msg(2, ""); echo_msg(2, "聴取を中止しました"); rf_pause(); break; } $ret = rfgw_amixer_utl($no2); } return false; } function rf_amixer_get_dev() { $cmd = "amixer |grep Simple| cut -d ' ' -f 4"; $dev = external_exec($cmd); if($dev == array()) { $dev = ""; } else { $dev = $dev[0]; } return $dev; } function rf_amixer_get_volume() { $l = 0; $r = 0; $dev = rf_amixer_get_dev(); if ($dev == "") return array($l,$r); $cmd = "amixer sget $dev"; $outs = external_exec($cmd); foreach($outs as $out) { $v = explode(' ',trim($out).'     '); if ($v[0] == 'Mono:') { $v = str_replace(array('[','%]'),'',$v[3],$cnt); $l = $v; $r = $v; if ($cnt != 2) continue; break; } if ($v[0] != 'Front') continue; $v4 = str_replace(array('[','%]'),'',$v[4],$cnt); if ($cnt != 2) continue; if ($v[1] == 'Left:') { $l = $v4; } else if ($v[1] == 'Right:') { $r = $v4; } } return array($l,$r); } function rf_dat_sel_onair($ex_type, $wdat, $ttl0,$onairch, $rmes, $imes) { global $ffplay_userbuf; global $multi_sw; global $ui_mode; $flist = rfmenu_program_list($ex_type, $wdat,1); $mode = 1; $ttl = $ttl0; if ($onairch != "") { $ttl = $ttl0."(now:$onairch)"; $amixer = rfgw_amixer_utl(0); if ($amixer == 0) { $onairttl = "($onairch) --- [聴取中止,on,off,v+,v-,v] -----"; } else { $onairttl = "($onairch) ----- [聴取中止] -----"; } if ($ui_mode != 2) { if ($mode == 0) $flist[] = $onairttl; else $flist[] = array('title'=>$onairttl,'val'=>''); } } $canno = count_73($flist); $opt = array( "title" => $ttl."（$canno 件）", "input_type" => 0, "page_control" => 1, "return_mes" => "$rmes", "input_mes" => "$imes", "mode" => $mode, "multi" => 0, "confirm" => 0, "ht_selid" => "selpgm" ); $no = rf_pctl_disp($flist, $opt); $ans = $no[0]; if ($ans == "r") { return true; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); return false; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); return false; } if (($onairch != "") && ($ans == $canno)) { rf_amixer_sub($amixer); return false; } $wdat = rfmenu_wdata_sel($wdat, $no); if (count_73($wdat) <= 0) { return false; } rfmenu_program_disp($ex_type, $wdat, $no, -1); return $wdat; } 