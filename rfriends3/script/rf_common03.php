<?php
 function rf_check_program($ex_type,$recfile) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $keyword; $w = ""; $fl = rf_get_program_part($recfile); if ($fl === false) return $w; switch ($ex_type) { case $ex_radiko: $key = "double_program_radiko"; break; case $ex_radiru: $key = "double_program_radiru"; if (!array_key_exists($key, $keyword)) { $key = "target_program"; } break; case $ex_timefree: case $ex_radiru_vod: case $ex_radiru_gogaku: ; default: return $w; break; } $wds = rf_get_keyword($key); if (!is_array($wds)) { return $w; } if (count_73($wds) == 0) { return $w; } foreach ($wds as $w) { $pos = strpos($fl, $w); if ($pos !== false) { if ($pos == 0) { return $w; } } } $w = ""; return $w; } function rf_check_double_rec($ex_type, $recfile, $ext, $ch, $fnm, $parentflg, $pflg) { global $radiko_double_rec; global $radiru_double_rec; global $timefree_double_rec; global $radiru_vod_double_rec; global $radiru_gogaku_double_rec; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir; global $rftrans; global $rftrans_s; global $rftrans_dir; global $rftrans_radiko; global $rftrans_radiru; global $rftrans_timefree; global $rftrans_radiru_vod; global $rftrans_radiru_gogaku; global $rftrans_codec; global $rftrans_codec_opt; global $usrdir; global $tmpdir; global $DS; switch ($ex_type) { case $ex_radiko: $dflg = $radiko_double_rec; $dflgn = "radiko_double_rec"; $recdir = $radiko_recdir; $recdir_p = $timefree_recdir; $cflg = $rftrans_radiko; $sdir = "radiko"; break; case $ex_radiru: $dflg = $radiru_double_rec; $dflgn = "radiru_double_rec"; $recdir = $radiru_recdir; $recdir_p = $radiru_vod_recdir; $cflg = $rftrans_radiru; $sdir = "radiru"; break; case $ex_timefree: $dflg = $timefree_double_rec; if ($dflg == 1) $dflg = 0; $dflgn = "timefree_double_rec"; $recdir = $timefree_recdir; $recdir_p = ""; $cflg = $rftrans_timefree; $sdir = "timefree"; break; case $ex_radiru_vod: $dflg = $radiru_vod_double_rec; $dflgn = "radiru_vod_double_rec"; $recdir = $radiru_vod_recdir; $recdir_p = ""; $cflg = $rftrans_radiru_vod; $sdir = "radiru_vod"; break; case $ex_radiru_gogaku: $dflg = $radiru_gogaku_double_rec; $dflgn = "radiru_gogaku_double_rec"; $recdir = $radiru_gogaku_recdir; $recdir_p = ""; $cflg = $rftrans_radiru_gogaku; $sdir = "radiru_gogaku"; break; default: return false; break; } if ($parentflg == 1) $recdir = $recdir_p; $fil = $recdir."$recfile.$ext"; switch ($dflg) { case 0: if ($pflg ==1 ) echo_prn(1, "重複録音なし(ファイル名)"); if ($pflg ==1 ) echo_prn(1, "$dflgn : $dflg $recdir"); if (file_exists($fil)) { if ($pflg ==1 ) echo_prn(1, "exists : $fil"); return true; } else { if ($pflg ==1 ) echo_prn(1, "not exists : $fil"); } break; case 1: if ($pflg ==1 ) echo_prn(1, "重複録音なし(番組名)"); if ($pflg ==1 ) echo_prn(1, "$dflgn : $dflg $recdir"); if (file_exists($fil)) { if ($pflg ==1 ) echo_prn(1, "exists : $fil"); return true; } else { $ret = rf_check_parts($ex_type,$recdir, $recfile); if ($ret === false) { if ($pflg ==1 ) echo_prn(1, "not exists : $fil"); return false; } else { if ($pflg ==1 ) echo_prn(1, "exists : ".$ret[0]); return true; } } break; case 2: default: if ($pflg ==1 ) echo_prn(1, "重複録音あり"); if ($pflg ==1 ) echo_prn(1, "$dflgn : $dflg $recdir"); return false; break; } if ($rftrans != 2) { return false; } if ($cflg != 2) { return false; } if (($idir = realpath($rftrans_dir)) === false) { return false; } switch ($rftrans_s) { case 1: $recdir = $idir.$DS.$sdir.$DS.$ch."_".$fnm.$DS; break; case 2: $recdir = $idir.$DS.$sdir.$DS.$ch.$DS; break; case 3: $recdir = $idir.$DS; break; case 0: default: $recdir = $idir.$DS.$sdir.$DS.$ch.$DS.$fnm.$DS; break; } $fil = $recdir."$recfile.$ext"; if ($pflg ==1 ) echo_prn(1, ""); switch ($dflg) { case 0: if ($pflg ==1 ) echo_prn(1, "[転送先] 重複録音なし(ファイル名)"); if ($pflg ==1 ) echo_prn(1, "$dflgn : $dflg $recdir"); if (file_exists($fil)) { if ($pflg ==1 ) echo_prn(1, "exists : $fil"); return true; } else { if ($pflg ==1 ) echo_prn(1, "not exists : $fil"); return false; } break; case 1: if ($pflg ==1 ) echo_prn(1, "[転送先] 重複録音なし(番組名)"); if ($pflg ==1 ) echo_prn(1, "$dflgn : $dflg $recdir"); if (file_exists($fil)) { if ($pflg ==1 ) echo_prn(1, "exists : $fil"); return true; } else { $ret = rf_check_parts($ex_type,$recdir, $recfile); if ($ret === false) { if ($pflg ==1 ) echo_prn(1, "not exists : $fil"); return false; } else { if ($pflg ==1 ) echo_prn(1, "exists : ".$ret[0]); return true; } } break; default: if ($pflg ==1 ) echo_prn(1, "[転送先] 重複録音あり"); if ($pflg ==1 ) echo_prn(1, "$dflgn : $dflg $recdir"); return false; break; } return false; } function rf_dur_recfile($recfile) { $fl_parts = explode("_", $recfile); $fl_n = count_73($fl_parts); if ($fl_n < 5) { return 0; } $dt1 = $fl_parts[$fl_n - 3]; $fr1 = $fl_parts[$fl_n - 2]; $to1 = $fl_parts[$fl_n - 1]; $dr1 = strtotime($dt1.$to1) - strtotime($dt1.$fr1); return $dr1; } function rf_get_program_part($recfile) { global $nm_fmt; $recfile2 = basename($recfile); $p = explode(".", $recfile2); $n = count_73($p); if ($n >= 2) { $recfile2 = $p[0]; } $fl_parts = explode("_", $recfile2); $fl_n = count_73($fl_parts); $nm_parts = explode("_", $nm_fmt); $nm_n = count_73($nm_parts); if ($nm_n > $fl_n) { $nm_n = $fl_n; } if ($nm_n < 1) return false; for($i=0;$i<$nm_n;$i++) { if ($nm_parts[$i] == '%5$s') { return $fl_parts[$i]; } } return false; } function rf_check_parts_self($files,$target) { if (!is_array($files)) return false; $ret = array(); foreach($files as $fil) { if ($fil == $target) continue; $ret[] = $fil; } if (empty($ret)) return false; return $ret; } function rf_check_parts($ex_type,$recdir, $recfile) { $w = rf_check_program($ex_type,$recfile); if ($w == "") return false; $p_part = rf_get_program_part($recfile); if ($p_part === false) return false; $pat = $recdir."*"; $mt = glob($pat); if ($mt === false) return false; $mt_n = count_73($mt); $ret = array(); foreach ($mt as $mtx) { $mtx_file = basename($mtx); $mtx_part = rf_get_program_part($mtx_file); if ($mtx_part === false) continue; if ($mtx_part == $p_part) { $ret[] = $mtx; } } if (empty($ret)) { return false; } return $ret; } function rf_get_target_program($ex_type,$recdir) { $result = array(); $pat = $recdir."*"; $mt = glob($pat); if ($mt === false) return $result; foreach ($mt as $mtx) { $w = rf_check_program($ex_type,$mtx); if ($w == "") continue; $result[] = $mtx; } return $result; } function rf_get_target_part($mt) { $result = array(); foreach ($mt as $mtx) { $mtx_file = basename($mtx); $mtx_part = rf_get_program_part($mtx_file); if ($mtx_part === false) $mtx_part = ""; $result[] = $mtx_part; } return $result; } function rf_dirsize_h($dir) { global $DS; $flist = rf_file_list($dir); $siz = rf_file_list_size($flist); $cnt = count_73($flist); $ret[0] = $siz; $ret[1] = $cnt; return $ret; } function nonbom_file($fn) { if (file_exists($fn)) { $lines = rf_file($fn,0,0); } else { $lines = array(); } if (count_73($lines) > 0) { $lines[0] = preg_replace("/^\xEF\xBB\xBF/", '', $lines[0]); } return $lines; } function rf_file_list($dir) { $flist = array(); if (!file_exists($dir)) { return $flist; } $dirs = glob(rtrim($dir, '/') . '/*'); foreach ($dirs as $fil) { if (is_file($fil)) { $flist[] = $fil; } if (is_dir($fil)) { $flist = array_merge($flist, rf_file_list($fil)); } } return $flist; } function rf_file_list_slelect($flist, $ext) { $flist2 = array(); foreach ($flist as $fil) { if (substr($fil, -4) != $ext) { continue; } $flist2[] = $fil; } return $flist2; } function rf_file_list_sort($flist) { $dt = array(); foreach ($flist as $fil) { $dt[] = filemtime($fil); } array_multisort($dt, $flist); return $flist; } function rf_file_list_slice($flist, $ct) { $n = 0; $flist2 = array(); foreach ($flist as $fil) { if ($n >= $ct) { break; } $n++; $flist2[] = $fil; } return $flist2; } function rf_file_list_size($flist) { $siz = 0; foreach ($flist as $fil) { if (($s = filesize($fil)) !== false) { $siz += $s; } } return $siz; } function rf_file_sum($udir) { global $DS; $flist_radiko = rf_file_list($udir.$DS."radiko"); $siz_radiko = rf_file_list_size($flist_radiko); $flist_radiru = rf_file_list($udir.$DS."radiru"); $siz_radiru = rf_file_list_size($flist_radiru); $flist_timefree = rf_file_list($udir.$DS."timefree"); $siz_timefree = rf_file_list_size($flist_timefree); $flist_radiru_vod = rf_file_list($udir.$DS."radiru_vod"); $siz_radiru_vod = rf_file_list_size($flist_radiru_vod); $flist_radiru_gogaku = rf_file_list($udir.$DS."radiru_gogaku"); $siz_radiru_gogaku = rf_file_list_size($flist_radiru_gogaku); $siz_total = $siz_radiko+$siz_radiru+$siz_timefree+$siz_radiru_vod+$siz_radiru_gogaku; return $siz_total; } function rf_file_delete_candidate($udir, $n) { global $DS; $flist_radiko = rf_file_list($udir."radiko"); $flist_radiko = rf_file_list_sort($flist_radiko); $flist_radiko = rf_file_list_slice($flist_radiko, $n); $flist_radiru = rf_file_list($udir."radiru"); $flist_radiru = rf_file_list_sort($flist_radiru); $flist_radiru = rf_file_list_slice($flist_radiru, $n); $flist_timefree = rf_file_list($udir."timefree"); $flist_timefree = rf_file_list_sort($flist_timefree); $flist_timefree = rf_file_list_slice($flist_timefree, $n); $flist_radiru_vod = rf_file_list($udir."radiru_vod"); $flist_radiru_vod = rf_file_list_sort($flist_radiru_vod); $flist_radiru_vod = rf_file_list_slice($flist_radiru_vod, $n); $flist_radiru_gogaku = rf_file_list($udir."radiru_gogaku"); $flist_radiru_gogaku = rf_file_list_sort($flist_radiru_gogaku); $flist_radiru_gogaku = rf_file_list_slice($flist_radiru_gogaku, $n); $flist = array_merge($flist_radiko, $flist_radiru, $flist_timefree, $flist_radiru_vod, $flist_radiru_gogaku); $flist = rf_file_list_sort($flist); $flist = rf_file_list_slice($flist, $n); return $flist; } function rf_get_update_check() { global $base; global $tmpdir; global $scrdir; global $rfriends; global $update_check; if ($update_check == 0) { return(""); } $ty = 0; $rf = $rfriends.".flg"; $url = rf_get_down_url2(); if ($url === false) return "[?]"; $url2 = $url."update/"; $fl = $base.$rfriends; $flf = $url2.$rfriends.".flg"; $fl0 = $url2.$rfriends."_0"; $fl1 = $url2.$rfriends."_1"; $dat = file_get_contents($fl); if ($dat === false) { echo_msg(2, "$rfriends がありません。"); exit(1); } if (rf_wget_spider2($flf,1,1) === false) { return("[?]"); } $bchk = strpos($dat,"(C)"); if ($bchk === false) { return ("[???]"); } $dt = substr($dat,0,$bchk); $bchk = strpos($dt,"-"); if ($bchk === false) { $dat0 = @file_get_contents($fl0); if ($dat0 === false) { return("[?]"); } if ($dat == $dat0) { return(""); } } else { $dat1 = @file_get_contents($fl1); if ($dat1 === false) { return("[?]"); } if ($dat == $dat1) { return("[.]"); } } return("[!]"); } function rf_get_update_check3() { global $base; global $tmpdir; global $scrdir; global $rfriends; global $update_check; if ($update_check == 0) { return(""); } $ty = 0; $rf = $rfriends.".flg"; $url = rf_get_down_url2(); if ($url === false) return "[offline]"; $updt = rf_update_dir(); $url2 = $url.$updt; $fl = $base.$rfriends; $flf = $url2.$rfriends.".flg"; $fl0 = $url2.$rfriends."_0"; $fl1 = $url2.$rfriends."_1"; $ver = rf_get_ver3($fl); if ($ver === false) { echo_msg(2, "$rfriends がありません。"); exit(1); } $ver0 = rf_get_ver3($fl0); if ($ver0 === false) $var0 = "?"; $ver1 = rf_get_ver3($fl1); if ($ver1 === false) $var1 = "?"; $ver = "[$ver0 , $ver1]"; return($ver); } function rf_get_ver3($url) { $dat = @file_get_contents($url); if ($dat === false) { return false; } $datn = explode(" ",$dat); if (count_73($datn) < 3) return false; if ($datn[2] == "Ver.") { $ver = $datn[3]; return $ver; } if ($datn[1] == "Ver.") { $ver = $datn[2]; return $ver; } return false; } function count_73($ar) { if (!empty($ar)) { return count($ar); } else { return 0; } } function rf_reset_crontab() { global $cfgdir; global $crontabtxt; rf_get_crontab(); $tempfile = $cfgdir.$crontabtxt; if (!file_exists($tempfile)) { echo_msg(2, "file not found $tempfile"); return; } $txts = file($tempfile); $mx = count_73($txts); for($i=0;$i<$mx;$i++) { $txt = $txts[$i]; if (substr($txt,0,1) == "#") continue; $f = 0; if (strpos($txt,"ex_rfriends") !== false ) $f = 1; if (strpos($txt,"ex_radiko" ) !== false ) $f = 1; if (strpos($txt,"ex_radiru" ) !== false ) $f = 1; if (strpos($txt,"ex_timefree") !== false ) $f = 1; if ($f == 1) { $txts[$i] = "#".$txt; } } file_put_contents($tempfile,$txts,LOCK_EX); rf_put_crontab(); } function rf_init_crontab() { external_sys("crontab -r"); echo_msg(2, "'crontab'を初期化しました。"); } function rf_get_crontab() { global $cfgdir; global $crontabtxt; $tempfile = $cfgdir.$crontabtxt; if (file_exists($tempfile)) { rf_move($tempfile, "$tempfile.bak"); echo_msg(2, "save $tempfile.bak"); } external_sys("crontab -l > $tempfile"); echo_msg(2, "'crontab' -> $tempfile"); } function rf_put_crontab() { global $cfgdir; global $crontabtxt; $tempfile = $cfgdir.$crontabtxt; if (file_exists($tempfile)) { external_sys("crontab -l > $tempfile.old"); echo_msg(2, "'crontab' -> $tempfile.old"); external_sys("crontab $tempfile"); echo_msg(2, "$tempfile -> 'crontab'"); return true; } else { echo_msg(2, "file not found $tempfile"); return false; } } function rf_append_crontab() { global $cfgdir; global $crontabtxt; global $crontab_template; global $crontab_template2; global $sch_daily2; $tempfile = $cfgdir.$crontabtxt; if (!file_exists($tempfile)) { file_put_contents($tempfile, $crontab_template, LOCK_EX); if ($sch_daily2 != "") { file_put_contents($tempfile, $crontab_template2, FILE_APPEND | LOCK_EX); } echo_msg(2, "tempファイルに「デイリー処理」を追加しました。"); return true; } $dat = file_get_contents($tempfile); $n = strpos($dat, "ex_rfriends.sh"); if ($n === false) { rf_copy($tempfile, $tempfile.".bak"); echo_msg(2, "save $tempfile.bak"); file_put_contents($tempfile, $crontab_template, FILE_APPEND | LOCK_EX); if ($sch_daily2 != "") { file_put_contents($tempfile, $crontab_template2, FILE_APPEND | LOCK_EX); } echo_msg(2, "tempファイルの末尾に「デイリー処理」を追加しました。"); return true; } echo_msg(2, "既に「デイリー処理」が追加されています。"); return false; } function rf_product_check() { global $rfriends_parts; global $premium_mode; if ($premium_mode == 1) { $product = "P"; } else { $product = "N"; } $rfriends_parts[1] = $product; return $product; } function diff_ntp() { global $allow_limit; $ret = array(); $st = get_ntp(); if ($st === false) { $ret[0] = false; $ret[1] = 0; $ret[2] = 0; $ret[3] = 0; $ret[4] = 0; return $ret; } $nw = time(); $diff = $nw - $st; $mgn = (int)(abs($diff)); if ($mgn > $allow_limit) { $mgn = $allow_limit; } if ($diff <= -1) { $mgn = -$mgn; } $ret[0] = true; $ret[1] = $nw; $ret[2] = $st; $ret[3] = $diff; $ret[4] = $mgn; return $ret; } function disp_ntp() { $nw = time(); $mgn = 0; $pc_t = date("Y/m/d H:i:s", $nw); echo_prn(1, ""); echo_prn(1, "PC_   : $pc_t"); return $mgn; } function get_ntp() { global $nict_url; if (($output = @file_get_contents($nict_url)) === false) { return false; } $json_data = json_decode($output, true); if ($json_data == null) { return false; } $st = $json_data["st"]; return $st; } function external_sys($exec_cmd) { system($exec_cmd, $ret); return $ret; } function external_exec($exec_cmd) { exec($exec_cmd, $result, $ret); return $result; } function external_exec_win($exec_cmd) { exec($exec_cmd, $result, $ret); if ($result === false) return $result; $result2 = array(); foreach($result as $r) { $r2 = mb_convert_encoding($r, "utf-8", "sjis-win"); $result2[] = $r2; } return $result2; } 