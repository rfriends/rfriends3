<?php
 function fn_edit($fn) { global $convert_kana; global $convert_kana_para; global $fname_max; global $tagname_max; global $replace_char_space; global $replace_char_spacej; global $replace_char_underline; $pat1 = array( '/\xE3\x80\x9C/' => "\xEF\xBD\x9E", '/\xE2\x88\x92/' => "\xEF\xBC\x8D", '/\xE2\x80\x96/' => "\xE2\x88\xA5", '/\xC2\xA3/' => "\xEF\xBF\xA1", '/\xC2\xAC/' => "\xEF\xBF\xA2", '/\xC2\xA2/' => "\xEF\xBF\xA0", ); $pat2 = array( ':' => '：', '*' => '＊', '?' => '？', '/' => '／', '\\' => '￥', '"' => '”', "'" => "’", '<' => '＜', '>' => '＞', '|' => '｜', ',' => '-', '.' => '-', '&' => '＆', '#' => '＃', '[' => '［', ']' => '］', ); $pat3 = array( ' ' => '@', '　' => '@', ); $sp = str_replace(array_keys($pat3), array_values($pat3), $replace_char_space); $spj = str_replace(array_keys($pat3), array_values($pat3), $replace_char_spacej); $ul = str_replace(array_keys($pat3), array_values($pat3), $replace_char_underline); if ($fn == "") { return $fn; } if ($convert_kana == 1) { $fn = mb_convert_kana($fn, $convert_kana_para); } $fn = preg_replace(array_keys($pat1), array_values($pat1), $fn); $fn = str_replace(' ', $sp, $fn); $fn = str_replace('　', $spj, $fn); $fn = str_replace("\t", $sp, $fn); $fn = str_replace(array("\r", "\n"), $sp, $fn); $fn = str_replace(array_keys($pat2), array_values($pat2), $fn); $fn = fn_cut($fn, $tagname_max); return $fn; } function fn_cut($fn, $n) { if ($n <= 0) return $fn; $nb = strlen($fn); if ($n >= $nb) return $fn; $fn2 = mb_substr($fn,0,$n); echo_prn(1,""); echo_prn(1,"--- string too long $nb > $n"); echo_prn(1,"$fn"); while (strlen($fn2) > $n ) { $fn2 = mb_substr($fn2, 0, -1); } echo_prn(1,"$fn2"); return $fn2; } function update_file_time($fl, $tm) { $t = get_mktime($tm); rf_touch_tm($fl, $t); } function get_mktime($tm) { $tm2 = strtotime($tm); return $tm2; } function get_mktime2($tm) { $tm2 = strtotime($tm); $tm2 = strtotime(date("YmdHi", $tm2)); return $tm2; } function set_ng($fail, $inng, $otng) { global $ng_head; global $failed_record_flag; global $in_ng_flag; global $out_ng_flag; if ($ng_head == "") { return ""; } $f = $fail; $i = $inng; $o = $otng; if ($failed_record_flag == 0) $f = 0; if ($in_ng_flag == 0) $i = 0; if ($out_ng_flag == 0) $o = 0; if ($fail > 1) $f = $fail; if ($inng > 1) $i = $inng; if ($otng > 1) $o = $otng; if ($f > 0 || $i > 0 || $o > 0) { $ng = $ng_head.sprintf("%d%d%d_", $f, $i, $o); } else { $ng = ""; } return $ng; } function set_ok($fail, $inng, $otng) { global $ok_head; if ($ok_head == "") { return ""; } if ($fail == 0 && $inng == 0 && $otng == 0) { $ok = ""; } else { $ok = $ok_head.sprintf("%d%d%d_", $fail, $inng, $otng); } return $ok; } function fnam_edit($ex_type,$para) { global $fr_fmt; global $to_fmt; global $dt_fmt; global $nm_fmt; global $fname_max; global $replace_char_space; $ft = $para[0]; $tt = $para[1]; $duration = $para[2]; $channel = fn_edit($para[6]); $title = fn_edit($para[7]); $artist = fn_edit($para[8]); $kw = fn_edit($para[10]); $ft2 = date($fr_fmt, get_mktime($ft)); $tt2 = date($to_fmt, get_mktime($tt)); $dt2 = date($dt_fmt, get_mktime($ft)); $fromtime = fn_edit($ft2); $totime = fn_edit($tt2); $dttime = fn_edit($dt2); $p[0] = $fromtime; $p[1] = $totime; $p[2] = $duration; $p[3] = $channel; $p[4] = $title; $p[5] = $artist; $p[6] = $kw; $p[7] = $dttime; $p[8] = get_genre($ex_type); $p[9] = date("W", strtotime($ft)); $p[10]= get_short_title($ex_type,$title); $p[11]= fn_edit($para[18]); $nam = vsprintf($nm_fmt, $p); $nam = fn_cut($nam,$fname_max); return $nam; } function get_para($wdata, $ex_type) { global $radiko_base_img; global $radiko_base_img; global $convert_kana; global $convert_kana_para; $d = "00000000000000 00000000000000 0000 0 0 0 ch title artist img kw prg_no tn JPNO AREA album genre genrec musiclist"; if (!is_string($wdata)) { rf_error_log("get_para error"); $log = print_r($wdata, true); rf_error_log($log); return null; } $para = explode(" ", $wdata, 20); $cnt = count_73($para); if ($cnt < 12) { rf_error_log("get_para error $cnt $wdata"); return null; } if ($cnt >= 19) { return $para; } for ($i=$cnt; $i <19; $i++) { $para[$i] = ";"; } return $para; } function put_para($para, $ex_type) { global $radiko_base_img; global $radiko_base_img; $cnt = count_73($para); if ($cnt > 19) $cnt = 19; for ($i=0; $i<$cnt; $i++) { $p = (string)$para[$i]; if ($p == null) $p = ""; $p = str_replace(" ", "", $p); $p = str_replace("　", "", $p); $p = str_replace(array("\r\n", "\r", "\n"), '', $p); $p = rf_strip_tags($p); if ($p == "") { $p = ";"; } $para2[$i] = $p; } if ($cnt < 19) { for ($i=$cnt; $i <19; $i++) { $para2[$i] = ";"; } } $wdata = vsprintf("%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s ", $para2); return $wdata; } function get_fnam($para, $ex_type) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $tf_footer; $fromtime = $para[0]; $totime = $para[1]; $channel = $para[6]; $fr = get_mktime($fromtime); $to = get_mktime($totime); $fn = date("Ymd_His", $fr)."_".date("His", $to)."_".$channel; if ($ex_type == $ex_timefree) { $fn .= $tf_footer; } if ($ex_type == $ex_radiru_vod) { $fn .= $tf_footer; } return $fn; } function fmt_pgm($para, $i, $n1, $n2) { $fromtime = $para[0]; $totime = $para[1]; $duration = $para[2]; $channel = $para[6]; $title = $para[7]; $artist = $para[8]; $fr = get_mktime($fromtime); $to = get_mktime($totime); $dat[0] = date("y/m/d", $fr); $dat[1] = date("H:i", $fr); $dat[2] = date("H:i", $to); $dat[3] = sprintf("%5d", $duration); $dat[4] = sprintf("%-12s", $channel); $dat[5] = $title; $dat[6] = $artist; return $dat; } function get_recdir($ex_type) { global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $usrdir; global $tmpdir; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $radiru_gogaku_recdir; $recdir = $tmpdir; switch ($ex_type) { case $ex_radiko: case 3: $recdir = $radiko_recdir; break; case $ex_radiru: case 4: case 6: $recdir = $radiru_recdir; break; case $ex_timefree: $recdir = $timefree_recdir; break; } return $recdir; } function f_space($dir) { if (($tdir = realpath($dir)) === false) { return -1; } $free_space = disk_free_space($tdir)/1024/1024; $free_space = floor($free_space); return $free_space; } function clear_log_hour($n, $dir, $pat, $mode,$pr,$dtopt) { if ($n <= 0) { return "0/0"; } $expire = strtotime("$n hours ago"); if ($pr == 1) echo " expire before : ".date("Y/m/d H:i:s",$expire)."\n"; if ($mode == 1) { $dirlst = glob($dir.$pat, GLOB_BRACE); } else { $dirlst = glob($dir.$pat); } $fcnt = count_73($dirlst); $cnt = 0; foreach ($dirlst as $file) { if (is_file($file) === false) { continue; } if ($dtopt == 0) { $timto = filemtime($file); } else { $pname = explode("_",basename($file),4); if (count_73($pname) != 4) { continue; } $pdate = $pname[0].$pname[1]; $timfr = strtotime($pdate); $pdate = $pname[0].$pname[2]; $timto = strtotime($pdate); if ($timto < $timfr) $timto += 24 * 3600; } if ($timto < $expire) { ; fin_unlink($file); if ($pr == 1) echo "deleted $file \n"; $cnt++; } } return "$cnt / $fcnt"; } function clear_log($n, $dir, $pat, $mode,$pr,$dtopt) { if ($n <= 0) { return "0/0"; } $expire = strtotime("$n days ago"); if ($pr == 1) echo " expire before : ".date("Y/m/d H:i:s",$expire)."\n"; if ($mode == 1) { $dirlst = glob($dir.$pat, GLOB_BRACE); } else { $dirlst = glob($dir.$pat); } $fcnt = count_73($dirlst); $cnt = 0; foreach ($dirlst as $file) { if (is_file($file) === false) { continue; } if ($dtopt == 0) { $timto = filemtime($file); } else { $pname = explode("_",basename($file),4); if (count_73($pname) != 4) { continue; } $pdate = $pname[0].$pname[1]; $timfr = strtotime($pdate); $pdate = $pname[0].$pname[2]; $timto = strtotime($pdate); if ($timto < $timfr) $timto += 24 * 3600; } if ($timto < $expire) { ; fin_unlink($file); if ($pr == 1) echo "deleted $file \n"; $cnt++; } } return "$cnt / $fcnt"; } function clear_tmp($n, $dir, $pat, $mode,$pr,$dtopt) { if ($n <= 0) { return "0/0"; } $expire = strtotime("$n hours ago"); if ($pr == 1) echo " expire before : ".date("Y/m/d H:i:s",$expire)."\n"; if ($mode == 1) { $dirlst = glob($dir.$pat, GLOB_BRACE); } else { $dirlst = glob($dir.$pat); } $fcnt = count_73($dirlst); $cnt = 0; foreach ($dirlst as $file) { if (is_file($file) === false) { continue; } if ($dtopt == 0) { $tim = filemtime($file); } else { $pname = explode("_",basename($file),4); if (count_73($pname) != 4) { continue; } $pdate = $pname[0].$pname[2]; $tim = strtotime($pdate); } if ($tim < $expire) { ; fin_unlink($file); if ($pr == 1) echo "deleted $file \n"; $cnt++; } } return "$cnt / $fcnt"; } function fin_unlink($src) { if (file_exists($src)) { $ret = @unlink($src); return $ret; } return true; } function fin_unlink_all($dir) { if (!is_dir("$dir")) return 0; $files = array_diff(scandir($dir), array('.','..')); $n = count_73($files); foreach ($files as $file) { unlink("$dir/$file"); } @rmdir($dir); return $n; } function fin_wait_fn($fn) { global $fin_sleep; for ($i = 0; $i < 30; $i++) { if (!file_exists($fn)) { break; } sleep($fin_sleep); } } function fin_wait_unlink($fn) { global $fin_sleep; for ($i = 0; $i < 20; $i++) { unlink($fn); if (!file_exists($fn)) { break; } sleep($fin_sleep); } if ($i > 10) { $testfn = "$fn.$i"; rf_touch($testfn); } } function fin_rename($src, $dst) { if (file_exists($dst)) { fin_unlink($dst); } if (file_exists($src)) { rf_copy($src, $dst); @unlink($src); } } function fin_touch($src) { if (!file_exists($src)) { rf_touch($src); } } function read_stdin() { global $scrdir; global $ui_mode; if ($ui_mode == 0) { $ans = read_stdin_k(); $ans = mb_convert_kana($ans,'as','utf-8'); return $ans; } if ($ui_mode == 2) { ht_yesno("yesnomsg"); $ans = ""; $rfsubtitle = array(); $rfmenu = array(); return $ans; } } function get_metadata($meta, $fil) { if (!file_exists($fil)) return false; $cmd = "ffprobe -loglevel error -show_entries format_tags=$meta -of default=noprint_wrappers=1:nokey=1 $fil"; $result = external_exec_program($cmd); if (!is_array($result)) return false; if ($result == array()) return false; $ret = $result[0]; if ($ret == "") return false; return $ret; } function get_artwork($fil,$img) { if (!file_exists($fil)) return false; $ret = external_program_null("ffmpeg -i $fil $img");; if ($ret != 0) return false; return true; } function get_mediainfo($media, $info, $exmode) { $media2 = "$media.$exmode"; $ex = "ffprobe -loglevel error -show_streams -print_format $exmode \"$media\" > \"$media2\""; $ret = external_program($ex); if ($ret != 0) { echo_msg(2, "$ex"); echo_msg(2, "ffprobe error"); fin_unlink($media2); return null; } $media_data = file_get_contents($media2, true); fin_unlink($media2); if ($exmode == "json") { $json_data = json_decode($media_data, true); if ($json_data != null) { $ans = (int)$json_data["streams"][0]["$info"]; } else { $ans = null; } } else { ; $xml_data = simplexml_load_string($media_data); if ($xml_data !== false) { $ans = (int)$xml_data->streams->stream->attributes()->$info; } else { $ans = null; } } return $ans; } function disp_mediainfo($m_level, $media, $rmedia) { global $msg_level; $ex = "ffprobe -hide_banner \"$media\" 2>&1"; if ($m_level >= $msg_level) { external_program($ex); $out = rfgw_get_atom($media); if ($out !== false) { echo_prn(1,""); foreach($out as $str) { echo_prn(1,$str); } } else { echo_prn(1,"atom get error"); } } return; } function date_calc($d) { $nlen = 23; if (strlen($d) < $nlen) { $dt[0] = 1; return $dt; } $t = explode("_", $d); if (count_73($t) < 4) { $dt[0] = 1; return $dt; } $dt[1] = $t[0].$t[1]; $dt[2] = $t[0].$t[2]; $st11 = strtotime($dt[1]); $st12 = date("YmdHis", $st11); $st21 = strtotime($dt[2]); $st22 = date("YmdHis", $st21); if ($st11 >= $st21) { $dt[0] = 2; return $dt; } if ($dt[1] == $st12 && $dt[2] == $st22) { $dt[0] = 0; return $dt; } else { $dt[0] = 3; return $dt; } } function del_date_dat($d, $pmt) { $nw = time(); $dr = dir($d); echo_msg(2, $dr->path); $cnt = 0; while (($value = $dr->read()) !== false) { if ($value == ".") { continue; } if ($value == "..") { continue; } $ud = filemtime($d.$value); if ($nw < $ud + $pmt) { continue; } fin_unlink($d.$value); echo_msg(2, "$d.$value is expired (deleted)"); $cnt++; } $dr->close(); return $cnt; } function sec2hms($sec) { $t = $sec; $h = floor($t/3600); $t = $t - $h * 3600; $m = floor($t/60); $s = $t - $m * 60; $hms = sprintf("%02d:%02d:%02d", $h, $m, $s); return $hms; } function make_fn($head) { usleep(1000); $mt = microtime(true); $t = floor($mt); $m = $mt - $t; $m2 = floor($m * 1000); $dt =date("YmdHis", $t); $r = rand(0, 9999); $fn = sprintf("%s_%s%03d%04d", $head, $dt, $m2, $r); return $fn; } function make_fn_daily($head) { usleep(1000); $mt = microtime(true); $t = floor($mt); $m = $mt - $t; $m2 = floor($m * 1000); $ymd = date("Ymd", $t); $his = date("His", $t); $r = rand(0, 9999); $fn = sprintf("%s_%s_%s_%03d%04d", $ymd, $his, $head, $m2, $r); return $fn; } function now_time() { $nw=date("Y/m/d H:i:s"); return $nw; } 