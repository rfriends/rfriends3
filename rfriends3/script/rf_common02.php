<?php
 function rf_calc_width() { global $scr_width; global $scr_height; $w = (int)$scr_width - 4; return $w; } function rf_calc_height() { global $scr_width; global $scr_height; $n = (int)$scr_height - 5; $n = (int)($n/5); if ($n < 1) { $n = 1; } $n = $n * 5; return $n; } function rf_pctl_get_flist($dir, $typ) { $pat = $dir.$typ; if ($pat == "") { return array(); } $str = glob($pat); if ($str === false) { return array(); } $sort_time = function ($a, $b) { return filemtime($b) - filemtime($a); }; usort($str, $sort_time); $l = strlen($dir); $flist = array(); foreach ($str as $f) { $f2 = substr($f, $l); if (is_dir($f)) { $f2 = "[".$f2."]"; } $flist[] = array('title' => $f2, 'val' => $f2); } return $flist; } function rf_pctl_calc($p, $fn, $psiz) { $pmax = intval(($fn + $psiz - 1) / $psiz); $pn = $p; if ($pn > $pmax) { $pn = 1; } if ($pn < 1) { $pn = $pmax; } $ps = ($pn - 1) * $psiz + 1; $pe = $ps + $psiz - 1; if ($pe > $fn) { $pe = $fn; } $r[0] = $pn; $r[1] = $ps; $r[2] = $pe; $r[3] = $pmax; $r[4] = $fn; $r[5] = $psiz; return $r; } function rf_pctl_lists($dir, $typ) { $flist = rf_pctl_get_flist($dir, $typ); $nmax = count_73($flist); if ($nmax < 1) { echo_msg(2, "ファイルがありません。: $dir"); echo_msg(2, ""); rf_pause(); return array(); } return $flist; } function rf_pctl_disp($flist, $opt) { global $edit_fnam; global $tmpdir; global $ui_mode; global $ht_jump_selid; $ttl = $opt["title" ]; $ityp = $opt["input_type"]; $pctl = $opt["page_control"]; $rmes = $opt["return_mes" ]; $mes = $opt["input_mes"]; $mode = $opt["mode"]; $multi = $opt["multi"]; $confirm = $opt["confirm"]; if ($ui_mode == 2) { $ans = ht_ask_list($flist,$opt); $no[0] = "r"; return $no; } else if ($ui_mode == 1) { $no = rf_pctl_disp_wt($flist, $opt,$mode); return $no; } $lw = rf_calc_width(); $ps = rf_calc_height(); $psiz = $ps; $nmax = count_73($flist); if ($nmax == 0) { $no[0] = "z"; return $no; } $fnn = strlen($nmax); $fmt = "%".$fnn."d "; $lw2 = $lw - $fnn - 1; $p = 1; while (1==1) { $r = rf_pctl_calc($p, $nmax, $psiz); $p = $r[0]; $s = $r[1]; $e = $r[2]; $pmax = $r[3]; $fn2 = $r[4]; $psiz2 = $r[5]; echo_scr(2, "$ttl [$nmax] ($p/$pmax)"); echo_scr(2, str_repeat("-", $lw)); if ($ui_mode == 2) msgx('<table>'); for ($i=$s; $i<=$e; $i++) { $n = sprintf($fmt, $i); if ($mode == 0) { $f = $flist[$i - 1]; } else { $f = $flist[$i - 1]['title']; } $f = rf_strimwidth($f, 0, $lw2); echo_scr(2, $n.$f); } if ($ui_mode == 2) msgx('</table>'); echo_scr(2, str_repeat("-", $lw)); $no = rf_input($ityp, $pctl, $rmes, $nmax, $pmax, $mes); echo_scr(2, ""); $ans = $no[0]; if ($pmax > 1) { if ($ans == "n") { $p++; continue; } if ($ans == "p") { $p--; continue; } if ($ans == "t") { $p = 1; continue; } if ($ans == "b") { $p = $pmax; continue; } } if ($ans == "r") { break; } if ($ans == "e") { continue; } break; } return $no; } function rf_pctl_disp_wt($flist, $opt,$mode) { global $edit_fnam; global $tmpdir; global $ui_mode; global $wt_ymax; global $wt_xmax; global $wt_xadd; $ttl = $opt["title" ]; $ityp = $opt["input_type"]; $pctl = $opt["page_control"]; $rmes = $opt["return_mes" ]; $mes = $opt["input_mes"]; $nmax = count_73($flist); if ($nmax == 0) { $no[0] = "z"; return $no; } if ($nmax == 1) { $no[0] = 1; return $no; } $fnn = strlen($nmax); $fmt = "%".$fnn."d "; $lw2 = $wt_xmax - $fnn - 1 - $wt_xadd; for ($i=1; $i<=$nmax; $i++) { $n = sprintf($fmt, $i); if ($mode == 0) { $f = $flist[$i - 1]; } else { $f = $flist[$i - 1]['title']; } $f = rf_strimwidth($f, 0, $lw2); echo_menu(2, " $n. $f",1); } echo_menu_ret_wt(); $ans = echo_ask(2,$mes); if ($ans == "" || $ans == "R" || $ans == "r") { $ans = "r"; } $no[0] = $ans; return $no; } function rf_pctl_disp_wt2($flist, $opt,$mode) { global $edit_fnam; global $tmpdir; global $ui_mode; global $wt_ymax; global $wt_xmax; global $wt_xadd; $ttl = $opt["title" ]; $ityp = $opt["input_type"]; $pctl = $opt["page_control"]; $rmes = $opt["return_mes" ]; $mes = $opt["input_mes"]; $nmax = count_73($flist); if ($nmax == 0) { $no[0] = "z"; return $no; } if ($nmax == 1) { $no[0] = 1; return $no; } $fnn = strlen($nmax); $fmt = "%".$fnn."d "; $lw2 = $wt_xmax - $fnn - 1 - $wt_xadd; msgx('<select name="flist" size=15>'.PHP_EOL); for ($i=1; $i<=$nmax; $i++) { $n = sprintf($fmt, $i); if ($mode == 0) { $f = $flist[$i - 1]; } else { $f = $flist[$i - 1]['title']; } $f = rf_strimwidth($f, 0, $lw2); msgx('<option value="$n">'."$f".'</option>'.PHP_EOL); } msgx('</select>'.PHP_EOL); $ans = echo_ask(2,$mes); if ($ans == "" || $ans == "R" || $ans == "r") { $ans = "r"; } $ans ="r"; $no[0] = $ans; return $no; } function rf_extract($ef_b,$dstdir,$pn) { $zip = new ZipArchive; if ($zip->open($ef_b) === false) { rf_error_log("open error : $ef_b"); return false; } if ($pn != "") { if ($zip->setPassword("$pn") === false) { $zip->close(); rf_error_log("pn error : '$pn'"); return false; } } if ($zip->extractTo($dstdir) === false) { $zip->close(); rf_error_log("file : $ef_b"); rf_error_log("pn : '$pn'"); rf_error_log("extract error : $dstdir"); return false; } for($i=0; $i<$zip->numFiles; $i++){ rf_touch_tm($dstdir . $zip->statIndex($i)['name'], $zip->statIndex($i)['mtime']); } $zip->close(); return true; } function rf_zip($src,$dir_s,$zipfl) { $files = array_filter($src, 'is_file'); if ($files === false) return false; if (count_73($files) <= 0) return false; $zip = new ZipArchive(); $ret = $zip->open("$zipfl", ZipArchive::CREATE); if($ret === false) return false; $ret = $zip->addEmptyDir("$dir_s"); echo_msg(2,"dir : $dir_s"); if($ret === false) { $zip->close(); fin_unlink("$zipfl"); return false; } foreach($files as $file) { $base_file = $dir_s."/".basename($file); $ret = $zip->addFile($file,$base_file); echo_msg(2,"file : $base_file"); if($ret === false) { $zip->close(); fin_unlink("$zipfl"); return false; } } $zip->close(); return true; } function rf_ext_set() { global $ext_const0; global $ext_const1; global $ext_const2; global $product_name; global $prog_ext_mode; global $prog_ext_type; $ext_const0 = $prog_ext_mode.$ext_const1.$prog_ext_type.$product_name; return; } function get_at_que_no($at_que_no) { $at = strtolower($at_que_no); if ((strlen($at) != 1) || !preg_match('/^[c-y]/', $at)) { $at = "c"; } $ret[1] = $at; $ret[0] = ++$at; return $ret; } function check_cleanlog($fn) { global $cleanlog_time; global $standby_time; if (!file_exists($fn)) { rf_touch($fn); return(0); } $ft = @filemtime($fn); if ($ft === false) { rf_touch($fn); return(0); } $diff = time() - $ft; if ($diff < 0) { rf_touch($fn); return(0); } if ($diff < $cleanlog_time) { return(0); } $nw = time(); $mn = date("i",$nw) + 0; $fr = 60 - $standby_time - 3; $to = $fr + 5; if ($mn > $fr && $mn < $to) { $path = __FILE__; $bn = basename($path); return(0); } rf_touch($fn); rf_error_log("start cleanlog"); return(1); } function rf_check_num($n) { $units = array( ["TB",1024 * 1024 * 1024 * 1024], ["GB",1024 * 1024 * 1024], ["MB",1024 * 1024], ["KB",1024], ["B" ,1] ); $n1 = trim($n); $n2 = ""; $nx = strtoupper($n1); $z0 = ""; $z1 = 1; foreach ($units as $m) { if (($i = strpos($nx, $m[0])) !== false) { $z0 = $m[0]; $z1 = $m[1]; if ($i > 0) { $n1 = substr($nx, 0, $i); } else { $n1 = ""; } $n2 = substr($nx, $i); break; } } $n1 = trim($n1); $n2 = trim($n2); $nm[1] = $n1; $nm[2] = $n2; $nm[3] = 0; $nm[4] = 1; if (!is_numeric($n1)) { $nm[0] = 1; return $nm; } if ($n1 < 0) { $nm[0] = 2; return $nm; } if ($n2 != $z0) { $nm[0] = 3; return $nm; } $nm[0] = 0; $nm[3] = $n1; $nm[4] = $z1; return $nm; } function num_msg($num) { echo_msg(2, "@$num[0]@ @$num[1]@ @$num[2]@ @$num[3]@ @$num[4]@"); } function rf_control_use_mb($usedisk) { $mb = 1024 * 1024; $usemb = array(); $usemb[1] = round($usedisk["radiko"][0]/$mb, 0); $usemb[2] = round($usedisk["radiru"][0]/$mb, 0); $usemb[3] = round($usedisk["timefree"][0]/$mb, 0); $usemb[4] = round($usedisk["radiru_vod"][0]/$mb, 0); $usemb[5] = round($usedisk["radiru_gogaku"][0]/$mb, 0); $usemb[0] = $usemb[1] + $usemb[2] + $usemb[3] + $usemb[4] + $usemb[5]; return($usemb); } function rf_control_usedisk($udir) { global $usrdir; global $dir_log; global $dir_radiko; global $dir_radiru; global $dir_timefree; global $dir_radiru_vod; global $dir_radiru_gogaku; global $dir_kw; global $dir_backup; $usedisk = array(); $usedisk["radiko"] = rf_dirsize_h($udir."$dir_radiko"); $usedisk["radiru"] = rf_dirsize_h($udir."$dir_radiru"); $usedisk["timefree"] = rf_dirsize_h($udir."$dir_timefree"); $usedisk["radiru_vod"] = rf_dirsize_h($udir."$dir_radiru_vod"); $usedisk["radiru_gogaku"] = rf_dirsize_h($udir."$dir_radiru_gogaku"); $total[0] = $usedisk["radiko"][0] + $usedisk["radiru"][0] + $usedisk["timefree"][0] + $usedisk["radiru_vod"][0] + $usedisk["radiru_gogaku"][0]; $total[1] = $usedisk["radiko"][1] + $usedisk["radiru"][1] + $usedisk["timefree"][1] + $usedisk["radiru_vod"][1] + $usedisk["radiru_gogaku"][1]; $usedisk["total"] = $total; return($usedisk); } function rf_control_usedisp($usedisk) { $usemb = rf_control_use_mb($usedisk); $radiko_s = number_format($usemb[1]); $radiru_s = number_format($usemb[2]); $timefree_s = number_format($usemb[3]); $radiru_vod_s = number_format($usemb[4]); $radiru_gogaku_s = number_format($usemb[5]); $total_s = number_format($usemb[0]); $radiko_c = number_format($usedisk["radiko"][1]); $radiru_c = number_format($usedisk["radiru"][1]); $timefree_c = number_format($usedisk["timefree"][1]); $radiru_vod_c = number_format($usedisk["radiru_vod"][1]); $radiru_gogaku_c = number_format($usedisk["radiru_gogaku"][1]); $total_c = number_format($usedisk["total"][1]); $fmt = "%-8s:%15s MB%8s"; echo_msg(2, sprintf($fmt, "radiko", $radiko_s, $radiko_c)); echo_msg(2, sprintf($fmt, "radiru", $radiru_s, $radiru_c)); echo_msg(2, sprintf($fmt, "timefree", $timefree_s, $timefree_c)); echo_msg(2, sprintf($fmt, "r_vod", $radiru_vod_s, $radiru_vod_c)); echo_msg(2, sprintf($fmt, "r_gogaku", $radiru_gogaku_s, $radiru_gogaku_c)); echo_msg(2, ""); echo_msg(2, sprintf($fmt, "total", $total_s, $total_c)); } function rf_get_file_name($sdir, $ct) { $fl = array(); if ($handle = opendir($sdir)) { while (($rfl = readdir($handle)) !== false) { if ($rfl == '.' || $rfl == '..' || is_dir($sdir.$rfl)) { continue; } $up = filemtime($sdir.$rfl); $fl[$sdir.$rfl] = $up; } } asort($fl); $fl2 = array(); $i = 0; foreach ($fl as $key => $val) { $fl2[$key] = $val; $i++; if ($i >= $ct) { break; } } unset($fl); return $fl2; } function rf_storage_control_dir($ct) { global $usrdir; global $DS; global $dir_log; global $dir_radiko; global $dir_radiru; global $dir_timefree; global $dir_radiru_vod; global $dir_radiru_gogaku; global $dir_kw; global $dir_backup; $radiko = rf_get_file_name($usrdir."$dir_radiko".$DS, $ct); $radiru = rf_get_file_name($usrdir."$dir_radiru".$DS, $ct); $timefree = rf_get_file_name($usrdir."$dir_timefree".$DS, $ct); $radiru_vod = rf_get_file_name($usrdir."$dir_radiru_vod".$DS, $ct); $radiru_gogaku = rf_get_file_name($usrdir."$dir_radiru_gogaku".$DS, $ct); $total = array_merge($radiko, $radiru, $timefree, $radiru_vod, $radiru_gogaku); asort($total); return($total); } function rfmenu_adjust_unit($n, $m) { $un = "B"; $adj = $n; if ($adj >= 1024) { $un = "KB"; $adj = $adj / 1024; } else { return round($adj, $m)." $un"; } if ($adj >= 1024) { $un = "MB"; $adj = $adj / 1024; } else { return round($adj, $m)." $un"; } if ($adj >= 1024) { $un = "GB"; $adj = $adj / 1024; } else { return round($adj, $m)." $un"; } if ($adj >= 1024) { $un = "TB"; $adj = $adj / 1024; } else { return round($adj, $m)." $un"; } return round($adj, $m)." $un"; } function rfmenu_info_use_dir($name,$udir,$dir) { global $DS; $cdir = $udir.$dir; if (!is_dir($cdir)) return array($name,0,0,0,0,null); $flist = rf_file_list($cdir); $cnt = count_73($flist); $siz = rf_file_list_size($flist); $siz_s = rfmenu_adjust_unit($siz, 1); $siz_c = number_format($cnt); $flist2 = rf_file_list_sort($flist); $flist3 = null; if ($cnt > 0) { $flist3 = $flist2[0]; } unset($flist); unset($flist2); $ret = array($name,$siz,$cnt,$siz_s,$siz_c,$flist3); return $ret; } function rfmenu_info_use_s_prn($mes,$ty) { switch($ty){ case 1: foreach($mes as $m) { echo_prn(1,$m); } break; case 2: foreach($mes as $m) { echo_msg(2,$m); } break; default: break; } } function rfmenu_info_use_s($udir,$ty) { global $usrdir; global $DS; global $dir_log; global $dir_radiko; global $dir_radiru; global $dir_timefree; global $dir_radiru_vod; global $dir_radiru_gogaku; global $dir_kw; global $dir_backup; global $ui_mode; $fmt0 = "%-9s:%s(%7s日)"; $fmt1 = "%-9s:%10s%8s"; $fmt2 = "%-9s:%10s/day"; $fmt3 = "%-9s:%10s(%7s日)"; $fmt4 = "%-9s:(%7s日)"; $fmt5 = "%-9s:%10s"; $fmt6 = "%-9s:%10s%8s(%10s/日)"; $free_space = disk_free_space($udir); $fs = rfmenu_adjust_unit($free_space, 1); $flist = array(); $flist[] = rfmenu_info_use_dir("radiko", $udir,"$dir_radiko"); $flist[] = rfmenu_info_use_dir("radiru", $udir,"$dir_radiru"); $flist[] = rfmenu_info_use_dir("timefree",$udir,"$dir_timefree"); $flist[] = rfmenu_info_use_dir("r_vod", $udir,"$dir_radiru_vod"); $flist[] = rfmenu_info_use_dir("r_gogaku",$udir,"$dir_radiru_gogaku"); $flist[] = rfmenu_info_use_dir("podcast", $udir,"podcast"); $siz_total = 0; $cnt_total = 0; $flist3 = array(); foreach($flist as $list) { $siz_total += $list[1]; $cnt_total += $list[2]; if ($list[5] != null) $flist3[] = $list[5]; } if ($cnt_total <= 0) { echo_msg(2, sprintf($fmt5, "total", "0")); echo_msg(2, sprintf($fmt5, "free", $fs)); return; } $total_s = rfmenu_adjust_unit($siz_total, 1); $total_c = number_format($cnt_total); $flist3 = rf_file_list_sort($flist3); $oldkey = filemtime($flist3[0]); $nw = time(); if ($oldkey == 0) { $oldkey = $nw; } $oldkey_date = date("Y/m/d H:i:s", $oldkey); $nw_date = date("Y/m/d H:i:s", $nw); $diff = ($nw - $oldkey) /(3600 * 24); $diff_day = round($diff, 1); $diff_day_fmt = sprintf("%.1f", $diff_day); if ($diff_day == 0) { $day_use = 0; $rd = "*****.*"; } else { $day_use = $siz_total/$diff_day; if ($day_use >= 1) { $remain_day = $free_space / $day_use; $rd = number_format($remain_day, 1); } else { $rd = "*****.*"; } } $day_use_c = rfmenu_adjust_unit($day_use, 1); $mes = array(); $mes[] = sprintf($fmt0, "from", " $oldkey_date", $diff_day_fmt); $mes[] = ""; rfmenu_info_use_s_prn($mes,$ty); $mes = array(); if ($ui_mode == 2 && $ty ==2) { msgx('<table>'.PHP_EOL); foreach($flist as $f) { msgx('<tr><td> '.$f[0].'</td> <td align=right>&nbsp; '.$f[3].'</td> <td align=right width=50> '.$f[4].'</td></tr>'.PHP_EOL); } msgx('</table>'.PHP_EOL); } else { foreach($flist as $f) { $mes[] = sprintf($fmt1,$f[0],$f[3],$f[4]); } rfmenu_info_use_s_prn($mes,$ty); } $mes = array(); $mes[] = ""; $mes[] = sprintf($fmt6, "total", $total_s, $total_c, $day_use_c); $mes[] = sprintf($fmt3, "free", $fs, $rd); rfmenu_info_use_s_prn($mes,$ty); return; } function rf_storage_control_stat($oldkey, $ttl) { $nw = time(); if ($oldkey == 0) { $oldkey = $nw; } $oldkey_date = date("Y/m/d H:i:s", $oldkey); $nw_date = date("Y/m/d H:i:s", $nw); $diff = ($nw - $oldkey) /(3600 * 24); $diff_day = round($diff, 1); $diff_day_fmt = sprintf("%.1f", $diff_day); $fmt = "%-8s:%s"; echo_msg(2, sprintf($fmt, "from", " $oldkey_date")); echo_msg(2, sprintf($fmt, "to", " $nw_date")); echo_msg(2, sprintf($fmt, "period", " $diff_day_fmt day(s)")); return($diff_day); } function rf_storage_control_exec($typ) { global $storage_control_exec; global $storage_control_disk; global $storage_control_count; global $storage_control_exec_tr; global $storage_control_disk_tr; global $storage_control_count_tr; global $usrdir; global $rftrans; global $rftrans_dir; global $DS; $dir = $usrdir; $control_exec = $storage_control_exec; $control_disk = $storage_control_disk; $control_count = $storage_control_count; if ($typ == "trans") { if ($rftrans != 2) { return false; } $dir = $rftrans_dir; $control_exec = $storage_control_exec_tr; $control_disk = $storage_control_disk_tr; $control_count = $storage_control_count_tr; } echo_prn(1, "使用領域制御（type: $typ  exec: $control_exec  disk: $control_disk  count: $control_count)"); switch ($control_exec) { case "start": break; case "test": break; case "stop": return false; break; default: echo_prn(1, "parameter error"); return false; break; } $num = rf_check_num($control_disk); if ($num[0] == 0) { $dsk = floor($num[3] * ($num[4]/1024/1024)); if ($dsk < 100) { echo_prn(1, "$control_disk < 100MB"); return false; } } else { echo_prn(1, "parameter error $control_disk"); return false; } if (!file_exists($dir)) { echo_prn(1, "not found $dir"); return false; } $free_space = (int)(disk_free_space($dir)/1024/1024); $sum = rf_file_sum($dir); $ttl = (int)($sum/1024/1024); echo_prn(1, "ディレクトリ : $dir"); echo_prn(1, "ディスク残量 : $free_space MB"); echo_prn(1, "使用量　　　 : $ttl MB"); echo_prn(1, "保存容量設定 : $dsk MB"); $capa = $ttl + $free_space - 100; if ($capa < $dsk) { echo_prn(1, ""); echo_prn(1, "保存容量設定が大きすぎます。"); echo_prn(1, "保存容量設定は、$dsk MB未満に設定してください。"); } echo_prn(1, ""); $dl = $ttl - $dsk; if ($dl < 0) { echo_prn(1, "使用量（ $ttl MB ）は保存容量設定（ $dsk MB ）を超えていません。"); return false; } echo_prn(1, "使用量（ $ttl MB ）が保存容量（ $dsk MB ）を超えています。"); echo_prn(1, "使用量を$dsk MB以下にするために"); echo_prn(1, "更新日付の古いファイルから 約$dl MB または $control_count 個削除します。"); echo_prn(1, ""); $flist = rf_file_delete_candidate($dir, $control_count); $siz = 0; foreach ($flist as $fil) { if ($siz >= $dl) { break; } $s = (int)(filesize($fil)/1024/1024); $siz += $s; echo_prn(1, "deleted $fil"); if ($control_exec == "start") { fin_unlink($fil); $pdir = dirname($fil); @rmdir($pdir); } } echo_prn(1, ""); if ($control_exec == "start") { if ($siz == 0) { return false; } echo_prn(1, "合計 $siz MB 削除しました。"); return true; } else { if ($siz == 0) { return false; } echo_prn(1, "合計 $siz MB ===== testモードなので実際には削除していません。====="); return false; } return true; } 