<?php
 use PHPMailer\PHPMailer\PHPMailer; use PHPMailer\PHPMailer\Exception; function free_mail($subj,$mes) { require_once 'PHPMailer/src/Exception.php'; require_once 'PHPMailer/src/PHPMailer.php'; require_once 'PHPMailer/src/SMTP.php'; global $usrdir; global $send_mail_mode; global $send_mail_remain; global $storage_control_exec; global $send_mail_host; global $send_mail_port; global $send_mail_user; global $send_mail_pass; global $send_mail_from; global $send_mail_from_nm; global $send_mail_to; global $send_mail_to_nm; global $send_mail_line_mode; global $send_mail_line_token; $dbg = 0; $mail = new PHPMailer(); $mail->CharSet = 'UTF-8'; $mail->Encoding = 'base64'; $mail->IsSMTP(); if ($dbg == 1) { $mail->SMTPDebug = 1; } $mail->IsHTML(false); $d = date("m/d H:i", time()); $mail->Subject = $subj; $mail->Body = $mes; $mail->SetFrom($send_mail_from, $send_mail_from_nm); $mail->AddAddress($send_mail_to, $send_mail_to_nm); $mail->AddReplyTo($send_mail_from, $send_mail_from_nm); $mail->Sender = $send_mail_from; $mail->Host = $send_mail_host; $mail->Port = $send_mail_port; if ($send_mail_port == 465) { $mail->SMTPSecure = "ssl"; } if ($send_mail_port == 867) { $mail->SMTPSecure = "tls"; } if ($send_mail_user !== "") { $mail->SMTPAuth = true; $mail->Username = $send_mail_user; $mail->Password = $send_mail_pass; } if ($mail->Send()) { } else { } } function fin_notify_s($dbg, $body) { global $send_mail_line_mode; $smode = $send_mail_line_mode; if ($smode == 0) { return; } rfgw_line_notify($dbg,$body); } function fin_notify($cnd, $dbg, $ex_type, $fnm, $log2, $err2) { global $usrdir; global $send_mail_line_mode; global $send_mail_line_token; global $send_mail_remain; $smode = $send_mail_line_mode; if ($cnd == -2) { $smode = 3; } if ($smode == 0) { return; } $fs_max = (int)$send_mail_remain; if ($fs_max < 0) { $fs_max = 0; } if ($fs_max > 100000) { $fs_max = 100000; } $free_space = f_space($usrdir); if ($free_space < $fs_max) { $smode = 3; } switch ($smode) { case 1: if ($cnd != -1) { return; } break; case 2: if ($cnd == 0) { return; } break; case 3: break; default: return; } $cnd_mes = "------ $cnd"; $fnm_mes = ""; if ($cnd == -2) { $cnd_mes = "テストメッセージ Test message"; } if ($cnd == -1) { $cnd_mes = "失敗 Failure"; $fnm_mes = $fnm; } if ($cnd == 0) { $cnd_mes = "成功 Success"; $fnm_mes = $fnm; } if ($cnd == 1) { $cnd_mes = "executed  Clean"; } if ($cnd == 2) { $cnd_mes = "Reserved Radiko Program"; } if ($cnd == 3) { $cnd_mes = "Reserved Radiru Program"; } if ($cnd == 4) { $cnd_mes = "executed Timefree"; } if ($cnd == 5) { $cnd_mes = "executed TimefreeKw"; } if ($cnd == 6) { $cnd_mes = "executed RadiruVod_old"; } if ($cnd == 7) { $cnd_mes = "executed RadiruGogaku"; } if ($cnd == 8) { $cnd_mes = "executed RadiruVodGogaku"; } if ($cnd == 9) { $cnd_mes = "executed RadiruVod"; } if ($cnd == 10) { $cnd_mes = "executed RadiruGogaku"; } if ($cnd == 11) { $cnd_mes = "executed Delivery"; } if ($cnd == 12) { $cnd_mes = "executed Podcast"; } if ($cnd == 13) { $cnd_mes = "executed Log"; } if ($cnd == 14) { $cnd_mes = "executed Live"; } if ($free_space >= $fs_max) { $remain_mes = ""; } else { $remain_mes = "空き容量 ".$free_space."MB < ".$fs_max."MB"; } $mes = $cnd_mes."\r\n".$fnm_mes."\r\n".$remain_mes; fin_notify_s($dbg, $mes); } function fin_mail_s($dbg,$subj,$body,$attach,$attach2) { require_once 'PHPMailer/src/Exception.php'; require_once 'PHPMailer/src/PHPMailer.php'; require_once 'PHPMailer/src/SMTP.php'; global $ui_mode; global $send_mail_mode; global $send_mail_host; global $send_mail_port; global $send_mail_user; global $send_mail_pass; global $send_mail_from; global $send_mail_from_nm; global $send_mail_to; global $send_mail_to_nm; $smode = $send_mail_mode; if ($smode == 0) { return; } $mail = new PHPMailer(); $mail->CharSet = 'UTF-8'; $mail->Encoding = 'base64'; $mail->IsSMTP(); if ($dbg == 1) { $mail->SMTPDebug = 1; } $mail->IsHTML(false); $mail->Subject = $subj; $mail->Body = $body; if (($attach != "") && file_exists($attach)) { $mail->addAttachment($attach); } if (($attach2 != "") && file_exists($attach2)) { $mail->addAttachment($attach2); } $mail->SetFrom($send_mail_from, $send_mail_from_nm); $mail->AddAddress($send_mail_to, $send_mail_to_nm); $mail->AddReplyTo($send_mail_from, $send_mail_from_nm); $mail->Sender = $send_mail_from; $mail->Host = $send_mail_host; $mail->Port = $send_mail_port; if ($send_mail_port == 465) { $mail->SMTPSecure = "ssl"; } if ($send_mail_port == 867) { $mail->SMTPSecure = "tls"; } if ($send_mail_user !== "") { $mail->SMTPAuth = true; $mail->Username = $send_mail_user; $mail->Password = $send_mail_pass; } if ($ui_mode == 2) { $mail->Debugoutput = 'html'; } if ($mail->Send()) { return true; } else { return $mail->ErrorInfo; } } function fin_mail_subj($cnd, $ex_type, $fnm) { global $usrdir; global $send_mail_mode; global $send_mail_remain; global $storage_control_exec; $smode = $send_mail_mode; if ($cnd == -2) { $smode = 3; } if ($smode == 0) { return false; } $fs_max = (int)$send_mail_remain; if ($fs_max < 0) { $fs_max = 0; } if ($fs_max > 100000) { $fs_max = 100000; } $free_space = f_space($usrdir); if ($free_space < $fs_max) { $smode = 3; } switch ($smode) { case 1: if ($cnd != -1) { return false; } break; case 2: if ($cnd == 0) { return false; } break; case 3: break; default: return false; } $cnd_mes = "------ $cnd"; if ($cnd == -2) { $cnd_mes = "テストメッセージ Test message"; } if ($cnd == -1) { $cnd_mes = "Failure : $fnm"; } if ($cnd == 0) { $cnd_mes = "Success : $fnm"; } if ($cnd == 1) { $cnd_mes = "Clean_Log"; } if ($cnd == 2) { $cnd_mes = "Radiko_Log"; } if ($cnd == 3) { $cnd_mes = "Radiru_Log"; } if ($cnd == 4) { $cnd_mes = "Timefree_Log"; } if ($cnd == 5) { $cnd_mes = "TimefreeKw_Log"; } if ($cnd == 6) { $cnd_mes = "RadiruVod_old_Log"; } if ($cnd == 7) { $cnd_mes = "RadiruGogaku_Log"; } if ($cnd == 8) { $cnd_mes = "RadiruVodGogaku_Log"; } if ($cnd == 9) { $cnd_mes = "RadiruVod_Log"; } if ($cnd == 10) { $cnd_mes = "RadiruGogaku_Log"; } if ($cnd == 11) { $cnd_mes = "Delivery_Log"; } if ($cnd == 12) { $cnd_mes = "Podcast_Log"; } if ($cnd == 13) { $cnd_mes = "Log"; } if ($cnd == 14) { $cnd_mes = "Live_Log"; } if ($free_space >= $fs_max) { $remain_mes = ""; } else { $remain_mes = "[free ".$free_space."MB < ".$fs_max."MB]"; } $subj = "[rfriends]$remain_mes $cnd_mes"; return $subj; } function fin_mail($cnd, $dbg, $ex_type, $fnm, $log2, $err2, $tim2) { $subj = fin_mail_subj($cnd, $ex_type, $fnm); if ($subj === false) return; if (file_exists($log2)) { $body = file_get_contents($log2); } else { $body = "logfile not found"; } $ret = fin_mail_s($dbg,$subj,$body,$err2,$tim2); if ($ret) { } else { echo_prn(1, "fin_mail Error : " . $ret); } } function fin_mail2($cnd, $ex_type, $fnm, $body) { $subj = fin_mail_subj($cnd, $ex_type, $fnm); if ($subj === false) { rf_error_log("fin_mail_sub error : $cnd $ex_type"); return; } $ret = fin_mail_s(0,$subj,$body,"",""); if ($ret) { } else { echo_prn(1, "fin_mail2 Error : " . $ret); } } function rf_disk_fmt($siz,$n) { $units = [' B', 'KB', 'MB', 'GB', 'TB']; $i = 0; while($siz > 1024) { $siz /= 1024; $i++; if ($i >= 4) break; } $ret = round($siz,$n).' '.$units[$i]; return $ret; } function rf_disk($dir) { $fr = disk_free_space($dir); $tl = disk_total_space($dir); $rfr = rf_disk_fmt($fr,1); $rtl = rf_disk_fmt($tl,0); $ret = $rfr." / ".$rtl; return $ret; } function rf_get_html_status($response) { if(count_73($response) <= 0){ return '999'; } preg_match('/HTTP\/1\.[0|1|x] ([0-9]{3})/', $response[0], $matches); if (count_73($matches) < 2) { echo_msg(2,"status:error"); return '999'; } $status_code = $matches[1]; return $status_code; } function rf_get_html($url,$rty) { if ($rty < 1 ) $rty =1; if ($rty > 10) $rty =10; for ($i=0;$i<$rty;$i++) { $html = @file_get_contents($url); if ($html !== false) return $html; sleep(1); } return false; } function rf_get_timestamp($ex_type,$totime) { global $timefree_timestamp; global $radiru_vod_timestamp; global $radiru_gogaku_timestamp; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; switch($ex_type) { case $ex_timefree: if ($timefree_timestamp == 1) $tstamp = 1; break; case $ex_radiru_vod: if ($radiru_vod_timestamp == 1) $tstamp = 1; break; case $ex_radiru_gogaku: if ($radiru_gogaku_timestamp == 1) $tstamp = 1; break; default: $tstamp = 0; break; } if ($tstamp == 1) { $t = strtotime($totime); return $t; } return false; } function rf_copyfile($inf,$otf,$ovflag,$ex_type,$totime) { if (($ovflag == 0) && file_exists($otf)) { echo_prn(1, "  existed : $otf"); return true; } echo_prn(1, "copy"); echo_prn(1, "  from : $inf"); echo_prn(1, "  to   : $otf"); $ret = rf_copy($inf,$otf); if ($ret === false) { echo_prn(1, "  failed"); return false; } if ($totime != 0 ) { $t = rf_get_timestamp($ex_type,$totime); if ($t !== false) { rf_touch_tm($otf,$t); echo_prn(1,"set timestamp : ".date("Y/m/d H:i:s",$t)); } } return true; } function rf_movefile($inf,$otf,$ovflag,$ex_type,$totime) { if (($ovflag == 0) && file_exists($otf)) { echo_prn(1, "  existed : $otf"); return true; } echo_prn(1, "move"); echo_prn(1, "  from : $inf"); echo_prn(1, "  to   : $otf"); if (file_exists($otf)) { $ret = unlink($otf); if ($ret === false) { echo_prn(1,"  failed(delete 'to')"); rf_error_log("failed delete to : $otf"); return false; } } $ret = rf_copy($inf,$otf); if ($ret === false) { echo_prn(1, "  failed(copy 'from' -> 'to')"); rf_error_log("failed copy $inf -> $otf"); return false; } $ret = unlink($inf); if ($ret === false) { echo_prn(1, "  failed(delete 'from')"); rf_error_log("failed delete from : $inf"); return false; } if ($totime != 0 ) { $t = rf_get_timestamp($ex_type,$totime); if ($t !== false) { rf_touch_tm($otf,$t); echo_prn(1,"set timestamp : ".date("Y/m/d H:i:s",$t)); } } return true; } function rf_move($inf,$otf) { $ret = rf_copy($inf,$otf); if ($ret === false) { return false; } $ret = unlink($inf); if ($ret === false) { return false; } return true; } function rf_copy($inf,$otf) { $mt = filemtime($inf); $ret = @copy($inf,$otf); if ($ret === true) { rf_touch_tm($otf,$mt); } return $ret; } function rf_copy_newonly($inf,$otf) { $ret = true; if (!file_exists($inf)) return false; $tinf = @filemtime($inf); if ($tinf === false) return false; if (!file_exists($otf)) { $ret = @copy($inf,$otf); return $ret; } $totf = @filemtime($otf); if ($totf === false) { fin_unlink($otf); $ret = @copy($inf,$otf); return $ret; } if ($tinf > $totf) { fin_unlink($otf); $ret = @copy($inf,$otf); } return $ret; } function rf_mkdir($dir) { if (file_exists($dir)) { if (!is_dir($dir)) { return false; } } else { $ret = @mkdir($dir); if ($ret === false) { return false; } } return true; } function rf_mkdir_r($dir) { if (file_exists($dir)) { if (!is_dir($dir)) { return false; } } else { if (!mkdir($dir,0777,true)) { return false; } } return true; } function rf_wget_pcast($url, $out, $opt) { global $wget_opt; global $wget_user_agent; fin_unlink($out); if ($opt == "") { $optx = $wget_opt." --user-agent=\"".$wget_user_agent."\""; } else { $optx = $opt." --user-agent=\"".$wget_user_agent."\""; } $exec_cmd = "wget $optx $url -O $out"; echo_prn(1,""); echo_prn(1,$exec_cmd); $ret = external_program($exec_cmd); if ($ret != 0) { fin_unlink($out); return false; } if (!file_exists($out)) { return false; } if (filesize($out) == 0) { fin_unlink($out); return false; } return true; } function rf_wget_out($url, $opt) { global $wget_opt; $exec_cmd = "wget $wget_opt $opt $url -O -"; $output = external_shell_program($exec_cmd); return $output; } function rf_curl($url,$opt) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt( $ch, CURLOPT_TIMEOUT, 5 ); curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4 ); $result = curl_exec($ch); if ($result === false) { } else { $n = strlen($result); $ret = @gzdecode($result); if ($ret !== false) { $result = $ret; } else { $result = false; } } $errno = curl_errno($ch); if ($errno != 0) { } curl_close($ch); return $result; } function rf_wget_out_once($url, $opt) { $exec_cmd = "wget $opt $url -O -"; $output = external_shell_program($exec_cmd); return $output; } function rf_wget_out_exec($url, $opt) { global $wget_opt; global $wget_user_agent; $optx = $wget_opt." --user-agent=\"".$wget_user_agent."\""; $exec_cmd = "wget $optx $opt $url -O -"; $output = external_exec_program($exec_cmd); if ($output === false) { return false; } $ot = ""; foreach($output as $o) { $ot .= $o."\n"; } return $ot; } function rf_check_time2($tim) { $dt = explode(":", $tim); if (count_73($dt) != 3) { return false; } if ($dt[0] < 0 || $dt[0] > 23) { return false; } if ($dt[1] < 0 || $dt[1] > 59) { return false; } if ($dt[2] < 0 || $dt[2] > 59) { return false; } $tim2 = sprintf("%02d:%02d:%02d", $dt[0], $dt[1], $dt[2]); return $tim2; } function rf_check_time($tim) { $dt = explode(":", $tim); if (count_73($dt) != 2) { return false; } if ($dt[0] < 0 || $dt[0] > 23) { return false; } if ($dt[1] < 0 || $dt[1] > 59) { return false; } $tim2 = sprintf("%02d:%02d", $dt[0], $dt[1]); return $tim2; } function rf_reboot($mes) { global $ui_mode; global $rfproduct; if ($ui_mode == 2) { echo_msg(2,"$mes"."メニューの左上の'$rfproduct'をクリックしてください。"); } } function rf_edit_area($area) { global $pref_code; $no = rf_convjp($area); if ($no == 0) { $pref = "不明"; } else { $pref = $pref_code[$no]; } return $pref; } function rf_convjp($area) { $parea = strtoupper($area); if (substr($parea, 0, 2) != "JP") { return 0; } $ln = strlen($parea); if ($ln < 3 || $ln > 4) { return 0; } $n = substr($parea, 2) + 0; if ($n < 1 || $n > 47) { return 0; } return $n; } function rf_input_pref() { global $home_area_code; global $nowarea; global $ui_mode; echo_msg(2, "現在のエリア : $nowarea (H:$home_area_code)"); echo_msg(2, ""); if ($ui_mode == 2) { ht_input_pref(); return; } pref_view(); $ans = echo_input(2, "エリア番号は? (1-47 0:Home): "); if ($ans != "") { $area = rf_change_pref($ans); $nowarea = $area; } else { $area = false; } echo_msg(2, "現在のエリア : $nowarea (H:$home_area_code)"); return $area; } function rf_change_pref($ans) { global $home_area_code; global $nowarea; if ($ans == "") { return false; } if ($ans < 0 || $ans > 47) { return false; } if ($ans == 0) { $area = $home_area_code; } else { $area = sprintf("JP%d", $ans); } return $area; } function rf_disp_section($secmes, $str) { echo_prn(1, ""); echo_prn(1, str_repeat($str, 90)); echo_prn(1, $secmes); echo_prn(1, str_repeat($str, 90)); } function rf_wget_proxy() { global $base; global $wget_proxy; $fl = $base."wget_https_proxy"; $ret[0] = ""; $ret[1] = ""; $ret[2] = ""; if (file_exists($fl)) { $dat = "#"; $files = file($fl,FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES); foreach($files as $f) { $dat = trim($f); if (substr($dat,0,1) != '#') break; } if (substr($dat,0,1) == '#') $dat = $wget_proxy; } else { $dat = $wget_proxy; } if ($dat == "") return $ret; $dat = str_replace(" ","",$dat); $dat1 = explode("@",$dat); $dat1_n = count_73($dat1); switch($dat1_n) { case 1: break; case 2: $dat = $dat1[1]; $usr = explode(":",$dat1[0]); $usr_n = count_73($usr); switch($usr_n) { case 1: $ret[1] = trim($usr[0]); break; case 2: $ret[1] = trim($usr[0]); $ret[2] = trim($usr[1]); break; default: return $ret; break; } break; default: return $ret; break; } $ip = explode(":",$dat); $ip_n = count_73($ip); switch($ip_n) { case 1: $ip[1] = "8080"; break; case 2: break; default: return $ret; break; } $ip[0] = trim($ip[0]); $ip[1] = trim($ip[1]); if (!preg_match('/^[0-9]+$/', $ip[1])) return $ret; $pattern = '/(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])/'; if(!preg_match($pattern,$ip[0])) return $ret; $ret[0] = $ip[0].":".$ip[1]; return $ret; } function rf_wget_test($cmd) { global $bindir; global $tmpdir; $excmd = $bindir.$cmd; system($excmd,$ret); return $ret; } function rf_wget($url, $out, $opt) { global $wget_opt; global $wget_user_agent; fin_unlink($out); $optx = $wget_opt." --user-agent=\"".$wget_user_agent."\""; $exec_cmd = "wget $optx $opt $url -O $out"; $ret = external_program($exec_cmd); if ($ret != 0) { fin_unlink($out); return false; } if (!file_exists($out)) { return false; } if (filesize($out) == 0) { fin_unlink($out); return false; } return true; } function rf_wget_spider($url) { $opt = "--spider -q"; $exec_cmd = "wget $opt $url"; $ret = external_program($exec_cmd); if ($ret != 0) { return false; } return true; } function rf_wget_spider2($url,$tout,$try) { $opt = "--spider -q -T $tout -t $try"; $exec_cmd = "wget $opt $url"; $ret = external_program($exec_cmd); if ($ret != 0) { return false; } return true; } function rf_wget_wakeup() { global $wget_opt_https_proxy; global $wget_opt_proxy_user; global $wget_opt_proxy_pass; global $wget_opt_ext; global $wget_user_agent; global $radiko_host; global $tmpdir; $optx = $wget_opt_ext." --user-agent=\"".$wget_user_agent."\""; if ($wget_opt_https_proxy != "") { $optx .= " -e HTTPS_PROXY=".$wget_opt_https_proxy; if ($wget_opt_proxy_user != "") { $optx .= " --proxy-user=".$wget_opt_proxy_user; $optx .= " --proxy-passwd=".$wget_opt_proxy_pass; } $head = make_fn("wget_wakeup"); $tout = $tmpdir.$head.".log"; $exec_cmd = "wget $optx $radiko_host -O $tout"; $ret = external_program($exec_cmd); fin_unlink($tout); } } function rf_error_log_ffmpeg($mode,$mes) { global $svcmode; $st = time(); $st_f = date("H:i:s", $st); echo_prn(1, "$st_f $mode"); if ($svcmode["service_mode"] != 1) return; if ($svcmode["service_log_errors"] != 1) return; if ($svcmode["service_log_ffmpeg"] != 1) return; error_log("$mode ffmpeg $mes"); } function rf_error_log($mes) { global $svcmode; if ($svcmode["service_mode"] != 1) return; if ($svcmode["service_log_errors"] != 1) return; error_log("$mes"); } function rf_error_message($cnd, $ex_type, $mes, $subj, $body) { global $rfriends_ver; echo_prn(1, $mes); rf_error_log($subj); rf_error_log($mes." ".$cnd); $body2 = $rfriends_ver."\n\n".$subj."\n".$body."\n\n".$mes."\n"; } function rf_touch($fl) { $ret = @touch($fl); return $ret; } function rf_touch_tm($fl,$tm) { $ret = @touch($fl,$tm); return $ret; } function rf_strimwidth($str,$st,$width) { global $ui_mode; if ($ui_mode == 2) return $str; $ret = mb_strimwidth($str,$st,$width,'','utf-8'); return $ret; } function rf_file($src,$ignore_new_lines,$skip_empty_lines) { $exeos = get_rfriends_exeos(); if ($exeos == "OSX") { $rf_file_sw = 1; } else { $rf_file_sw = 0; } if ($rf_file_sw == 0) { $lines = file($src); return $lines; } $f = file_get_contents($src); if ($f === false) { return false; } $lines = explode("\n",$f); if ($lines === false) { return false; } if ($ignore_new_lines == 0 && $skip_empty_lines == 0) { return $lines; } $lines2 = array(); foreach($lines as $line) { if ($ignore_new_lines == 1) { $line = rtrim($line,"\n"); } if ($skip_empty_lines == 1) { if (trim($line) == "") { continue; } } $lines2[] = $line; } return $lines2; } function rf_writefl($fl,$txts) { global $tmpdir; global $DS; $rf_dirname = dirname($fl).$DS; $rf_basename = basename($fl); $bakfl = $fl.".bak"; $tmpfl = $tmpdir.$rf_basename; $ret = file_put_contents($tmpfl,$txts,LOCK_EX); if ($ret === false) { rf_error_log("rf_edit_file : file put error ($tmpfl)"); return false; } fin_unlink($bakfl); $ret = rename($fl, $bakfl); if ($ret === false) { rf_error_log("rf_edit_file : rename error ($fl => $bakfl)"); return false; } $ret = rename($tmpfl, $fl); if ($ret === false) { rf_error_log("rf_edit_file : rename error ($tmpfl => $fl)"); fin_unlink($fl); $ret = rename($bakfl, $fl); if ($ret === false) { rf_error_log("rf_edit_file : rename error ($bakfl => $fl)"); } return false; } return true; } 