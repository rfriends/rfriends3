<?php
 function rfriends_auth_radiko($mode,$area_code,$force) { global $radiko_auth_mode; global $extdir; global $tmpusrdir; global $bindir; global $home_area_code; global $nowarea; $authtoken = null; $pchk = premium_check(); if ($pchk == 1) { $radiko_auth_mode = 0; } switch($radiko_auth_mode) { case 0: switch($mode) { case 0: $authtoken = rf_auth($force); break; case 1: $authtoken = rf_radiko_premium_auth($area_code); break; default: break; } break; case 1: break; case 2: switch($mode) { case 0: if ($area_code != $home_area_code) { if ($area_code != "") { echo_prn(1,"エリアコードがホームエリアではありません。($area_code)"); } $authtoken = false; break; } $authtoken = ext_radiko_auth_mode2($mode,$area_code); set_area(); break; case 1: if (($pchk == 2) && (rf_ext_ver() !== false)) { $authtoken = ext_radiko_auth_mode2($mode,$area_code); } break; default: $authtoken = false; break; } if ($authtoken === false) $authtoken = null; break; case 3: switch($mode) { case 0: if ($area_code != $home_area_code) { if ($area_code != "") { echo_prn(1,"エリアコードがホームエリアではありません。($area_code)"); } $authtoken = false; break; } $authtoken = ext_radiko_auth_mode3($mode,$area_code); set_area(); break; case 1: if ($pchk == 2 && rf_ext_ver() !== false) { $authtoken = ext_radiko_auth_mode3($mode,$area_code); } break; default: $authtoken = false; break; } if ($authtoken === false) $authtoken = null; break; case 4: break; default: $authtoken = false; break; } if ($authtoken === false) $authtoken = null; return $authtoken; } function get_radiko_callsign($channel) { global $radiko_callsign_db; if (array_key_exists($channel,$radiko_callsign_db)) { $ch_cs = $radiko_callsign_db[$channel]; } else { $ch_cs = $channel; } return $ch_cs; } function rf_reflesh_auth_sub() { global $auth_token_dat; fin_unlink($auth_token_dat); $ret = auth_ex(0); if ($ret === null) { fin_unlink($auth_token_dat); echo_msg(2, "radikoの地域情報が異常です。"); return; } if (!file_exists($auth_token_dat)) { echo_msg(2, "radikoの地域情報が異常です。"); return; } $auth = file_get_contents($auth_token_dat); $dat = explode(",", $auth); if (count_73($dat) != 5) { fin_unlink($auth_token_dat); echo_msg(2, "radikoの地域情報が異常です。"); return; } echo_msg(2, ""); echo_msg(2, "$auth"); echo_msg(2, ""); echo_msg(2, "radikoの地域情報を更新しました。"); return; } function rf_reflesh_auth() { global $auth_token_dat; global $wget_opt_ext; global $wget_opt_https_proxy; global $wget_opt_proxy_user; global $wget_opt_proxy_pass; if (!file_exists($auth_token_dat)) { $ret = auth_ex(0); if ($ret === null) { fin_unlink($auth_token_dat); echo_msg(2, "radikoの地域情報が異常です。"); rf_pause(); return; } } if (!file_exists($auth_token_dat)) { echo_msg(2, "radikoの地域情報が異常です。"); rf_pause(); return; } $auth = file_get_contents($auth_token_dat); $dat = explode(",", $auth); if (count_73($dat) != 5) { fin_unlink($auth_token_dat); echo_msg(2, "radikoの地域情報が異常です。"); } echo_msg(2, "現在:"); echo_msg(2, "$auth"); echo_msg(2, ""); $ip = rfgw_getip(); echo_msg(2, "IPADDR      : $ip"); if ($wget_opt_https_proxy != "") { echo_msg(2, "https_proxy : $wget_opt_https_proxy"); if ($wget_opt_proxy_user != "") { echo_msg(2, "wget_user   : $wget_opt_proxy_user"); echo_msg(2, "wget_pass   : *****"); } echo_msg(2, ""); echo_msg(2, "更新に時間がかかることがあります。"); } echo_msg(2, ""); $ans = echo_yesno(2, "地域情報を更新しますか? (y/N): "); echo_msg(2, ""); if ($ans == "y" || $ans == "Y") { rf_reflesh_auth_sub(); rf_pause(); } return; } function rf_net_init() { global $nowarea; global $area_code; global $home_area_code; global $premium_home_area_code; global $premium_area; global $premium; global $wget_opt; $auth_token = auth_ex(0); if ($auth_token == null) return $auth_token; if ($premium > 0) { premium_getarea(); if ($premium_home_area_code == "") $premium_home_area_code = $home_area_code; } return $auth_token; } function rf_put_auth($authtoken) { global $auth_token_dat; global $nowarea; global $area_code; $dt = date("YmdHis"); $auth = "$dt,$authtoken,$nowarea"; $ret = file_put_contents($auth_token_dat, $auth, LOCK_EX); if ($ret === false) { echo_msg(2, "Authtoken write error"); } } function rf_get_auth() { global $auth_token_dat; if (!file_exists($auth_token_dat)) { return null; } $auth = file_get_contents($auth_token_dat); $dat = explode(",", $auth); if (count_73($dat) < 4) { fin_unlink($auth_token_dat); return null; } return $dat; } function set_area() { global $area_code; global $home_area_code; global $nowarea; global $premium_area; if (premium_check() == 0) { $area_code = $home_area_code; $pref = rf_edit_area($area_code); $premium_area = $home_area_code; $nowarea = "$area_code,$pref"; } else { $parea = premium_getarea(); $no = rf_convjp($parea); if ($no == 0) { $area_code = $premium_area; $pref = premium_getpref(); $nowarea = "$area_code,$pref"; } } } function auth_ex($force) { $authtoken = rfriends_auth_radiko(0,"",$force); return $authtoken; } function rf_auth($force) { global $auth_token; global $home_area_code; global $area_code; global $nowarea; global $premium_area; $auth_token = rf_radiko_normal_auth($force); if (premium_check() == 0) { $area_code = $home_area_code; $pref = rf_edit_area($area_code); $premium_area = $home_area_code; $nowarea = "$area_code,$pref"; } else { $parea = premium_getarea(); $no = rf_convjp($parea); if ($no == 0) { $area_code = $premium_area; $pref = premium_getpref(); $nowarea = "$area_code,$pref"; } } return $auth_token; } function set_auth_ex_hls_init() { global $header1hlsx; global $header2hlsx; global $hls_type; global $hls_app; global $hls_appver; global $hls_user; global $hls_dev; $hls_type = trim(mb_convert_kana($hls_type, 'as')); $hls_app = trim(mb_convert_kana($hls_app, 'as')); $hls_appver = trim(mb_convert_kana($hls_appver,'as')); $hls_user = trim(mb_convert_kana($hls_user, 'as')); $hls_dev = trim(mb_convert_kana($hls_dev, 'as')); return; } function set_auth_ex_hls1() { global $header1hlsx; global $header2hlsx; global $hls_type; global $hls_app; global $hls_appver; global $hls_user; global $hls_dev; $opt = sprintf($header1hlsx, $hls_app, $hls_appver, $hls_user, $hls_dev); return $opt; } function set_auth_ex_hls2($authtoken, $partialkey) { global $header1hlsx; global $header2hlsx; global $hls_type; global $hls_app; global $hls_appver; global $hls_user; global $hls_dev; $opt = sprintf($header2hlsx, $hls_app, $hls_appver, $hls_user, $hls_dev, $authtoken, $partialkey); return $opt; } function get_auth1_value($auth) { global $playercommon; $ret = array(); $ret[0] = 1; $ret[1] = ""; $ret[2] = ""; $ret[3] = 0; $ret[4] = 0; if (preg_match("/X-Radiko-AuthToken: ([\w-]+)/i", $auth, $ans)) { $authtoken = $ans[1]; } else { $ret[0] = 2; return $ret; } if (preg_match("/X-Radiko-KeyOffset: (\d+)/i", $auth, $ans)) { $offset = $ans[1]; } else { $ret[0] = 3; return $ret; } if (preg_match("/X-Radiko-KeyLength: (\d+)/i", $auth, $ans)) { $length = $ans[1]; } else { $ret[0] = 4; return $ret; } $keyf = file_get_contents($playercommon); if (preg_match("/.*new RadikoJSPlayer\(.*/i", $keyf, $ans)) { $ans2 = explode(",", $ans[0]); $ans3 = str_replace(" ", "", $ans2[2]); $ans4 = str_replace("'", "", $ans3); $keyf2 = substr($ans4, $offset, $length); if ($keyf2 !== false) { $partialkey = base64_encode($keyf2); } else { $partialkey = ""; } } else { $ret[0] = 5; return $ret; } $ret[0] = 0; $ret[1] = $authtoken; $ret[2] = $partialkey; $ret[3] = $offset; $ret[4] = $length; return $ret; } function get_auth2_value($auth) { $ret = array(); $ret[0] = 1; $ret[1] = ""; $ret[2] = ""; $areaarray = explode("\n", $auth); $jparray = preg_grep("/^JP/", $areaarray); if (count_73($jparray) == 0) { $ret[0] = 2; return $ret; } $JP = array_values(preg_grep("/^JP/", $areaarray)); $nowarea = str_replace(array("\r", "\n"), "", $JP[0]); $area_tmp = explode(",", $nowarea); $area_code = $area_tmp[0]; if ($area_code == null) { echo_msg(2, "failed auth2 process (3)"); $ret[0] = 3; return $ret; } $ret[0] = 0; $ret[1] = $nowarea; $ret[2] = $area_code; return $ret; } function ext_device_life_time() { $life_time = 60; if ($life_time < 0) { $life_time = 0; } if ($life_time > 3600) { $life_time = 3600; } return $life_time; } function ext_device_rnd($mx) { $mx2 = (int)$mx - 1; $rnd = ((mt_rand()/mt_getrandmax())) * $mx2; $n = (int)round($rnd, 0); if ($n < 0) { $n = 0; } if ($n > $mx2) { $n = $mx2; } return $n; } function ext_device_header1($dat) { global $header1hlsg; $app = $dat[0]; $ver = $dat[1]; $usr = $dat[2]; $dev = $dat[3]; $opt = sprintf($header1hlsg, $app, $ver, $usr, $dev); return $opt; } function ext_device_header2($dat, $auth, $loc, $pkey) { global $header2hlsg; $app = $dat[0]; $ver = $dat[1]; $usr = $dat[2]; $dev = $dat[3]; $con = $dat[4]; $opt = sprintf($header2hlsg, $app, $ver, $usr, $dev, $con, $auth, $loc, $pkey); return $opt; } function rf_radiko_hls($mode,$exty) { $ret = rf_radiko_hls_sub($mode,$exty); if ($ret === false ) return false; $authtoken = $ret[0]; return $authtoken; } function rf_radiko_hls_sub($mode,$exty) { global $ui_mode; global $tmpdir; global $nowarea; global $area_code; global $home_area_code; $head = make_fn("auth"); $fms1 = $tmpdir.$head.".fms1.dat"; $fms2 = $tmpdir.$head.".fms2.dat"; $retrycnt = 2; for ($i=0;$i<$retrycnt;$i++) { $ret = rf_radiko_auth1_hls($mode,$fms1,$exty); if ($ret !== false) break; fin_unlink($fms1); if ($i == ($retrycnt - 1)) { echo_msg(2, "failed auth1 process"); return false; } sleep(1); } $auth1 = file_get_contents($fms1); fin_unlink($fms1); if ($auth1 === false) { echo_msg(2, "failed auth1 get process"); return false; } if ($mode > 1) { echo_msg(2,""); echo_msg(2, "--- fms1"); if ($ui_mode == 2) ht_print_r($auth1,'auth1'); else print_r($auth1); echo_msg(2,""); } $ret = get_auth1_value($auth1); $r = $ret[0]; if ($r == 0) { $authtoken = $ret[1]; $partialkey = $ret[2]; } else { echo_msg(2, "failed auth1 value process ( $r )"); return false; } $ret = rf_radiko_auth2_hls($mode,$fms2,$exty,$authtoken, $partialkey); if ($ret === false) { fin_unlink($fms2); echo_msg(2, "failed auth2 process"); return false; } $auth2 = file_get_contents($fms2); fin_unlink($fms2); if ($auth2 === false) { echo_msg(2, "failed auth2 get process"); return false; } if ($mode > 1) { echo_msg(2,""); echo_msg(2, "--- fms2"); if ($ui_mode == 2) ht_print_r($auth2,'auth2'); else print_r($auth2); } $ret = get_auth2_value($auth2); $r = $ret[0]; if ($r == 0) { if ($exty == 0 && $mode == 0) { $nowarea = $ret[1]; $area_code = $ret[2]; $home_area_code = $area_code; } } else { echo_msg(2, "failed auth2 value process ( $r )"); return false; } if ($mode != 0) { echo_msg(2,""); echo_msg(2,"--- token"); echo_msg(2,"authtoken  : $authtoken"); echo_msg(2,"partialkey : $partialkey"); echo_msg(2,"nowarea    : ".$ret[1]); } return [$authtoken,$partialkey]; } function rf_radiko_auth1_hls($mode,$fms,$exty) { global $fms1urlhls; global $bindir; global $cookiefile; set_auth_ex_hls_init(); fin_unlink($fms); $auth = ""; $opt = set_auth_ex_hls1(); $opt = str_replace("-q "," ",$opt); if ($exty == 1) { $opt .= "  --load-cookies ".$cookiefile; } $optx = rf_get_auth1_optx($mode); $exec_cmd = mb_convert_kana("wget $optx $opt $fms1urlhls -O $fms","s"); if ($mode == 0) { $ret = external_program_null($exec_cmd); } else { echo_msg(2,""); echo_msg(2,"--- auth1"); echo_msg(2,$exec_cmd); echo_msg(2,""); $ret = external_program($exec_cmd); } if ($ret != 0) { if ($mode == 0) { rf_error_log("rf_radiko_auth1_hls"); rf_error_log($exec_cmd); } return false; } return true; } function rf_radiko_auth2_hls($mode,$fms,$exty,$authtoken, $partialkey) { global $fms2urlhls; global $bindir; global $cookiefile; global $radikosessionfile; global $wget_opt; global $wget_user_agent; fin_unlink($fms); $opt = set_auth_ex_hls2($authtoken, $partialkey); $opt = str_replace("-q "," ",$opt); $optx = rf_get_auth2_optx($mode); $fms2urlhls_new = $fms2urlhls; if ($exty == 1) { $radiko_session = @file_get_contents($radikosessionfile); if ($radiko_session === false) { rf_error_log("radikosessionfile not found"); return false; } $fms2urlhls_new .= "?radiko_session=".$radiko_session; $opt .= "  --load-cookies ".$cookiefile; } $optx .= " --user-agent=\"".$wget_user_agent."\""; $exec_cmd = mb_convert_kana("wget $optx $opt $fms2urlhls_new -O $fms","s"); if ($mode == 0) { $ret = external_program_null($exec_cmd); } else { echo_msg(2,""); echo_msg(2,"--- auth2"); echo_msg(2,$exec_cmd); echo_msg(2,""); $ret = external_program($exec_cmd); } if ($ret != 0) { return false; } return true; } function rf_get_auth1_optx($mode) { global $wget_opt_https_proxy; global $wget_opt_proxy_user; global $wget_opt_proxy_pass; global $wget_opt_ext; global $wget_user_agent; switch($mode) { case 0: $op = $wget_opt_ext; break; case 1: $op = $wget_opt_ext; break; case 2: $op = str_replace("-q ","-d ",$wget_opt_ext); break; case 3: $op = str_replace("-q ","-d -t 10 ",$wget_opt_ext); break; default: $op = $wget_opt_ext; break; } $optx = $op." --user-agent=\"".$wget_user_agent."\""; if ($wget_opt_https_proxy != "") { $optx .= " -e HTTPS_PROXY=".$wget_opt_https_proxy; if ($wget_opt_proxy_user != "") { $optx .= " --proxy-user=".$wget_opt_proxy_user; $optx .= " --proxy-passwd=".$wget_opt_proxy_pass; } } return $optx; } function rf_get_auth2_optx($mode) { global $wget_opt_https_proxy; global $wget_opt_proxy_user; global $wget_opt_proxy_pass; global $wget_opt; global $wget_opt_ext; global $wget_user_agent; $optx = $wget_opt; switch($mode) { case 0: break; case 1: break; case 2: $optx = str_replace("-q ","-d ",$optx); break; case 3: $optx = str_replace("-q ","-d -t 10 ",$optx); break; default: break; } $optx = $optx." --user-agent=\"".$wget_user_agent."\""; if ($wget_opt_https_proxy != "") { $optx .= " -e HTTPS_PROXY=".$wget_opt_https_proxy; if ($wget_opt_proxy_user != "") { $optx .= " --proxy-user=".$wget_opt_proxy_user; $optx .= " --proxy-passwd=".$wget_opt_proxy_pass; } } return $optx; } function rf_radiko_auth_hls_type1($head) { global $tmpdir; global $extdir; global $DS; global $fms1urlhls; global $fms2urlhls; global $area_code; global $nowarea; global $home_area_code; $uver = rf_ext_ver(); if ($uver === false) { echo_prn(1, "--- rf_ext error"); return null; } echo_prn(1, "--- rf_ext Ver. ".$uver); $dat = rf_device_info(); $app = $dat[0]; $ver = $dat[1]; $user = $dat[2]; $dev = $dat[3]; $con = $dat[4]; if (($ans = rf_device_lat_lon()) === false) { echo_prn(1, "lat lon error"); return false; } $lat = $ans[0]; $lon = $ans[1]; $loc = "$lat,$lon,gps"; echo_prn(1, "loc : $loc"); $auth1 = $tmpdir.$head.".auth1"; $auth2 = $tmpdir.$head.".auth2"; fin_unlink($auth1); fin_unlink($auth2); $opt = ext_device_header1($dat); if (rf_wget($fms1urlhls, $auth1, $opt) === false) { fin_unlink($auth1); return null; } if (!file_exists($auth1)) { return null; } $auth = file_get_contents($auth1); fin_unlink($auth1); $ret = get_auth1_value($auth); if ($ret[0] != 0) { return null; } $atk = $ret[1]; $ofs = $ret[3]; $len = $ret[4]; $pkey = rf_device_pkey($ofs, $len); if ($pkey === false) { echo_prn(1, "partialkey error : $ofs,$len"); return null; } $opt = ext_device_header2($dat, $atk, $loc, $pkey); if (rf_wget($fms2urlhls, $auth2, $opt) === false) { return null; } if (!file_exists($auth2)) { return null; } $auth = file_get_contents($auth2); fin_unlink($auth2); $ret = get_auth2_value($auth); $r = $ret[0]; if ($r == 0) { $nowarea = $ret[1]; $area_code = $ret[2]; $home_area_code = $area_code; } else { echo_msg(2, "failed auth2 process ( $r )"); return null; } return $atk; } function get_radiko_stream_url_s($xml, $mode) { if ($mode == 1) { $xpathurl = "/urls/url[@areafree=\"1\"]"; } else { $xpathurl = "/urls/url[@areafree=\"0\"]"; } $url = $xml[0]->xpath($xpathurl); $url_xml = simplexml_load_string($url[0]->asXml()); $hlsurl = $url_xml->playlist_create_url; return $hlsurl; } function get_radiko_stream_url($channel, $recfiletmp, $mode) { global $streamurlhls; global $auth_token; global $tmpdir; $url = $streamurlhls.$channel.".xml"; $stream_name = make_fn("rf_rec"); $stream_xml = $tmpdir.$stream_name.".xml"; $hlsurl = ""; echo_prn(1, "url : $url"); $xmldata = @file_get_contents($url); if ($xmldata === false) { echo_prn(1, "failed get xmldata"); return $hlsurl; } $xmldata2 = @gzdecode($xmldata); if ($xmldata2 !== false) { $xmldata = $xmldata2; echo_prn(1, "gzdecode xmldata"); } $xml = @simplexml_load_string($xmldata); if ($xml === false) { echo_prn(1, "failed loading XML"); return $hlsurl; } $hlsurl = get_radiko_stream_url_s($xml, $mode); echo_prn(1, "areafree:$mode $hlsurl"); return $hlsurl; } function rf_sch_radiko($ymd, $area_code) { global $radiko_prog_retry; global $radiko_prog_wait; global $radiko_prog_url; global $DS; $url = $radiko_prog_url."$ymd/$area_code.xml"; for ($i=0;$i<$radiko_prog_retry;$i++) { $tmp = @file_get_contents($url); if ($tmp !== false) { $tmp2 = str_replace(array("\r","\n","\t"), '', $tmp); $xmltmp = @simplexml_load_string($tmp2); if ($xmltmp !== false) { echo_prn(1, "get xml($i) : $url"); return $tmp; } } sleep($radiko_prog_wait); } echo_prn(1, "error or not delivered : $url"); return false; } function rf_get_schedule_radiko($dt, $n, $area_code, $flg) { global $schdir; global $sch_life_time; $tm = time(); $exp = 3600 * 24 * 9; $pat = $schdir."*_*.xml"; rf_sch_expire_radiko(0, $tm, $exp, $pat, 0); $files = array(); for ($i = 0; $i < $n; $i++) { $dt1 = strtotime("$i day", $dt); $ymd = date("Ymd", $dt1); $fnm = sprintf("%s_%s.xml", $ymd, strtoupper($area_code)); $fn = $schdir.$fnm; $files[] = $fn; if (file_exists($fn)) { $ft = filemtime($fn); $df = $tm - $ft; } else { $df = $sch_life_time; } if ($flg == 1) { $df = $sch_life_time; } if ($df >= $sch_life_time || $df < 0) { $tmp = rf_sch_radiko($ymd, $area_code); if ($tmp !== false) { file_put_contents($fn, $tmp, LOCK_EX); } else { echo_prn(1,"get xml error : $fnm"); } } } $xml = array(); foreach($files as $fn) { if (file_exists($fn)) { $tmp = file_get_contents($fn); $tmp2 = str_replace(array("\r","\n","\t"), '', $tmp); $xmltmp = @simplexml_load_string($tmp2); if ($xmltmp !== false) { $dt = date("Y/m/d H:i:s",filemtime($fn)); $fnprn = sprintf("%s  %s %8d",basename($fn),$dt,filesize($fn)); echo_prn(1,$fnprn); $xml[] = $xmltmp; } else { echo_prn(1,basename($fn)." error"); } } else { echo_prn(1,basename($fn)." not exists"); } } return $xml; } function rf_program_radiko($dt,$cnt,$area) { global $schdir; for ($i=0;$i<$cnt;$i++) { $dt1 = strtotime("$i day", $dt); $ymd = date("Ymd", $dt1); $fnm = sprintf("%s_%s.xml", $ymd, strtoupper($area)); $fn = $schdir.$fnm; $tmp = rf_sch_radiko($ymd, $area); if ($tmp !== false) { $ret = file_put_contents($fn, $tmp, LOCK_EX); if ($ret === false ) { } } else { } } return; } function radiko_rsv_ex($area_code, $kwdat,$kwdat_ng, $dt1, $cnt, $nk, $ngflag, $tf,$rmax) { global $prog_url; global $prog_retry; global $prog_wait; global $dlmt; global $failed_record; global $in_ng; global $out_ng; global $ex_radiko; global $radiru_callsign_r1; global $radiru_callsign_r2; global $rsvdir; $pat = "{*.bat,*.sh,*.dat}"; $rsv_n = 1; $ret = clear_log_hour($rsv_n, $rsvdir, $pat, 1, 0, 1); $keyw = array(); if ($ngflag == 0) { $keyw = $kwdat; } else { $keyw[0] = "ng"; } $xml = rf_get_schedule_radiko($dt1, $cnt, $area_code, 0); $nw = time(); $nwe = $nw + $nk * 3600 + 600; $rsv_cnt = 0; $ttl = 0; $skp = 0; $rsvdata = array(); $cnt2 = count_73($xml); for ($i = 0; $i < $cnt2; $i++) { $num_station = $xml[$i]->stations->station; foreach ($num_station as $station) { $station_xml = simplexml_load_string($station->asXml()); foreach ($station_xml->progs->prog as $prog_xml) { $ft = $prog_xml['ft']; $ftt = strtotime($ft); if (($nk > 0) && ($ftt < $nw)) { continue; } if (($nk > 0) && ($ftt > $nwe)) { continue; } $hit = ""; $ttl++; $ch = $station_xml['id']; $name = $station_xml->name; $title = $prog_xml->title; $artist = $prog_xml->pfm; $desc = $prog_xml->desc; $info = $prog_xml->info; $genrec = $prog_xml->genre->personality['id']; $genrec .= ",".$prog_xml->genre->personality->name; $genre = $prog_xml->genre->program['id']; $genre .= ",".$prog_xml->genre->program->name; $genrec = str_replace(" ","",$genrec); $genre = str_replace(" ","",$genre); if ($genrec == ",") $genrec = ""; if ($genre == ",") $genre = ""; $ft2 = strtotime($ft); $week_n = array("SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"); $ft3 = $week_n[date("w",$ft2)]; $prog_radiko = array( "ch" => "$ch", "name" => "$name", "title" => "$title", "artist" => "$artist", "desc" => "$desc", "info" => "$info", "time" => "$ft", "day" => "$ft3", "genre" => "$genre", "genrec" => "$genrec" ); $failed_record = $prog_xml->failed_record; $in_ng = $prog_xml->ts_in_ng; $out_ng = $prog_xml->ts_out_ng; if ($tf == 1) { if ($failed_record == 0 && $in_ng == 2 && $out_ng == 2) { continue; } } if ($ngflag == 1) { if ($failed_record == 0 && $in_ng == 0 && $out_ng == 0) { continue; } if (!valid_chk($ex_radiko, $ch)) { continue; } $nhkflag = 0; foreach ($radiru_callsign_r1 as $nhk) { if (strpos($ch, $nhk) !== false) { $nhkflag = 1; break; } } if ($nhkflag == 1) { continue; } $hit = "ng"; $kw = "$failed_record $in_ng $out_ng"; } else { if (!valid_chk($ex_radiko, $ch)) { continue; } $hit = rf_hit($prog_xml,$prog_radiko,$keyw,$kwdat_ng); } if ($hit == "") { continue; } $kw = $hit; $prog_id= $prog_xml['id']; $to = $prog_xml['to']; $dur = $prog_xml['dur']; $img = $prog_xml->img; $title = fn_edit($title); $idx = $ch."_".$title."_".$ft; $artist = fn_edit($artist); if ($artist == "") { $artist = $dlmt; } if ($img == "") { $img = $dlmt; } if ($genrec == "") $genrec = $dlmt; if ($genre == "") $genre = $dlmt; $musiclist = $dlmt; $dur = sprintf("%05d", $dur); $wdata = rf_make_wdata($ft, $to, $dur, $failed_record, $in_ng, $out_ng, $ch, $title, $artist, $img, $kw, $prog_id, $dlmt, $dlmt, $area_code, $dlmt, $genre, $genrec, $musiclist); if (!array_key_exists($idx, $rsvdata)) { $rsvdata[$idx] = $wdata; $rsv_cnt++; if ($rmax != 0 && $rsv_cnt >= $rmax) { echo_msg_temp(1,"Reservation over ( >= $rmax )"); break 3; } } } } } $rsv = count_73($rsvdata); $dt11 = date("Y/m/d H:i:s", $dt1); $dt21 = date("Y/m/d H:i:s", $dt1+$cnt-1); echo_msg(0, ""); echo_msg(0, "Date   : $dt11 - $dt21"); echo_msg(0, "Program: $ttl"); echo_msg(0, "Reserve: $rsv"); echo_msg(0, ""); return $rsvdata; } function rf_radiko_station($area) { global $area_code; global $prog_url; global $prog_retry; global $prog_wait; auth_ex(0); $nw = time(); $xml = rf_get_schedule_radiko($nw, 1, $area, 0); $stationdata = array(); foreach ($xml[0]->stations->station as $station) { $station_xml = simplexml_load_string($station->asXml()); $ch = $station_xml['id']; $chname = $station_xml->name; $stationdata["$ch"] = "$chname"; } return $stationdata; } function rf_radiko_areajp($area) { global $nowarea; $authtoken = auth_ex(0); if ($authtoken == null) { echo_msg(2, "auth error"); exit; } $ar = explode(",", $nowarea); return $ar; } function rf_radiko_normal_auth($force) { global $hls_type; global $auth_token; global $auth_token_dat; global $auth_life_time; global $home_area_code; global $area_code; global $nowarea; if ($hls_type == 1) { $ltime = ext_device_life_time(); } else { $ltime = $auth_life_time; } if ($ltime < 0) { $ltime = 0; } if ($ltime > 3600) { $ltime = 3600; } if (($dat = rf_get_auth()) != null) { $auth_token = $dat[1]; $home_area_code = $dat[2]; $area_code = $dat[2]; $nowarea = $dat[2].",".$dat[3]; if ($force == 0) { $nwdt = time(); $mkdt = strtotime($dat[0]); $diff = $nwdt - $mkdt; if ($diff >= 0 && $diff < $ltime) { return $auth_token; } } } $head = make_fn("auth"); if ($hls_type == 1) { $auth_token = rf_radiko_auth_hls_type1($head); } else { $auth_token = rf_radiko_hls(0,0); if ($auth_token === false) $auth_token = null; } if ($auth_token == null) { echo_msg(2, "auth_ex error"); return $auth_token; } $home_area_code = $area_code; rf_put_auth($auth_token); return $auth_token; } function rf_radiko_premium_auth($area) { global $auth_type; global $auth_token; global $auth_token_dat; global $auth_life_time; global $home_area_code; global $area_code; global $nowarea; global $premium_area; global $premium_autologin; global $standby_time_flu; $pchk = premium_check(); switch ($pchk) { case 1: if($premium_autologin == "y") { if (premium_logincheck() === false) { premium_login(); } } $head = make_fn("auth"); $authtoken = rf_radiko_hls(0,1); if ($authtoken === false) $authtoken = null; fin_unlink($head); break; case 2: if (!function_exists('rf_ext_ver')) { echo_prn(1, "--- premium test-mode ---"); echo_prn(1, "Area-free programs cannot be recorded."); return null; } $ver = rf_ext_ver(); if ($ver === false) { echo_prn(1, "--- premium test-mode ver. error ---"); return null; } echo_prn(1, "--- premium test-mode rf_ext Ver. ".$ver); $head = make_fn("auth"); $authtoken = rf_radiko_auth_hls_f($area, $head); fin_unlink($head); break; default: return null; break; } $area_code = $premium_area; $pref = premium_getpref(); $nowarea = "$area_code,$pref"; return $authtoken; } function rf_ext_ver() { global $svcmode; if ($svcmode["service_ext"] == 1) { $ver = "1.20"; return $ver; } return false; } 