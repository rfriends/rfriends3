<?php
 function rfmenu_rec_abort() { global $tmpdir; $nw = time(); $fmt_data = rfmenu_rec($nw, 1, 0); $n = count_73($fmt_data); if ($n < 1) { echo_msg(2, "実行中の録音がありません。"); rf_pause(); return; } $no = array(); if ($n > 1) { $nn = 0; foreach($fmt_data as $dt) { $nn++; echo_menu(2,"$nn $dt",1); } echo_scr(2, ""); $ans0 = echo_ask(2, "録音を中止する番号を選択してください。(1-$n): "); echo_msg(2, ""); $ans = rfmenu_check_range($ans0,1,$n); if ($ans === false) { echo_msg(2,"入力エラー"); rf_pause(); return; } } else { $ans = 1; } $fmt = ltrim($fmt_data[$ans - 1]); $fmt = str_replace("  "," ",$fmt); $fmt = str_replace("  "," ",$fmt); echo_msg(2, "$fmt"); echo_msg(2, ""); $ans = echo_yesno(2, "録音中止しますか? (y/N): "); echo_msg(2, ""); if ($ans == "y" || $ans == "Y") { rfmenu_rec_abort_ex($fmt); rf_pause(); } } function rfmenu_rec_abort_ex($fmt) { global $tmpdir; $dat = explode(" ", $fmt); $pid = $dat[0]; $ret = rfgw_rec_can($pid); $parts = rfgw_pathinfo($dat[2]); $fnm = $parts['filename']; $dt = date("Y").substr($fnm,0,4)."_".substr($fnm,5,4)."00_".substr($fnm,10,4)."00"; $fnm2 = $dt."_".substr($fnm,15); $fn = $tmpdir.$fnm2.".can"; rf_touch($fn); rf_error_log($fn); } function rfmenu_rec_abort_all() { global $tmpdir; $nw = time(); $fmt_data = rfmenu_rec($nw, 1, 0); $n = count_73($fmt_data); if ($n < 1) { echo_msg(2, "実行中の録音がありません。"); return $n; } foreach($fmt_data as $dt) { $fmt = ltrim($dt); $fmt = str_replace("  "," ",$fmt); $fmt = str_replace("  "," ",$fmt); echo_msg(2, "$fmt"); $dat = explode(" ", $fmt); $pid = $dat[0]; $ret = rfgw_rec_can($pid); $parts = rfgw_pathinfo($dat[3]); $fnm = $parts['filename']; $fn = $tmpdir.$fnm.".can"; rf_touch($fn); } return $n; } function rfmenu_play_piddata() { if (($piddata = rfgw_ffplay_pid()) === false) return ""; if (count_73($piddata) < 1) return ""; $p = explode(",",$piddata[0]); return $p[1]; } function rfmenu_play_abort($mode) { if ($mode == 1) { if (($piddata = rfgw_ffplay_pid()) === false) return; if (rf_ffplay_pid_disp($piddata) < 1) return; rf_ffplay_pid_can($piddata); return; } $piddata = rfgw_ffplay_pid(); if ($piddata === false) { echo_msg(2,"エラーが発生しました。"); rf_pause(); return; } $n = rf_ffplay_pid_disp($piddata); if ($n < 1) { echo_msg(2, ""); echo_msg(2, "再生中のプロセスがありません。"); rf_pause(); return; } echo_msg(2, ""); $ans = echo_yesno(2, "再生を中止しますか? (y/N): "); if ($ans != "y" && $ans != "Y") { return; } echo_msg(2, ""); rf_ffplay_pid_can($piddata); echo_msg(2, ""); echo_msg(2, "再生を中止しました。"); rf_pause(); } function rfmenu_play_abort_all() { $piddata = rfgw_ffplay_pid(); if ($piddata === false) { return false; } $n = count_73($piddata); if ($n < 1) { return true; } rf_ffplay_pid_can($piddata); return true; } function rf_ffplay_pid_can($piddata) { foreach($piddata as $pd) { $p = explode(",",$pd); $pid = $p[0]; if (count_73($p) > 1) $pn = $p[1]; $ret = rfgw_rec_can($pid); } } function rf_ffplay_pid_disp($piddata) { if ($piddata === false) { return 0; } $n = count_73($piddata); if ($n < 1) { return 0; } echo_scr(2, ""); foreach($piddata as $pd) { $p = explode(",",$pd); $pid = $p[0]; $ch = $p[1]; $pn = $p[2]; $fmt = sprintf("%6s On air : %s", $pid,$ch); echo_msg(2,$fmt); } return $n; } function rfmenu_info_use() { global $usrdir; global $tmpdir; global $rftrans; global $rftrans_dir; global $DS; global $storage_control_exec; global $storage_control_disk; global $storage_control_count; global $storage_control_exec_tr; global $storage_control_disk_tr; global $storage_control_count_tr; echo_msg(2, "録音ディレクトリ: $usrdir"); $w = rf_calc_width() - 3; echo_msg(2, str_repeat("-", $w)); rfmenu_info_use_s($usrdir,2); echo_msg(2, str_repeat("-", $w)); echo_msg(2, "storage_control_exec : $storage_control_exec"); echo_msg(2, "storage_control_disk : $storage_control_disk"); echo_msg(2, "storage_control_count: $storage_control_count"); echo_msg(2, str_repeat("-", $w)); if ($rftrans == 2) { echo_msg(2, ""); echo_msg(2, "transdir: $rftrans_dir"); $w = rf_calc_width() - 3; echo_msg(2, str_repeat("-", $w)); rfmenu_info_use_s($rftrans_dir,2); echo_msg(2, str_repeat("-", $w)); echo_msg(2, "storage_control_exec_tr : $storage_control_exec_tr"); echo_msg(2, "storage_control_disk_tr : $storage_control_disk_tr"); echo_msg(2, "storage_control_count_tr: $storage_control_count_tr"); echo_msg(2, str_repeat("-", $w)); } echo_msg(2,""); echo_msg(2, "tmpディレクトリ: $tmpdir"); $w = rf_calc_width() - 3; $fmt5 = "%-9s:%10s"; $free_space = disk_free_space($tmpdir); $fs = rfmenu_adjust_unit($free_space, 1); echo_msg(2, sprintf($fmt5, "free", $fs)); echo_msg(2, str_repeat("-", $w)); rf_pause(); } function rfmenu_info_dir($typ) { global $rfriends; global $base; global $cfgdir; global $tmpdir; global $usrdir; global $kwdir; global $logdir; global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir; global $kwbackupdir; global $dir_log; global $dir_radiko; global $dir_radiru; global $dir_timefree; global $dir_radiru_vod; global $dir_radiru_gogaku; global $dir_kw; global $dir_kwbackup; global $multi_sw; $dirlist = array( array("logdir" , "ログ($dir_log)", "$logdir"), array("radiko_recdir" , "ラジコ($dir_radiko)", "$radiko_recdir"), array("radiru_recdir" , "らじる($dir_radiru)", "$radiru_recdir"), array("timefree_recdir" , "タイムフリー($dir_timefree)", "$timefree_recdir"), array("radiru_vod_recdir" , "らじる聞き逃し($dir_radiru_vod)", "$radiru_vod_recdir"), array("radiru_gogaku_recdir" , "らじるゴガク($dir_radiru_gogaku)", "$radiru_gogaku_recdir") ); if ($typ == 1) { $dirlist[] = array("kwbackupdir" , "バックアップ($dir_kwbackup)", "$kwbackupdir"); } $rfriends_ver = trim(file_get_contents($base.$rfriends)); $lst = rfgw_info_dir(); $dirlist = array_merge($dirlist, $lst); $flist = array(); foreach($dirlist as $key => $value) { $flist[] = $value[1]; } $opt = array( "title" => "ディレクトリ($usrdir)", "input_type" => 0, "page_control" => 0, "return_mes" => "終了", "input_mes" => "どれを選択しますか" ); if ($typ == 0) { $selmes = "内容を表示しますか"; } else { $selmes = "どれを削除しますか"; } $opt2 = array( "title" => "ファイル()", "input_type" => 0, "page_control" => 1, "return_mes" => "戻る", "input_mes" => $selmes, "mode" => 0, "multi" => $multu_sw, "confirm" => 0, "ht_selid" => "" ); while (1==1) { $no = rf_pctl_disp($flist, $opt); $ans = $no[0]; if ($ans == "r") { break; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); break; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); break; } $dir = $dirlist[$ans - 1][2]; $flist2 = rf_pctl_lists($dir, "*"); if (count_73($flist2) < 1) { continue; } $opt2["title"] = "ファイル($dir)"; $no = rf_pctl_disp($flist2, $opt2); echo_msg(2, ""); $ans = $no[0]; if ($ans == "r") { continue; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); continue; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); continue; } $edit_fn = $dir.$flist2[$ans - 1]; echo_msg(2, $edit_fn); if ($typ == 0) { $ret = rf_play_file($edit_fn); if ($ret != 0) { echo_msg(2, "表示できませんでした。"); } } else { echo_scr(2,""); $ans = echo_yesno(2, "削除しますか? (y/N): "); if ($ans == "Y" || $ans == "y") { fin_unlink($edit_fn); echo_msg(2, "削除しました。"); } } rf_pause(); echo_scr(2,""); } } function rfmenu_info_daily() { global $sch_rsv_radiko; global $sch_rsv_radiru; global $sch_rsv_timefree; global $sch_rsv_radiru_vod; global $sch_rsv_radiru_gogaku; global $sch_rsv_podcast; global $ui_mode; global $ht_jump_addr; global $ht_jump_btn2; global $ht_jump_btn1_label; global $ht_jump_btn2_label; global $ex_daily; $lists = array(); $ttl = "デイリー処理スイッチの状態"; $lists["ラジコ予約"] = "$sch_rsv_radiko"; $lists["らじる予約"] = "$sch_rsv_radiru"; $lists["タイムフリー録音"] = "$sch_rsv_timefree"; $lists["らじる聞き逃し録音"] = "$sch_rsv_radiru_vod"; $lists["らじるゴガク録音"] = "$sch_rsv_radiru_gogaku"; $lists["ポッドキャスト"] = "$sch_rsv_podcast"; $lists["クリーン処理"] = "on"; if ($ui_mode ==2 ) { msgx("<p>$ttl</p>".PHP_EOL); $minw = 'style="min-width:350px;line-height:150%"'; msgx("<form class=asklist method=post action='$ht_jump_addr' $minw>".PHP_EOL); $n = 0; foreach($lists as $key => $val) { if ($val == 'on') $chkd = "checked"; else $chkd = ""; msgx("<input type='checkbox' name='check[]' value=\"$n\" $chkd> $key<br/>".PHP_EOL); $n++; } msgx("<br/>".PHP_EOL); msgx("<button class=btn_ex type=submit>実行</button>"); msgx("<input type='hidden' name=subno  value=0103>"); msgx("<input type='hidden' name=val    value=1>"); msgx("<input type='hidden' name=exname value=menu_s.html>"); msgx("<INPUT type='hidden' name='sno'  value='s03'>"); msgx("</form>"); return; } rf_tabledisp($ttl,$lists,"left"); echo_msg(2,""); $msg = "デイリー処理を今から実行しますか? (y/N): "; $ans = echo_yesno(2, $msg); echo_scr(2, ""); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_daily, -9, 0, 0, 0); echo_msg(2, " デイリー処理を開始しました"); rf_pause(); } } function rfmenu_info_double($ty) { global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir ; global $ex_radiko; global $ex_radiru; echo_msg(2,"以下のパターンの比較を行います。"); echo_msg(2, ""); switch($ty) { case 1: echo_msg(2,"完全一致"); echo_msg(2,"[ 1. timefree      <-> radiko ]"); echo_msg(2,"[ 2. radiru        <-> radiko ]"); echo_msg(2,"[ 3. radiru_vod    <-> radiko ]"); echo_msg(2,"[ 4. radiru_vod    <-> radiru ]"); echo_msg(2, ""); echo_msg(2, "完  全一致ファイルはsameディレクトリに移動。"); break; case 2: echo_msg(2,"番組名一致"); echo_msg(2,"[ 1. radiru        <-> radiru ]"); echo_msg(2,"[ 2. radiru_vod    <-> radiru_vod ]"); echo_msg(2,"[ 3. radiru_gogaku <-> radiru_gogaku ]"); echo_msg(2,"[ 4. radiru_vod    <-> radiru ]"); echo_msg(2, ""); echo_msg(2, "番組名一致ファイルはpartディレクトリに移動。"); break; default: return; break; } echo_msg(2, ""); echo_msg(2, "この機能は移動処理のため、意図しない処理が行われても"); echo_msg(2, "移動先のディレクトリから元に戻せます。"); echo_msg(2, ""); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans != "y" && $ans != "Y") { return; } rf_info_double_s($ty); rf_pause(); } function rf_info_double_s($ty) { global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir ; global $ex_radiko; global $ex_radiru; switch($ty) { case 1: $cnt = 0; echo_msg(2, ""); echo_msg(2,"完全一致"); echo_msg(2,"[ 1. timefree      <-> radiko ]"); $cnt += rf_compare_delete(1,$timefree_recdir, $radiko_recdir,0,$ex_radiko); echo_msg(2,"[ 2. radiru        <-> radiko ]"); $cnt += rf_compare_delete(1,$radiru_recdir, $radiko_recdir,0,$ex_radiko); echo_msg(2,"[ 3. radiru_vod    <-> radiko ]"); $cnt += rf_compare_delete(1,$radiru_vod_recdir, $radiko_recdir,0,$ex_radiko); echo_msg(2,"[ 4. radiru_vod    <-> radiru ]"); $cnt += rf_compare_delete(1,$radiru_vod_recdir, $radiru_recdir,0,$ex_radiru); break; case 2: $cnt = 0; echo_msg(2, ""); echo_msg(2,"番組名一致"); echo_msg(2,"[ 1. radiru        <-> radiru ]"); $cnt += rf_compare_delete(1,$radiru_recdir, $radiru_recdir,1,$ex_radiru); echo_msg(2,"[ 2. radiru_vod    <-> radiru_vod ]"); $cnt += rf_compare_delete(1,$radiru_vod_recdir, $radiru_vod_recdir,1,$ex_radiru); echo_msg(2,"[ 3. radiru_gogaku <-> radiru_gogaku ]"); $cnt += rf_compare_delete(1,$radiru_gogaku_recdir,$radiru_gogaku_recdir,1,$ex_radiru); echo_msg(2,"[ 4. radiru_vod    <-> radiru ]"); $cnt += rf_compare_delete(1,$radiru_vod_recdir, $radiru_recdir,1,$ex_radiru); break; default: return; break; } echo_msg(2, ""); echo_msg(2, "計 $cnt 個のファイルを移動しました。"); } function rfmenu_info_double_del() { echo_msg(2,"以下のディレクトリ下のファイルを削除します。"); echo_msg(2, ""); echo_msg(2,"[ 1. radiko     : same]"); echo_msg(2,"[ 2. radiru     ; same,part]"); echo_msg(2,"[ 3. radiru_vod : same,part]"); echo_msg(2, ""); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans != "y" && $ans != "Y") { return; } rfmenu_info_double_del_s(); rf_pause(); } function rfmenu_info_double_del_s() { global $radiko_recdir; global $radiru_recdir; global $radiru_vod_recdir; $dirs = array( $radiko_recdir.'same', $radiru_recdir.'same', $radiru_recdir.'part', $radiru_vod_recdir.'same', $radiru_vod_recdir.'part' ); $n0 = 0; foreach($dirs as $dir) { $chk = substr($dir,-4); if ($chk != 'same' && $chk != 'part') { echo_msg(2,"error $dir"); return -1; } $n = fin_unlink_all($dir); echo_msg(2, ""); echo_msg(2, "$dir"); echo_msg(2, "$n 個のファイルを削除しました。"); $n0 += $n; } echo_msg(2, ""); echo_msg(2, "計 $n0 個のファイルを削除しました。"); } function rfmenu_info_delivery() { global $scrdir; global $logdir; echo_msg(2, "この機能は番組配送キーワードに基づき、コピー/移動処理を行います。"); echo_msg(2, "対象はusrdirに存在するファイルです。"); $users = rf_get_keyword("dlvy_users"); echo_scr(2, ""); if (count_73($users) == 0) { echo_msg(2, "番組配送キーワードにユーザが存在しません。"); rf_pause(); return; } else { echo_msg(2, "users :"); foreach($users as $user) { echo_msg(2, " $user"); } } echo_msg(2, ""); $flist = array(); $flist[] = array('title' => "過去１日分", 'val' => 1); $flist[] = array('title' => "過去１週間分",'val' => 2); $flist[] = array('title' => "過去１カ月分",'val' => 3); $ans0 = echo_ask_list(2, "番号を選択してください (1-3) : ","処理一覧","選択",0,1,$flist); if ($ans0 == "") { return; } $ans1 = rfmenu_check_range($ans0,0,$cnt); if ($ans1 === false) { return; } $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans != "y" && $ans != "Y") { return; } echo_msg(2, ""); rfmenu_info_delivery_s($ans1); echo_msg(2, "番組配送処理を実行しました。"); rf_pause(); } function rfmenu_info_delivery_s($ans1) { global $scrdir; global $logdir; $nam = "rfriends_exec_delivery"; $opt = "11 \"$ans1\""; $ex = "ex_rfriends"; rfgw_batsh_sub($scrdir, $ex, $opt, 1, 1); } function rfmenu_info_backup() { global $rfbackup; global $rfbackup_mode; global $rfbackup_dir; global $rfmove_dup; global $usrdir; global $scrdir; echo_msg(2,"バックアップ処理スイッチの状態"); echo_msg(2,""); echo_msg(2, "対象日付           : $rfbackup 日以上前"); echo_msg(2, "バックアップモード : $rfbackup_mode"); echo_msg(2, "ディレクトリ       : $usrdir -> $rfbackup_dir"); echo_msg(2, "重複ファイル処理   : $rfmove_dup"); echo_msg(2,""); if ($rfbackup <= 0) { echo_msg(2, " バックアップ処理がOFFのため終了します。"); rf_pause(); return; } $msg = "バックアップ処理を今から実行しますか? (y/N): "; $ans = echo_yesno(2, $msg); echo_scr(2, ""); if ($ans != "y" && $ans != "Y") return; $ans1 = "dummy"; $nam = "rfriends_exec_backup"; $opt = "15 \"$ans1\""; $ex = "ex_rfriends"; rfgw_batsh_sub($scrdir, $ex, $opt, 1, 1); echo_msg(2, " バックアップ処理を開始しました。"); rf_pause(); } function rfmenu_rec_dsp($ex_type,$auto) { global $schradiko_head; global $schradiru_head; global $at_que_no; global $dlmt; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $launch_at_head; $ret = true; while($ret === true) { $rsvdata = array(); $exque = get_at_que_no($at_que_no); switch ($ex_type) { case $ex_radiko: $head = $schradiko_head; $atqueno = $exque[0]; break; case $ex_radiru: $head = $schradiru_head; $atqueno = $exque[1]; break; default: return; } $rsvdata = rfgw_rec_dsp($ex_type, $head, $atqueno,$auto); $wdat = rfmenu_wdata_org($rsvdata); if (count_73($wdat) > 0) { $ret = rfmenu_rec_del($ex_type, $wdat, $head,$auto); } else { $ret = false; if ($auto == 0) { echo_msg(2, "予約がありません。"); rf_pause(); } } } } function rfmenu_rec_today($ex_type, $kw) { global $scrdir; global $rsvdir; global $phpdir; global $nowarea; global $area_code; global $radiru_ch; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $radiko_today_disp_offset; global $radiko_today_disp_dur; global $radiru_today_disp_offset; global $radiru_today_disp_dur; global $radiko_reserve_now; global $radiru_reserve_now; switch ($ex_type) { case $ex_radiko: $offs = $radiko_today_disp_offset; $dur = $radiko_today_disp_dur; $rd = $radiko_reserve_now; $authtoken = auth_ex(0); echo_msg(2, "area : $nowarea ($area_code)  $rd day(s)"); echo_msg(2,""); $rsvdata = rfmenu_radiko_rsv_now("",$rd); break; case $ex_radiru: $offs = $radiru_today_disp_offset; $dur = $radiru_today_disp_dur; $rd = $radiru_reserve_now; echo_msg(2,"期間 : $rd day(s)"); echo_msg(2,""); $rsvdata = array(); foreach ($radiru_ch as $netch) { if (!valid_chk($ex_radiru, $netch)) { continue; } $rsvd = rfmenu_radiru_rsv_now($netch,$rd); $rsvdata = array_merge($rsvdata, $rsvd); } break; default: return; break; } rfmenu_rec_sel($ex_type, $rsvdata); } function rfmenu_rec_ch($ex_type) { global $scrdir; global $rsvdir; global $phpdir; global $nowarea; global $home_area_code; global $area_code; global $nowarea; global $radiko_timeofbegin; global $schradiko_head; global $schradiru_head; global $radiru_ch; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; $n = 0; $flist = array(); switch ($ex_type) { case $ex_radiko: case $ex_timefree: $sch_name = "radiko"; $authtoken = auth_ex(0); echo_prn(1, "area : $nowarea ($area_code)"); $rk_sta = rf_radiko_station($area_code); foreach ($rk_sta as $key => $val) { if (!valid_chk($ex_radiko, $key)) { unset($rk_sta["$key"]); continue; } if ($ex_type == $ex_timefree) { $pos = strpos($val,"NHK"); if ($pos !== false) continue; } $n++; $flist[] = array('title' => $val,'val' => $key); } break; case $ex_radiru: case $ex_radiru_vod: $sch_name = "radiru"; $radiru_ch2 = array(); foreach ($radiru_ch as $key) { if (!valid_chk($ex_radiru, $key)) { continue; } $n++; $flist[] = array('title' => $key,'val' => $key); } break; default: return false; break; } if ($n < 1) { echo_msg(2, "リストが空です"); rf_pause(); return ""; } if ($n == 1) { $ch = $flist[0]['title']; return $ch; } for($i=0;$i<$n;$i++) { $j = $i + 1; $lst = sprintf("%2d %-8s : %s",$j,$flist[$i]['title'],$flist[$i]['val']); echo_menu(2,$lst,1); } $ans = echo_ask_list(2, "CHの番号を入力してください (1-$n) : ","CH一覧","選択",0,1,$flist); if ($ans == "" || $ans == "R" || $ans == "r") { return ""; } $ans = rfmenu_check_range($ans,1,$n); if ($ans === false) { echo_msg(2,"入力エラー"); rf_pause(); return; } $ch = $flist[$ans-1]['val']; return $ch; } function rfmenu_rec_ch_ex($ex_type, $ch) { global $scrdir; global $rsvdir; global $phpdir; global $nowarea; global $area_code; global $radiko_timeofbegin; global $schradiko_head; global $schradiru_head; global $radiru_ch; global $radiru_area_1; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $radiko_timeofbegin; global $radiru_timeofbegin; global $radiko_reserve_now; global $radiru_reserve_now; $dt = time(); $h = date("H", $dt); switch ($ex_type) { case $ex_radiko: $rd = $radiko_reserve_now; if ($h >=0 && $h < $radiko_timeofbegin) { $dt = strtotime("-1 day"); } $rsvdata = rfmenu_radiko_program($ch, $dt, $rd); $head = $schradiko_head; echo_msg(2, "CH : $ch  $rd day(s)"); break; case $ex_radiru: $rd = $radiru_reserve_now; if ($h >=0 && $h < $radiru_timeofbegin) { $dt = strtotime("-1 day"); } $rsvdata = rfmenu_radiru_program($ch, $dt, $rd); $head = $schradiru_head; echo_msg(2, "CH : $ch ($radiru_area_1)  $rd day(s)"); break; default: $rsvdata = array(); break; } echo_msg(2, ""); rfmenu_rec_sel($ex_type, $rsvdata); } function rfmenu_rec_ch_ex_now($ex_type, $ch) { global $radiru_area_1; global $ex_radiko; global $ex_radiru; global $radiko_timeofbegin; global $radiru_timeofbegin; $dt = time(); $h = date("H", $dt); switch ($ex_type) { case $ex_radiko: if ($h >=0 && $h < $radiko_timeofbegin) { $dt = strtotime("-1 day"); } $rsvdata = rfmenu_radiko_program($ch, $dt, 1); echo_msg(2, "CH : $ch"); break; case $ex_radiru: if ($h >=0 && $h < $radiru_timeofbegin) { $dt = strtotime("-1 day"); } $rsvdata = rfmenu_radiru_program($ch, $dt, 1); echo_msg(2, "CH : $ch ($radiru_area_1)"); break; default: return; break; } $cnt = count_73($rsvdata); if ($cnt == 0) return; $rsv = reset($rsvdata); $para = get_para($rsv, $ex_type); echo_msg(2," $para[8]"); echo_msg(2, ""); $flg = rfgw_check_sshd(); rfgw_reconnect_bd(); echo_msg(2, "開始"); rfriends_live($ex_type,$para,$flg); rf_pause(); } function rf_menu_play($typ) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir; global $rec_extension; global $ui_mode; switch ($typ) { case $ex_radiko: $mes = "ラジコ録音データ"; $dir = $radiko_recdir; break; case $ex_radiru: $mes = "らじるらじる録音データ"; $dir = $radiru_recdir; break; case $ex_timefree: $mes = "タイムフリー録音データ"; $dir = $timefree_recdir; break; case $ex_radiru_vod: $mes = "らじるらじる聞き逃し録音データ"; $dir = $radiru_vod_recdir; break; case $ex_radiru_gogaku: $mes = "らじるらじるゴガク録音データ"; $dir = $radiru_gogaku_recdir; break; default: return; break; } $typ = "*.".$rec_extension; $flist = rf_pctl_lists($dir, $typ); $cnt = count_73($flist); if ($cnt < 1) { return; } sort($flist); $opt = array( "title" => "ファイル一覧($cnt 件)", "input_type" => 0, "page_control" => 1, "return_mes" => "終了", "input_mes" => "どれを再生しますか", "mode" => 1, "multi" => 0, "confirm" => 0, "ht_selid" => "" ); if ($ui_mode == 2) { ht_ask_list($flist,$opt); $no[0] = "r"; } else { $no = rf_pctl_disp($flist, $opt); } echo_msg(2, ""); $ans = $no[0]; if ($ans == "r") { return; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); return; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); return; } $edit_fn = $dir.$flist[$ans - 1]['val']; echo_msg(2, $edit_fn); $ret = rf_play_file($edit_fn); if ($ret != 0) { echo_msg(2, "This type is not supported"); } rf_pause(); } function rf_progran_id($ex_type) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; switch($ex_type) { case $ex_radiko: case $ex_timefree: echo_msg(2,"P001 ニュース・天気・交通　P013 経済"); echo_msg(2,"P002 スポーツ　　　　　　　P014 落語"); echo_msg(2,"P003 情報　　　　　　　　　P015 教養"); echo_msg(2,"P004 ドラマ　　　　　　　　P016 宗教"); echo_msg(2,"P005 音楽　　　　　　　　　P017 健康"); echo_msg(2,"P006 バラエティ　　　　　　P018 ショッピング"); echo_msg(2,"P007 トーク　　　　　　　　P019 公営競技"); echo_msg(2,"P008 アニラジ　　　　　　　P020 株/投資"); echo_msg(2,"P009 ドキュメンタリー　　　P021 ライフスタイル"); echo_msg(2,"P010 医療　　　　　　　　　P022 映画"); echo_msg(2,"P011 福祉　　　　　　　　　P023 劇場/公演"); echo_msg(2,"P012 趣味/教育"); break; case $ex_radiru: echo_msg(2,"G00 ニュース／報道　　　G06 映画"); echo_msg(2,"G01 スポーツ　　　　　　G07 アニメ／特撮"); echo_msg(2,"G02 情報／ワイドショー　G08 ドキュメンタリー／教養"); echo_msg(2,"G03 ドラマ　　　　　　　G09 劇場／公演"); echo_msg(2,"G04 音楽　　　　　　　　G10 趣味／教育"); echo_msg(2,"G05 バラエティ　　　　　G11 福祉"); break; default: break; } } function rfmenu_rec_kwsrc_sub($ex_type,$kw,$val2) { global $nowarea; global $area_code; global $schradiko_head; global $schradiru_head; global $radiru_ch; global $radiru_area_1; global $radiru_vod_url; global $radiru_gogaku_url; global $radiru_gogaku_code; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $rsv_max; global $radiko_timeofbegin; global $radiru_timeofbegin; global $radiko_reserve_daily; global $radiko_reserve_now; global $radiru_reserve_daily; global $radiru_reserve_now; global $ui_mode; if ($kw == "") { return; } echo_msg_temp(2, ""); echo_msg_temp(2, "キーワード : \"$kw\""); echo_msg_temp(2, ""); $range = rfmenu_rec_kwsrc_range($ex_type,$val2); $dt = $range[0]; $cnt = $range[1]; $rmax = $range[2]; $nk = $cnt * 24; $cnt2 = $cnt - 1; $d_en = strtotime("$cnt2 day", $dt); $fmt1 = rfmenu_rec_date_fmt2($dt); $fmt2 = rfmenu_rec_date_fmt2($d_en); $kwdat = array(); if ($cnt > 0) { echo_msg_temp(2, "検索中 [$fmt1 - $fmt2] (最大 $rmax)..."); } else { echo_msg_temp(2, "検索中 [全範囲] (最大 $rmax)..."); } echo_msg_temp(2, "しばらくお待ちください..."); $shrtim = microtime(true); $kwdat[0] = $kw; $kwdat_ng = array(); $rsvdata = array(); switch ($ex_type) { case $ex_radiko: $authtoken = auth_ex(0); echo_msg_temp(2, "area : $nowarea ($area_code)"); $head = $schradiko_head; $ngflag = 0; if ($kw == "#ng") { $ngflag = 1; } $rsvdata = radiko_rsv_ex($area_code, $kwdat,$kwdat_ng, $dt, $cnt, $nk, $ngflag, 0,$rmax); break; case $ex_radiru: $head = $schradiru_head; $parea = $radiru_area_1; $rsvdata = radiru_rsv_ex($kwdat,$kwdat_ng, $dt, $cnt, $nk, $parea, $radiru_ch); break; case $ex_radiru_vod: $head = $schradiru_head; $parea = $radiru_area_1; $url = $radiru_vod_url; $md = 1; if ($ui_mode == 2) $md = 0; $nhk_ch = rf_nhk_list(); $rsvdata = array(); $nch = $nhk_ch; if ($ui_mode == 2) $nch = explode(" ",$val2); if (count_73($nch) == 0) break; if (count_73($nch) == 3) { $mcode_sel = 0; $rsvdata = radiru_vod_rsv_ex_new($dt, $cnt, $kwdat,$kwdat_ng, $mcode_sel, $md); } else { foreach($nch as $mcode_sel) { if ($mcode_sel == 5) echo_msg_temp(2,"r1 "); if ($mcode_sel == 6) echo_msg_temp(2,"r2 "); if ($mcode_sel == 7) echo_msg_temp(2,"r3 "); $rsvdata_t = radiru_vod_rsv_ex_new($dt, $cnt, $kwdat,$kwdat_ng, $mcode_sel, $md); $rsvdata = array_merge($rsvdata,$rsvdata_t); } $rsvdata = array_unique($rsvdata); } $cnt = count_73($rsvdata); break; case $ex_radiru_gogaku: $head = $schradiru_head; $parea = $radiru_area_1; $radiru_gogaku_code = get_gogaku_code(0); $url = $radiru_vod_url; $mcode_sel = -1; $md = 1; if ($ui_mode == 2) $md = 0; $rsvdata = radiru_vod_rsv_ex_new($dt, $cnt, $kwdat,$kwdat_ng, $mcode_sel, $md); rsort($rsvdata); break; case $ex_timefree: $authtoken = auth_ex(0); echo_msg_temp(2, "area : $nowarea ($area_code)"); $head = $schradiko_head; $ngflag = 0; if ($kw == "#ng") { $ngflag = 1; } $rsvdata = radiko_rsv_ex($area_code, $kwdat,$kwdat_ng, $dt, $cnt, 0, $ngflag, 1,$rmax); break; default: break; } $ehrtim = microtime(true); $ctim = floor(($ehrtim - $shrtim)*1000) / 1000; if ($ui_mode == 2) { return $rsvdata; } echo_msg(2, ""); $hit = count_73($rsvdata); if ($hit <= 0) { echo_msg_temp(2, "ヒットしませんでした。($ctim sec)"); rf_pause(); return false; } echo_msg_temp(2,"Keyword      : $kw"); echo_msg_temp(2,"Hit(s)       : $hit"); echo_msg_temp(2,"Elapsed time : $ctim sec"); echo_msg_temp(2, ""); switch ($ex_type) { case $ex_radiko: case $ex_radiru: rfmenu_rec_sel($ex_type, $rsvdata); break; case $ex_radiru_vod: case $ex_radiru_gogaku: case $ex_timefree: rfmenu_rec_sel($ex_type, $rsvdata); break; default: return; break; } } function rfmenu_rec_kwsrc_range($ex_type,$val2) { global $nowarea; global $area_code; global $schradiko_head; global $schradiru_head; global $radiru_ch; global $radiru_area_1; global $radiru_vod_url; global $radiru_gogaku_url; global $radiru_gogaku_code; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $radiko_timeofbegin; global $radiru_timeofbegin; global $radiko_reserve_daily; global $radiko_reserve_now; global $radiru_reserve_daily; global $radiru_reserve_now; global $premium_timefree30; global $ui_mode; global $rsv_max; $rmax = $rsv_max; $dt = time(); $hr = (int)date("H"); $cnt = 7; switch ($ex_type) { case $ex_radiko: if ($hr < $radiko_timeofbegin) { $dt = strtotime("-1 day", $dt); } $cnt = $radiko_reserve_now; if ($ui_mode == 2) $cnt = $val2; $nk = $cnt * 24; break; case $ex_radiru: if ($hr < $radiru_timeofbegin) { $dt = strtotime("-1 day", $dt); } $cnt = $radiru_reserve_now; if ($ui_mode == 2) $cnt = $val2; $nk = $cnt * 24; break; case $ex_radiru_vod: $dt =strtotime("-8 day", $dt); $cnt = 0; break; case $ex_radiru_gogaku: if ($hr < $radiru_timeofbegin) { $dt =strtotime("-15 day", $dt); $cnt = 0; } else { $dt =strtotime("-14 day", $dt); $cnt = 0; } break; case $ex_timefree: if ($val2 == 30) { if ($hr < $radiko_timeofbegin) { $dt =strtotime("-31 day", $dt); $cnt = 31; } else { $dt =strtotime("-30 day", $dt); $cnt = 31; } } else { if ($hr < $radiko_timeofbegin) { $dt =strtotime("-8 day", $dt); $cnt = 8; } else { $dt =strtotime("-7 day", $dt); $cnt = 8; } } $rmax = 0; break; default: break; } $r[0] = $dt; $r[1] = $cnt; $r[2] = $rmax; return $r; } function rfmenu_rec_kwsrc($ex_type) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $ui_mode; switch ($ex_type) { case $ex_radiko: $inp_mes = "キーワードまたはジャンル"; break; case $ex_timefree: $inp_mes = "キーワードまたはジャンル"; break; case $ex_radiru: $inp_mes = "キーワードまたはジャンル"; break; case $ex_radiru_vod: $inp_mes = "キーワード"; break; case $ex_radiru_gogaku: $inp_mes = "キーワード"; break; default: return; break; } rf_progran_id($ex_type); if ($ui_mode == 2) { $msg = $inp_mes."を入力してください。"; switch($ex_type) { case $ex_radiko; case $ex_radiru; ht_input($msg,2); break; case $ex_timefree; ht_input($msg,3); break; case $ex_radiru_vod; ht_input($msg,1); break; default: ht_input($msg,0); break; } return; } $sch = array(); $kw = echo_input(2, $inp_mes."を入力してください : "); rfmenu_rec_kwsrc_sub($ex_type,$kw,$sch); } function rfmenu_rec_kwdat($ex_type) { global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; switch ($ex_type) { case $ex_timefree: $mes = "タイムフリー録音（キーワードファイル）を開始しました"; break; case $ex_radiru_vod: $mes = "聞き逃し録音（キーワードファイル）を開始しました"; break; case $ex_radiru_gogaku: $mes = "ゴガク録音（キーワードファイル）を開始しました"; break; default: return false; break; } $ans1 = rfmenu_rec_date($ex_type); if ($ans1 === false) { return false; } $dt = $ans1[0]; $cnt = $ans1[1]; if ($cnt <= 0) { return true; } $ans = echo_yesno(2, "開始しますか ? (y/N) : "); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_type, 1, $dt, $cnt, ""); echo_msg(2, $mes); rf_pause(); } return true; } function rfmenu_radiru_area() { global $radiru_area_1; $stationdata = rf_radiru_station(); $flist = array(); foreach($stationdata as $key => $ttl) { $flist[] = array('title' => "　$ttl : $key",'val' => $key); } if (array_key_exists($radiru_area_1,$stationdata)) { echo_msg(2, "現在のエリア : $radiru_area_1"); } else { echo_msg(2, "現在のエリア : unknown"); } echo_msg(2, ""); $n = count_73($flist); for($i=0;$i<$n;$i++) { $lst = sprintf("%2d%s",$i+1,$flist[$i]['title']); echo_menu(2,$lst,1); } $ans = echo_ask_list(2, "CHの番号を入力してください (1-$n) : ","CH一覧","選択",0,1,$flist); if ($ans == "" || $ans == "R" || $ans == "r") { return ""; } $ans = rfmenu_check_range($ans,1,$n); if ($ans === false) { echo_msg(2,"入力エラー"); rf_pause(); return; } $area = $flist[$ans-1]['val']; radiru_putarea($area); $radiru_area_1 = $area; echo_msg(2, ""); echo_msg(2, "エリア : $radiru_area_1"); } function rfmenu_rec_ond() { global $tmpdir; global $radiru_recdir; global $radiru_vod_recdir; global $radiru_vod_url; global $radiru_gogaku_recdir; $rp = 0; $mcode_sel = rf_nhk_select(); if ($mcode_sel === false) { return; } $bc = rf_nhk_mcode2ch($mcode_sel); $ond = ond_corners(0,0,$bc); while ($rp == 0) { $rp = ond_select_new($ond, $mcode_sel); } } function rfmenu_rec_gogaku_new1($cycle) { global $radiru_gogaku_url; global $radiru_gogaku_code; global $radiru_gogaku_lang; global $radiru_vod_url; $url = $radiru_gogaku_url; $lang = rf_get_lang(); switch($cycle) { case "daily1": $ans = 1; $kz = explode(",", $lang[$ans-1]); $radiru_gogaku_lang = $kz[0]; $url = $kz[1]; $radiru_gogaku_code = rf_get_lang_detail($url); $mes = sprintf(" %2d %s", $ans, $radiru_gogaku_lang); break; case "daily3": $radiru_gogaku_code = array(); $nmax = count_73($lang); for ($i=1; $i<$nmax; $i++) { $kz = explode(",", $lang[$i]); $radiru_gogaku_lang = $kz[0]; $url = $kz[1]; $kouza = rf_get_lang_detail($url); $radiru_gogaku_code = array_merge($radiru_gogaku_code,$kouza); } $mes = "言語（他）"; break; default: break; } $mcode_sel = -1; $bc = rf_nhk_mcode2ch($mcode_sel); $ond = ond_corners(0,0,$bc); $ttl = count_73($ond); if ($ttl < 1) { echo_msg(2, "番組がありません。"); rf_pause(); return; } $rp = 0; while ($rp == 0) { $rp = ond_select_new($ond, $mcode_sel); } } function rf_get_node($html,$query) { $domDocument = new DOMDocument(); @$domDocument->loadHTML($html); $xpath = new DOMXPath($domDocument); $nodes = $xpath->query($query); return $nodes; } function gogaku_basic0_opt($ttl, $stream, $sta, $imgurl, $genre) { global $scrdir; global $DS; $st0 = $stream; $pic0 = $imgurl; $ttls = explode(' ',$ttl); if (count_73($ttls) == 3) { $t = str_replace('年','/',$ttls[1]); $t = str_replace('月','/',$t); $t = str_replace('日','/',$t); $dt = strtotime("$t"); } else { $dt = strtotime('20170101'); } $dt0 = date('YmdHs',$dt); $m_ttl = str_replace(' ','-',$ttl); $para[0] = $dt0; $para[1] = $dt0; $para[2] = 0; $para[3] = 0; $para[4] = 0; $para[5] = 0; $para[6] = $sta; $para[7] = $m_ttl; $para[8] = ";"; $para[9] = $pic0; $para[10] = ";"; $para[11] = $st0; $para[12] = ";"; $para[13] = ";"; $para[14] = ";"; $para[15] = ";"; return $para; } function rfmenu_rec_gogaku_new31_sel_pgm($m,$url,$sta,$img) { global $radiru_gogaku_genre; global $ex_radiru_gogaku; $html = file_get_contents($url.$m.'/1/'); $query = '//div[@class="kiso0-nav-week-wrapper"]//li/a'; $nodes = rf_get_node($html,$query); $n = count_73($nodes); $flist= array(); $query = '//div[@class="nol_audio_player"]'; for ($i=1;$i<=$n;$i++) { $html = file_get_contents($url.$m."/$i/"); $nodes = rf_get_node($html,$query); foreach ($nodes as $node) { $mttl = $node->getAttribute('data-title'); $m_url = $node->getAttribute('data-hlsurl'); $para = gogaku_basic0_opt($mttl, $m_url, $sta, $img, $radiru_gogaku_genre); $wdat = put_para($para, $ex_radiru_gogaku); $flist[] = array('title' => $mttl,'val' => $wdat); } } return $flist; } function rfmenu_rec_gogaku_new31($cycle) { global $scrdir; global $tmpdir; global $ex_radiru_gogaku; global $radiru_recdir; global $radiru_vod_recdir; global $radiru_vod_url; global $radiru_gogaku_recdir; global $radiru_gogaku_genre; global $DS; $fil = $scrdir."learning.xml"; $xml = file_get_contents($fil); $obj = simplexml_load_string($xml); $stream = $obj -> $cycle -> streaming; $url = $obj -> $cycle -> url; $imgurl = $obj -> $cycle -> img; $course = $obj -> $cycle -> course; $ans = 1; $ttl = $course[$ans-1] -> title; $lang = $course[$ans-1] -> language; $kouza = $course[$ans-1] -> kouza; $pic = $course[$ans-1] -> pic; $sta = $course[$ans-1] -> station; $img = $imgurl.$pic; $html = file_get_contents($url); $query = '//div[@class="kiso0-nav-selectmonth-wrapper-pc"]//dd/a'; $nodes = rf_get_node($html,$query); $flist = array(); for ($i=4;$i<=12;$i++) { $p[0]="0"; $p[1]="0"; $p[2]="0"; $p[3]=sprintf("2023%02d",$i); $flist[] = array('title' => $p[3],'val' => "$p[3],$url,$sta,$img"); } for ($i=1;$i<=3;$i++) { $p[0]="0"; $p[1]="0"; $p[2]="0"; $p[3]=sprintf("2024%02d",$i); $flist[] = array('title' => $p[3],'val' => "$p[3],$url,$sta,$img"); } $opt = array( "title" => "放送月一覧", "input_type" => 0, "page_control" => 1, "return_mes" => "戻る", "input_mes" => "放送月を選択してください", "mode" => 1, "multi" => 0, "confirm" => 0, "ht_selid" => "" ); $no = rf_pctl_disp($flist, $opt); $ans2 = $no[0]; if ($ans2 == "r") { return true; } if ($ans2 == "e") { echo_msg(2, "入力エラー"); rf_pause(); return true; } if ($ans2 == "z") { echo_msg(2, "リストが空です"); rf_pause(); return true; } $v = $flist[$ans2-1]['val']; $p = explode(',',$v); $m = $p[0]; $url = $p[1]; $sta = $p[2]; $img = $p[3]; $ttl2 = sprintf("%2d %s", $ans2, $m); echo_msg(2, $ttl2); echo_msg(2, ""); $flist = rfmenu_rec_gogaku_new31_sel_pgm($m,$url,$sta,$img); $opt = array( "title" => "番組一覧", "input_type" => 1, "page_control" => 1, "return_mes" => "戻る", "input_mes" => "番組を選択してください", "mode" => 1, "multi" => 0, "confirm" => 0, "ht_selid" => "" ); $no = rf_pctl_disp($flist, $opt); $ans2 = $no[0]; if ($ans2 == "r") { return true; } if ($ans2 == "e") { echo_msg(2, "入力エラー"); rf_pause(); return true; } if ($ans2 == "z") { echo_msg(2, "リストが空です"); rf_pause(); return true; } $wdat = array(); foreach($no as $no_s) { $ttl = $flist[$no_s - 1]['title']; $wdat0 = $flist[$no_s - 1]['val']; $ttl2 = sprintf("%2d %s", $no_s, $ttl); echo_msg(2, $ttl2); $wdat[]= $wdat0; } echo_msg(2, " "); $ans = echo_yesno(2, "録音しますか ? (y/N) : "); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_radiru_gogaku, 0, 0, 0, $wdat); echo_msg(2, "ゴガク録音を開始しました。"); rf_pause(); return true; } } function rfmenu_rec_gogaku_ouchicalc() { global $radiru_gogaku_ouchi_nendo; $nw = time(); $nwy = (int)date("Y", $nw); $nwm = (int)date("m", $nw); if ($nwm >=4 && $nwm <= 12) { $nendo = $nwy; } else { $nendo = $nwy - 1; } if ($nwm >=4 && $nwm <= 6) { if ($radiru_gogaku_ouchi_nendo == 1) $nendo = $nwy - 1; } $nendo = 2023; return $nendo; } function rfmenu_rec_gogaku_new3_course($cycle) { global $scrdir; $fil = $scrdir."learning.xml"; $xml = file_get_contents($fil); $obj = simplexml_load_string($xml); $course = $obj -> $cycle -> course; return $course; } function rfmenu_rec_gogaku_new3_lesson($cycle,$ans) { global $scrdir; $nendo = rfmenu_rec_gogaku_ouchicalc(); $fil = $scrdir."learning.xml"; $xml = file_get_contents($fil); $obj = simplexml_load_string($xml); $course = $obj -> $cycle -> course; $idx = $obj -> $cycle -> index; $nmax = count_73($course); $ttl = $course[$ans-1] -> title; $lang = $course[$ans-1] -> language; $kouza = $course[$ans-1] -> kouza; $pic = $course[$ans-1] -> pic; $sta = $course[$ans-1] -> station; echo_msg(2,"$ttl $kouza"); echo_msg(2,""); $flist = array(); $kidx = sprintf($idx,$nendo,$kouza); $json = @file_get_contents($kidx); if ($json === false) { return $flist; } $lists = json_decode($json); $list = $lists->list; foreach($list as $pgm) { if (!isset($pgm ->id)) continue; $id = $pgm->id; $ttlen = $pgm->title->en; $ttlja = $pgm->title->ja; if ($ttlja != "") $ttlen = $ttlen."(".$ttlja.")"; $flist[] = array('title' => "Lesson $id $ttlen",'val' => "$id"); } return $flist; } function rfmenu_rec_gogaku_new3_reclist($cycle,$course_no,$ids) { global $scrdir; global $ex_radiru_gogaku; $nendo = rfmenu_rec_gogaku_ouchicalc(); $fil = $scrdir."learning.xml"; $xml = file_get_contents($fil); $obj = simplexml_load_string($xml); $url = $obj -> $cycle -> url; $imgurl = $obj -> $cycle -> img; $course = $obj -> $cycle -> course; $idx = $obj -> $cycle -> index; $ttl = $course[$course_no-1] -> title; $lang = $course[$course_no-1] -> language; $kouza = $course[$course_no-1] -> kouza; $pic = $course[$course_no-1] -> pic; $sta = $course[$course_no-1] -> station; $flist2 = array(); $kidx = sprintf($idx,$nendo,$kouza); $json = file_get_contents($kidx); $lists = json_decode($json); $list = $lists->list; foreach($list as $pgm) { if (!isset($pgm ->id)) continue; $id = $pgm->id; $y = $pgm->date->year; $m = $pgm->date->month; $d = $pgm->date->day; $dt = date("Ymd",strtotime("$y/$m/$d")); $ttlen = $pgm->title->en; $ttlja = $pgm->title->ja; $flist2[$id] = array($dt,$ttlen,$ttlja); } $pat = '@< *?div +?class *?= *?" *?nol_audio_player *?" +?data-hlsurl *?= *?" *?(.*?) *?" *?data-title@is'; $image = sprintf($imgurl,$nendo,$kouza,$pic); $wdat = array(); foreach($ids as $id) { if (!array_key_exists($id,$flist2)) continue; $list2 = $flist2[$id]; $dt = $list2[0]; $ttlen = $list2[1]; $ttlja = $list2[2]; $kurl = sprintf($url,$nendo,$kouza,$id); $html = file_get_contents($kurl); $ret = preg_match($pat, $html, $script); if ($ret === false) continue; if ($ret == 0) continue; $scr = $script[1]; $ttlen2 = fn_edit($ttlen); $id2 = $id; if (substr($id2,0,2) == "00") $id2 = substr($id2,2); else if (substr($id2,0,1) == "0") $id2 = substr($id2,1); $ttl2 = fn_edit($ttl."(".$id2.")"); $para[0] = $dt."000000"; $para[1] = $dt."000000"; $para[2] = "0000"; $para[3] = 0; $para[4] = 0; $para[5] = 0; $para[6] = $sta; $para[7] = $ttl2; $para[8] = ";"; $para[9] = $image; $para[10] = "$ttlen2"; $para[11] = $scr; $para[12] = ";"; $para[13] = ";"; $para[14] = ";"; $para[15] = ";"; $wdata = put_para($para, $ex_radiru_gogaku); $wdat[] = $wdata; } return $wdat; } function rfmenu_rec_gogaku_new3($cycle) { global $ex_radiru_gogaku; global $multi_sw; $course = rfmenu_rec_gogaku_new3_course($cycle); $nmax = count_73($course); $ans = 1; if ($nmax > 1) { $no = rf_input_course(0, 0, "終了", $nmax, 1, "講座を選択してください",$course,"おうちで英語学習"); echo_msg(2, ""); if ($no[0] == "r") { return false; } if ($no[0] == "e") { return true; } $course_no = $no[0]; } if ($course_no == 1) { $ret = rfmenu_rec_gogaku_new31("weekly2"); return $ret; } $flist = rfmenu_rec_gogaku_new3_lesson($cycle,$course_no); $cnt = count_73($flist); if ($cnt <= 0) { return false; } $opt = array( "title" => "レッスン一覧（$cnt 件）", "input_type" => 1, "page_control" => 1, "return_mes" => "戻る", "input_mes" => "レッスンを選択してください", "mode" => 1, "multi" => $multi_sw, "confirm" => 0, "ht_selid" => "" ); $no = rf_pctl_disp($flist, $opt); $ans2 = $no[0]; if ($ans2 == "r") { return true; } if ($ans2 == "e") { echo_msg(2, "入力エラー"); rf_pause(); return true; } if ($ans2 == "z") { echo_msg(2, "リストが空です"); rf_pause(); return true; } $ids = array(); foreach($no as $n) { $ids[] = $flist[$n-1]['val']; echo_msg(2,$flist[$n-1]['val']." ".$flist[$n-1]['title']); } echo_msg(2, " "); $ans = echo_yesno(2, "録音しますか ? (y/N) : "); if ($ans == "y" || $ans == "Y") { $wdat = rfmenu_rec_gogaku_new3_reclist($cycle,$course_no,$ids); rf_batsh_rec($ex_radiru_gogaku, 0, 0, 0, $wdat); echo_msg(2, "ゴガク録音を開始しました。"); rf_pause(); return true; } } function rfmenu_gogaku_make_wdat($ans,$obj,$cycle,$pgm) { global $ex_radiru_gogaku; $stream = $obj -> $cycle -> streaming; $imgurl = $obj -> $cycle -> img; $course = $obj -> $cycle -> course; $ttl = $course[$ans-1] -> title; $lang = $course[$ans-1] -> language; $kouza = $course[$ans-1] -> kouza; $sta = $course[$ans-1] -> station; $image = sprintf($imgurl,$lang,$kouza); $id = $pgm->id; $y = $pgm->audio->date->year; $m = $pgm->audio->date->month; $d = $pgm->audio->date->day; $dt = date("Ymd",strtotime("$y/$m/$d")); $ttlen = ";"; $ttlja = $pgm->title; $fil = $pgm->audio->file; $filx = sprintf($stream,"mp4/".$fil); $title = "$ttl Lesson $ttlja"; $scr = sprintf($stream,$fil); $ttlen2 = fn_edit($ttlen); $id2 = $id; if (substr($id2,0,2) == "00") $id2 = substr($id2,2); else if (substr($id2,0,1) == "0") $id2 = substr($id2,1); $ttl2 = fn_edit($ttl."(".$id2.")"); $para[0] = $dt."000000"; $para[1] = $dt."000000"; $para[2] = "0000"; $para[3] = 0; $para[4] = 0; $para[5] = 0; $para[6] = $sta; $para[7] = $ttl2; $para[8] = ";"; $para[9] = $image; $para[10] = "$ttlen2"; $para[11] = $scr; $para[12] = ";"; $para[13] = ";"; $para[14] = ";"; $para[15] = ";"; $wdat = put_para($para, $ex_radiru_gogaku); return $wdat; } function rfmenu_rec_gogaku_new4($cycle) { global $scrdir; global $tmpdir; global $ex_radiru_gogaku; global $radiru_recdir; global $radiru_vod_recdir; global $radiru_vod_url; global $radiru_gogaku_recdir; global $radiru_gogaku_genre; global $DS; global $multi_sw; global $svcmode; $fil = $scrdir."learning.xml"; $xml = file_get_contents($fil); $obj = simplexml_load_string($xml); $stream = $obj -> $cycle -> streaming; $url = $obj -> $cycle -> url; $imgurl = $obj -> $cycle -> img; $course = $obj -> $cycle -> course; $idx = $obj -> $cycle -> index; $nmax = count_73($course); $ans = 1; if ($nmax > 1) { $no = rf_input_course(0, 0, "終了", $nmax, 1, "講座を選択してください",$course,"お悩みバスターズ"); echo_msg(2, ""); if ($no[0] == "r") { return false; } if ($no[0] == "e") { return true; } $ans = $no[0]; } $ttl = $course[$ans-1] -> title; $lang = $course[$ans-1] -> language; $kouza = $course[$ans-1] -> kouza; $pic = $course[$ans-1] -> pic; $sta = $course[$ans-1] -> station; echo_msg(2,"$ttl $kouza"); echo_msg(2,""); $flist = array(); $flist2 = array(); $kidx = sprintf($idx,$lang,$kouza); $json = file_get_contents($kidx); $lists = json_decode($json); $list = $lists->listen; foreach($list as $pgm) { if (!isset($pgm ->id)) continue; $wdat = rfmenu_gogaku_make_wdat($ans,$obj,$cycle,$pgm); $ttlja = $pgm->title; $title = "$ttl Lesson $ttlja"; $flist[] = array('title' => $title,'val' => $wdat); } $nx = count_73($flist); $r = "戻る"; if ($nmax == 1) $r = "終了"; $opt = array( "title" => "レッスン一覧（$nx 件）", "input_type" => 1, "page_control" => 1, "return_mes" => $r, "input_mes" => "レッスンを選択してください", "mode" => 1, "multi" => $multi_sw, "confirm" => 0, "ht_selid" => "" ); $no = rf_pctl_disp($flist, $opt); $ans2 = $no[0]; if ($ans2 == "r") { if ($nmax == 1) return false; return true; } if ($ans2 == "e") { echo_msg(2, "入力エラー"); rf_pause(); return true; } if ($ans2 == "z") { echo_msg(2, "リストが空です"); rf_pause(); return true; } $wdat = array(); foreach($no as $n) { $wdata = $flist[$n-1]['val']; echo_msg(2,$flist[$n-1]['val']." ".$flist[$n-1]['title']); $wdat[] = $wdata; } echo_msg(2, " "); $ans = echo_yesno(2, "録音しますか ? (y/N) : "); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_radiru_gogaku, 0, 0, 0, $wdat); echo_msg(2, "ゴガク録音を開始しました。"); rf_pause(); return true; } } function rfmenu_para() { global $cfgdir; global $scrdir; global $rf_stp; global $usrdir; global $tmpdir; global $ttl_no; global $ttl_mes; global $rfriends_name; global $radiko_callsigndat; global $radiru_callsigndat; $fn = "rfriends.ini"; echo_msg(2, "録音実行中に行うと録音が失敗する可能性があります。"); echo_msg(2, ""); $mnu = array("表示","編集","チェック","編集(標準エディタ)"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0] = 3; $ttl_no[3] = $ans; $ttl_mes[3] = $mnu[$ans-1]; switch ($ans) { case 1: rfmenu_subtitle("パラメータの表示を行います。"); rfmenu_info_ini(); rf_pause(); break; case 2: rfmenu_subtitle("パラメータの編集を行います。"); rfgw_play_text($cfgdir.$fn); rf_reboot("パラメータを変更したら"); rf_pause(); break; case 3: rfmenu_subtitle("パラメータのチェックを行います。"); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { rfmenu_info_ini_check(1); } break; case 4: rfmenu_subtitle("パラメータの編集(標準エディタ)を行います。"); echo_msg(2, "標準エディタを使用します。"); echo_msg(2, "エディタの変更等で困ったときに使用してください。"); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { rfgw_set_default_editor(); $fl = rfgw_get_editor(); echo_msg(2, "標準エディタ : ".$fl[0]); rfgw_play_text($cfgdir.$fn); rf_reboot("パラメータを変更したら"); rf_pause(); } break; default: break; } } function rfmenu_tag() { global $cfgdir; global $scrdir; global $rf_stp; global $usrdir; global $tmpdir; global $ttl_no; global $ttl_mes; global $rfriends_name; $fn = "rfriends_tag.ini"; echo_msg(2, "録音実行中に行うと録音が失敗する可能性があります。"); echo_msg(2, ""); $mnu = array("表示","編集","チェック"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0] = 3; $ttl_no[3] = $ans; $ttl_mes[3] = $mnu[$ans-1]; switch ($ans) { case 1: rfmenu_subtitle("タグの表示を行います。"); rfmenu_info_tag(); rf_pause(); break; case 2: rfmenu_subtitle("タグの編集を行います。"); rfgw_play_text($cfgdir.$fn); rf_reboot("タグ設定を変更したら"); rf_pause(); break; break; case 3: rfmenu_subtitle("タグのチェックを行います。"); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { rfmenu_info_ini_check(2); } break; } } function rfmenu_kw_manage_ex($ans) { global $ttl_no; global $ttl_mes; global $tmpdir; global $kwdir; global $kwbackupdir; global $DS; switch ($ans) { case 1: rfmenu_subtitle("現在のキーワードをバックアップします。"); $msg = "キーワードのバックアップを実行しますか? (y/N): "; $ans = echo_yesno(2, $msg); echo_scr(2, ""); if ($ans == "y" || $ans == "Y") { rfmenu_kw_manage_ex_s($ans,""); rf_pause(); } break; case 2: rfmenu_subtitle("キーワードをリストアします。　　　"); echo_msg(2, "あらかじめ用意されたキーワードに設定することもできます。"); echo_msg(2, "dir : $kwbackupdir"); $ttl = "キーワードzipリスト一覧"; $rmes = "終了"; $imes = "番号を選択してください。"; $ynmes = "終了"; $fl = rf_file_sel($kwbackupdir, "kw_*.zip", $ttl, $rmes, $imes, $ynmes,0); if ($fl === false) { return; } echo_msg(2, "$fl"); echo_msg(2, ""); $ans2 = echo_yesno(2,"キーワードを置き換えますか？(y/N) "); if ($ans2 == "y" || $ans2 == "Y" ) { rfmenu_kw_manage_ex_s($ans,$fl); rf_pause(); } break; case 3: rfmenu_subtitle("キーワードの初期化を行います。"); echo_msg(2,"キーワードの種類を選択してください。"); echo_msg(2,""); rf_menu_kw_update(); break; case 4: rfmenu_subtitle("キーワードの一覧を表示します。"); rf_menu_kw_list(); break; } } function rfmenu_kw_manage_ex_s($ans,$fl) { global $ttl_no; global $ttl_mes; global $tmpdir; global $kwdir; global $kwbackupdir; global $DS; switch ($ans) { case 1: $st = time(); $dt = date("Ymd_His",$st); $src = "kw_".$dt.".zip"; $fl = $tmpdir.$src; echo_msg(2,$kwdir."*.dat"); echo_msg(2,""); $files = glob($kwdir."*.dat"); $ret = rf_zip($files,"kw",$fl); if ($ret !== false) { $ret = rf_move($fl,$kwbackupdir.$src); } if ($ret === false) { echo_msg(2,"バックアップできませんでした。"); echo_msg(2,$kwbackupdir.$src); } else { $t = time() - $st; if ($t < 1) sleep(1); echo_msg(2,""); echo_msg(2,"バックアップを完了しました。"); echo_msg(2,$kwbackupdir.$src); } break; case 2: $src = $kwbackupdir.$fl; $dstdir = $tmpdir."kwtmp".$DS; rf_remove_dir($dstdir); $ret = mkdir($dstdir); if ($ret === false) { echo_msg(2,"ディレクトリが作成できません。$dstdir"); rf_pause(); return false; } $ret = rf_extract($src,$dstdir,""); if ($ret === false) { echo_msg(2,"zipファイルの解凍ができません。$src"); rf_remove_dir($dstdir); rf_pause(); return false; } $kwsrc = $dstdir."/kw/"; if (!is_dir($kwsrc)) { echo_msg(2,"kwディレクトリが存在しません。$kwsrc"); rf_remove_dir($dstdir); rf_pause(); return false; } $files = array_filter(glob($kwsrc."*.dat"), 'is_file'); if ($files === false) { echo_msg(2,"ファイルが存在しません。$kwsrc"); rf_remove_dir($dstdir); rf_pause(); return false; } if (count_73($files) <= 0) { echo_msg(2,"ディレクトリが空です。$kwsrc"); rf_remove_dir($dstdir); rf_pause(); return false; } echo_scr(2,""); foreach($files as $file) { $base_file = basename($file); $ret = rf_copy($file,$kwdir.$base_file); echo_msg(2,"コピーしました。$base_file"); } rf_remove_dir($dstdir); break; case 3: break; case 4: break; } } function rfmenu_kw_manage() { global $ttl_no; global $ttl_mes; global $tmpdir; global $kwdir; global $kwbackupdir; global $DS; echo_msg(2, "録音実行中に行うと録音が失敗する可能性があります。"); echo_msg(2, ""); $mnu = array("バックアップ（保存）","リストア（復元）","初期化","キーワード一覧"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3] = $mnu[$ans-1]; rfmenu_kw_manage_ex($ans); } function rfmenu_mail_ex($ans) { global $cfgdir; global $scrdir; global $rf_stp; global $send_mail_mode; global $send_mail_host; global $send_mail_port; global $send_mail_user; global $send_mail_pass; global $send_mail_from; global $send_mail_from_nm; global $send_mail_to; global $send_mail_to_nm; global $send_mail_line_mode; global $send_mail_line_token; global $usrdir; global $tmpdir; global $ttl_no; global $ttl_mes; global $rfriends_name; $fn = "sendmail.ini"; switch ($ans) { case 1: rfmenu_subtitle("メール設定の表示を行います。"); echo_msg(2, "現在の設定"); echo_msg(2, ""); echo_msg(2, "send_mail_mode : ".$send_mail_mode); echo_msg(2, "send_mail_host : ".$send_mail_host); echo_msg(2, "send_mail_port : ".$send_mail_port); echo_msg(2, "send_mail_user : ".$send_mail_user); echo_msg(2, "send_mail_pass : "."********"); echo_msg(2, "send_mail_from : ".$send_mail_from); echo_msg(2, "send_mail_from_nm : ".$send_mail_from_nm); echo_msg(2, "send_mail_to : ".$send_mail_to); echo_msg(2, "send_mail_to_nm : ".$send_mail_to_nm); echo_msg(2, ""); echo_msg(2, "send_mail_line_mode : ".$send_mail_line_mode); echo_msg(2, "send_mail_line_token : ".$send_mail_line_token); rf_pause(); break; case 2: rfmenu_subtitle("メール設定の編集を行います。"); rfgw_play_text($cfgdir.$fn); rf_reboot("メール設定を変更したら"); rf_pause(); break; case 3: rfmenu_subtitle("テスト送信（メール）を行います。"); if ($send_mail_mode >0) { $ans = echo_yesno(2, "テストメールを送信しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { echo_msg(2, "...送信中"); $dbg = 1; $ex_type = 1; $fnm = "test"; $log2 = $scrdir."testmail"; $err2 = $scrdir."testmail2"; $tim2 = $scrdir."testmail3"; fin_mail(-2, $dbg, $ex_type, $fnm, $log2, $err2, $tim2); echo_msg(2, "テストメールを送信しました。"); echo_msg(2, "メールが届いてない場合は設定を再確認してください。"); } } else { echo_msg(2, "send_mail_modeが有効ではありません。（ $send_mail_mode ）"); } rf_pause(); echo_scr(2, ""); break; case 4: rfmenu_subtitle("テスト送信（LINE-Notify）を行います。"); if ($send_mail_line_mode >0) { $ans = echo_yesno(2, "LINE-Notifyのテスト通知を行いますか? (y/N): "); if ($ans == "y" || $ans == "Y") { echo_msg(2, "...通知中"); $dbg = 1; $ex_type = 1; $fnm = "test"; $log2 = $scrdir."testmail"; $err2 = $scrdir."testmail2"; fin_notify(-2, $dbg, $ex_type, $fnm, $log2, $err2); echo_msg(2, "テスト通知を行いました。"); echo_msg(2, "通知が届いてない場合は設定を再確認してください。"); } } else { echo_msg(2, "send_mail_line_modeが有効ではありません。（ $send_mail_line_mode ）"); } rf_pause(); break; } } function rfmenu_mail() { global $cfgdir; global $scrdir; global $rf_stp; global $send_mail_mode; global $send_mail_host; global $send_mail_port; global $send_mail_user; global $send_mail_pass; global $send_mail_from; global $send_mail_from_nm; global $send_mail_to; global $send_mail_to_nm; global $send_mail_line_mode; global $send_mail_line_token; global $usrdir; global $tmpdir; global $ttl_no; global $ttl_mes; global $rfriends_name; $fn = "sendmail.ini"; rfmenu_subtitle("メール設定を行います。"); echo_msg(2, "異常時等に通知するメールアドレスを設定します。"); echo_msg(2, ""); $mnu = array("表示","編集","テスト送信（メール）","テスト送信（LINE-Notify）"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0] = 3; $ttl_no[3] = $ans; $ttl_mes[3] = $mnu[$ans-1]; rfmenu_mail_ex($ans); } function rfmenu_usrdir() { global $cfgdir; global $scrdir; global $rf_stp; global $usrdir; global $tmpdir; global $pcastdir; global $dir_change; global $dir_log; global $dir_radiko; global $dir_radiru; global $dir_timefree; global $dir_radiru_vod; global $dir_radiru_gogaku; global $dir_kw; global $dir_backup; global $logdir; global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir; global $kwdir; global $kwbackupdir; global $ttl_no; global $ttl_mes; global $rfriends_name; global $ui_mode; global $ini_usrdir2; global $ini_tmpdir2; $fn = "usrdir.ini"; rfmenu_subtitle("録音ディレクトリ設定を行います。"); $flists = array(); $flists["usrdir"] = "$usrdir"; $flists["tmpdir"] = "$tmpdir"; rf_tabledisp("現在の設定",$flists,"left"); if ($dir_change == "on") { echo_msg(2, ""); echo_msg(2,"dir_log           : $dir_log"); echo_msg(2,"dir_radiko        : $dir_radiko"); echo_msg(2,"dir_radiru        : $dir_radiru"); echo_msg(2,"dir_timefree      : $dir_timefree"); echo_msg(2,"dir_radiru_vod    : $dir_radiru_vod"); echo_msg(2,"dir_radiru_gogaku : $dir_radiru_gogaku"); echo_msg(2,"dir_kw            : $dir_kw"); echo_msg(2,"dir_kwbackup      : $dir_backup"); } echo_msg(2, ""); if ($ui_mode == 2) { $fl = $cfgdir.$fn; ht_textedit($fl,0,0); rf_reboot("設定を保存したら"); } else { $ans = echo_yesno(2, "編集しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { rfgw_play_text($cfgdir.$fn); rf_reboot("設定を変更したら"); rf_pause(); } } } function rfmenu_premium_ex($ans) { global $cfgdir; global $premium_area; global $premiumareafile; global $premium; global $premium_autologin; global $premium_mail; global $premium_password; global $cookiefile; global $ttl_no; global $ttl_mes; global $home_area_code; global $nowarea; global $premium_lifetime; switch ($ans) { case 1: rfmenu_subtitle("ラジコプレミアムの地区(現在:$premium_area )を変更します。"); if (premium_check() < 1) { echo_msg(2, "ラジコプレミアムにログインしてください。"); rf_pause(); break; } rfmenu_set_premium_area(); break; case 2: $fn = "premium.ini"; rfmenu_subtitle("ユーザ設定（ $fn ）を編集をします。"); echo_msg(2, "premium           : $premium"); echo_msg(2, "premium_autologin : $premium_autologin"); echo_msg(2, "premium_mail      : $premium_mail"); $pp = ""; if ($premium_password != "") $pp = "********"; echo_msg(2, "premium_password  : $pp"); echo_msg(2, ""); echo_msg(2, "録音実行中に編集すると録音が失敗する可能性があります。"); echo_msg(2, ""); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { rfgw_play_text($cfgdir.$fn); rf_reboot("ユーザ設定を変更したら"); rf_pause(); } break; case 3: rfmenu_subtitle("ラジコプレミアムにログインします。"); if ($premium != 1 && $premium != 2) { echo_msg(2, "ユーザ設定を行ってください。"); rf_pause(); return; } if (premium_check() > 0) { $ret = premium_logincheck(); if ($ret == true) { echo_msg(2, "ラジコプレミアムにすでにログインしています。"); echo_msg(2, "再ログインも可能です。"); echo_msg(2, ""); } } $ans = echo_yesno(2, "ログインしますか? (y/N): "); if ($ans == "y" || $ans == "Y") { $ret = premium_login(); if ($ret === true) { echo_msg(2, "ラジコプレミアムにログインしました。"); } else { echo_msg(2, "ラジコプレミアムにログインできませんでした。"); } } rf_pause(); break; case 4: rfmenu_subtitle("ラジコプレミアムからログアウトします。"); if ($premium != 1 && $premium != 2) { echo_msg(2, "ユーザ設定を行ってください。"); rf_pause(); return; } $ans = echo_yesno(2, "ログアウトしますか? (y/N): "); if ($ans == "y" || $ans == "Y") { premium_logout(); echo_msg(2, "ラジコプレミアムからログアウトしました。"); echo_msg(2, ""); rf_pause(); } break; default: break; } } function rfmenu_premium() { global $cfgdir; global $premium_area; global $premiumareafile; global $premium; global $premium_autologin; global $premium_mail; global $premium_password; global $cookiefile; global $ttl_no; global $ttl_mes; global $home_area_code; global $nowarea; global $premium_lifetime; $sw = "??"; if ($premium == 0) { $sw = "OFF"; } if ($premium == 1) { $sw = "ON"; } if ($premium == 2) { $sw = "TEST"; } echo_msg(2, "ラジコプレミアム $sw 状態です。"); if($premium == 1 || $premium == 2) { if (file_exists($cookiefile)) { $cf_time = filemtime($cookiefile); $nw_time = time(); $diff = $nw_time - $cf_time; echo_msg(2, "login : " . date("Y/m/d H:i:s",$cf_time)); } else { echo_msg(2, "ログインしていません。"); } } echo_msg(2, ""); $mnu = array("エリア変更","ユーザ設定","ログイン","ログアウト"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0] = 3; $ttl_no[3] = $ans; $ttl_mes[3] = $mnu[$ans-1]; rfmenu_premium_ex($ans); } function rfmenu_constant() { global $ttl_no; global $ttl_mes; global $cfgdir; global $scrdir; global $tmpdir; global $logdir; global $radiko_callsigndat; global $radiru_callsigndat; global $podcastdat; global $radiko_genredat; global $radiru_genredat; global $ex_radiko; global $ex_radiru; global $DS; echo_msg(2, "録音実行中に行うと録音が失敗する可能性があります。"); echo_msg(2, ""); $mnu = array("ラジココールサイン(編集)","らじるコールサイン(編集)", "ラジコ番組表(出力)","らじる番組表(出力)", "ラジコジャンル一覧(表示)","らじるジャンル一覧(表示)", ); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3] = $mnu[$ans-1]; switch ($ans) { case 1: rfmenu_subtitle("ラジココールサインの編集を行います。"); $fn = $radiko_callsigndat; rfgw_play_text($cfgdir.$fn); break; case 2: rfmenu_subtitle("らじるコールサインの編集を行います。"); $fn = $radiru_callsigndat; rfgw_play_text($cfgdir.$fn); break; case 3: if (!@is_dir($logdir."plist")) mkdir($logdir."plist"); while (1 == 1) { rfmenu_subtitle("ラジコ番組表の出力を行います。(ex:20220102,JP13)"); echo_msg(2,"この機能はデバッグ用です。入力データのチェック等は行っていません。"); echo_msg(2,""); $ymd = echo_input(2, "日付(yyyymmdd)を入力してください : "); if ($ymd == "") break; $area_code = echo_input(2, "area_code(JPXX)を入力してください : "); $area_code = strtoupper($area_code); echo_msg(2,"日付      : $ymd"); echo_msg(2,"area_code : $area_code"); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "") break; if ($ans != "y" && $ans != "Y") continue; if (!@is_dir($logdir."plist")) mkdir($logdir."plist"); $fn = $logdir."plist".$DS."radiko_".$ymd."_".$area_code.".xml"; $ret = rfmenu_radiko_plisting($fn,$ymd,$area_code); if ($ret === false) { echo_msg(2,"$fn の出力に失敗しました。"); } else { echo_msg(2,"$fn を出力しました。"); } } break; case 4: if (!@is_dir($logdir."plist")) mkdir($logdir."plist"); while (1 == 1) { rfmenu_subtitle("らじる番組表の出力を行います。(ex:20220102,130,r3)"); echo_msg(2,"この機能はデバッグ用です。入力データのチェック等は行っていません。"); echo_msg(2,""); $ymd = echo_input(2, "日付(yyyymmdd)を入力してください : "); if ($ymd == "") break; echo_msg(2,"(札幌010,仙台040,東京130,名古屋230,大阪270,広島340,松山380,福岡400)"); $areakey = echo_input(2, "areakey(nnn)を入力してください : "); $netch = echo_input(2, "netch(r1,r2,r3)を入力してください : "); echo_msg(2,"日付    : $ymd"); echo_msg(2,"areakey : $areakey"); echo_msg(2,"netch   : $netch"); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "") break; if ($ans != "y" && $ans != "Y") continue; if (!@is_dir($logdir."plist")) mkdir($logdir."plist"); $fn = $logdir."plist".$DS."radiru_".$ymd."_".$areakey."_".$netch.".json"; $ret = rfmenu_radiru_plisting($fn,$ymd,$areakey,$netch); if ($ret === false) { echo_msg(2,"$fn の出力に失敗しました。"); } else { echo_msg(2,"$fn を出力しました。"); } } break; case 5: rfmenu_subtitle("ラジコのジャンル一覧の表示を行います。"); $fn = $radiko_genredat; rf_copy($scrdir.$fn,$tmpdir.$fn); rfgw_play_text($tmpdir.$fn); break; case 6: rfmenu_subtitle("らじるのジャンル一覧の表示を行います。"); $fn = $radiru_genredat; rf_copy($scrdir.$fn,$tmpdir.$fn); rfgw_play_text($tmpdir.$fn); break; } } function rfmenu_setting_ex($ans) { global $ttl_no; global $ttl_mes; global $cfgdir; global $tmpdir; global $kwbackupdir; global $usrdirini; global $setting_name_dat; global $DS; switch ($ans) { case 1: rfmenu_subtitle("現在の設定データをバックアップします。"); $setting = array(); $i = 0; foreach($setting_name_dat as $key => $setting_name) { $i++; $fl = $cfgdir.$key; if(!file_exists($fl)) continue; $setting[$i] = $fl; echo_menu(2,"・ ".$setting_name."(".$key.")",1); } echo_scr(2, ""); $msg = "バックアップを実行しますか? (y/N): "; $ans = echo_yesno(2, $msg); echo_scr(2, ""); if ($ans == "y" || $ans == "Y") { rfmenu_setting_backup($setting); rf_pause(); } return 0; break; case 2: rfmenu_subtitle("設定データをリストアします。"); echo_msg(2, "録音実行中に実行すると録音が失敗する可能性があります。"); echo_msg(2, "dir : $kwbackupdir"); $ttl = "設定データzipリスト一覧"; $rmes = "終了"; $imes = "番号を選択してください。"; $ynmes = "終了"; $fl = rf_file_sel($kwbackupdir, "cfg_*.zip", $ttl, $rmes, $imes, $ynmes,0); if ($fl === false) { return 0; } echo_msg(2, "$fl"); echo_msg(2, ""); $ans2 = echo_yesno(2,"設定データを置き換えますか？(y/N) "); if ($ans2 != "y" && $ans2 != "Y" ) { return 0; } rfmenu_setting_restore($fl); rf_pause(); return 10; break; case 3: rfmenu_subtitle("設定データを初期化します。"); rfmenu_setting_init(); break; } return 0; } function rfmenu_setting() { global $ttl_no; global $ttl_mes; global $cfgdir; global $tmpdir; global $kwbackupdir; global $usrdirini; global $setting_name_dat; global $DS; rfmenu_subtitle("設定のメンテナンスを行います。"); echo_msg(2, "録音実行中に行うと録音が失敗する可能性があります。"); echo_msg(2, ""); $mnu = array("バックアップ（保存）","リストア（復元）","初期化"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return 0; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3] = $mnu[$ans-1]; rfmenu_setting_ex($ans); return 0; } function rfmenu_setting_backup($setting) { global $cfgdir; global $tmpdir; global $kwbackupdir; global $usrdirini; global $DS; $st = time(); $dt = date("Ymd_His",$st); $src = "cfg_".$dt.".zip"; $fl = $tmpdir.$src; $ret = rf_zip($setting,"cfg",$fl); if ($ret !== false) { $ret = rf_move($fl,$kwbackupdir.$src); } if ($ret === false) { echo_msg(2,"バックアップできませんでした。"); echo_msg(2,$kwbackupdir.$src); } else { $t = time() - $st; if ($t < 1) sleep(1); echo_msg(2,""); echo_msg(2,"バックアップ完了しました。"); echo_msg(2,$kwbackupdir.$src); } return 0; } function rfmenu_setting_restore($fl) { global $cfgdir; global $tmpdir; global $kwbackupdir; global $usrdirini; global $DS; $src = $kwbackupdir.$fl; $dstdir = $tmpdir."cfgtmp".$DS; rf_remove_dir($dstdir); $ret = mkdir($dstdir); if ($ret === false) { echo_msg(2,"ディレクトリが作成できません。$dstdir"); rf_pause(); return 0; } $ret = rf_extract($src,$dstdir,""); if ($ret === false) { echo_msg(2,"zipファイルの解凍ができません。$src"); rf_remove_dir($dstdir); rf_pause(); return 0; } $kwsrc = $dstdir."/cfg/"; if (!is_dir($kwsrc)) { echo_msg(2,"cfgディレクトリが存在しません。$kwsrc"); rf_remove_dir($dstdir); rf_pause(); return 0; } $files = array_filter(glob($kwsrc."*"), 'is_file'); if ($files === false) { echo_msg(2,"ファイルが存在しません。$kwsrc"); rf_remove_dir($dstdir); rf_pause(); return 0; } if (count_73($files) <= 0) { echo_msg(2,"ディレクトリが空です。$kwsrc"); rf_remove_dir($dstdir); rf_pause(); return 0; } echo_scr(2,""); foreach($files as $file) { $base_file = basename($file); if ($base_file == $usrdirini) { echo_msg(2,"録音ディレクトリ設定($usrdirini)は自動では復元しません。"); echo_msg(2,"手動にて復元して下さい。"); continue; } $ret = rf_copy($file,$cfgdir.$base_file); echo_msg(2,"restore : $base_file"); if($ret === false) { echo_msg(2,"コピーできません。$base_file"); rf_remove_dir($dstdir); rf_pause(); return 11; } } rf_remove_dir($dstdir); echo_msg(2,""); echo_msg(2,"復元完了しました。"); return 0; } function rfmenu_setting_init() { global $setting_name_dat; global $cfgdir; global $usrdirini; global $crontabtxt; global $ui_mode; global $ht_jump_btn1_label; $setting = array(); $i = 0; foreach($setting_name_dat as $key => $setting_name) { $fl = $cfgdir.$key; if (!file_exists($fl)) continue; if ($ui_mode == 2) { $kw[] = array('title'=>"$setting_name",'val'=>"$key"); } else { $i++; $setting[$i] = $key; echo_menu(2,$i.". ".$setting_name."(".$key.")",1); } } if ($ui_mode == 2) { $mes = "設定一覧"; $opt = array( "title" => $mes, "mode" => 1, "multi" => 1, "confirm" => 1, "ht_selid" => "" ); $ht_jump_btn1_label = "初期化"; ht_ask_list($kw,$opt); return; } echo_menu_ret_wt(); echo_scr(2,""); echo_msg(2,"録音ディレクトリ設定の初期化は注意してください。"); echo_scr(2,""); $ans = echo_ask(2,"初期化する番号を選択(1-$i,0:all) "); if ($ans == "" || $ans == "R" || $ans == "r") { return; } $ans = rfmenu_check_range($ans,0,$i); if ($ans === false) { echo_msg(2,"入力エラー"); rf_pause(); return; } echo_msg(2, ""); if ($ans == 0) { echo_msg(2,"0 全設定"); } else { $stn = $setting[$ans]; echo_msg(2,$ans." ".$setting_name_dat[$stn]."(".$stn.")"); $setting = array(); $setting[] = $stn; } echo_scr(2, ""); echo_msg(2, "今設定している設定がクリアされます。"); echo_msg(2, ""); $ans2 = echo_yesno(2,"設定初期化を実行しますか？(y/N) "); if ($ans2 != "y" && $ans2 != "Y" ) { return; } foreach ($setting as $stn) { if ($stn == $crontabtxt) { echo_msg(2, "delete ".$cfgdir.$stn); fin_unlink($cfgdir.$stn); continue; } if ($stn == $usrdirini) { $ans3 = echo_yesno(2,"録音ディレクトリ設定($usrdirini)を初期化しますか？(y/N) "); if ($ans3 != "y" && $ans3 != "Y" ) continue; } $stn_swp = $cfgdir.".".$stn.".swp"; fin_unlink($stn_swp); copy_defusr(1, $stn); } rf_pause(); } function rfmenu_update($ty) { $ret = rfmenu_update_sub($ty); rf_clear(); return($ret); } function rfmenu_update_tool($ty) { global $usrdir; global $tmpdir; global $base; global $rfriends; global $rfproduct; global $DS; global $os_s; echo_msg(2, "システム更新(TOOL) Ver.1.0.4"); $ret = phpzip(); if ($ret == 1) { return($ret); } $rpath = realpath($base."../").$DS; $upbtxt_fl = "update_bin.txt"; $tmpdir_rf = $tmpdir.$rfproduct; fin_unlink($tmpdir.$upbtxt_fl); $ret =rfgw_update_sub_tool($rpath, $tmpdir_rf, $upbtxt_fl, $ty); if ($ret == 0) rf_pause(); return($ret); } function rfmenu_info_manual() { global $base; global $rfproduct; $fn = $rfproduct.".txt"; rfgw_play_text($base.$fn); rf_pause(); } function rfmenu_info_apps() { global $base; global $rfriends; global $os_l; global $extdir; global $user_file; global $ext_constp; global $ext_const0; global $svcmode; echo_msg(2, ""); echo_msg(2, "rfriends は以下のソフトウエアを使用しています。"); echo_msg(2, ""); rfgw_info_app_which(); $app = rfgw_info_app(); $n = count_73($app); for ($i=0;$i<$n;$i++) { $ap = $app[$i]; if (strlen($ap) > 100) { $app[$i] = substr($ap,0,100); } } $phpexts = rf_php_ext(); echo_msg(2, ""); echo_msg(2, $app[0]); $str = ""; foreach($phpexts as $phpext) { $str .= " $phpext"; } echo_msg(2, $str); echo_msg(2, ""); echo_msg(2, $app[1]); echo_msg(2, $app[2]); echo_msg(2, $app[3]); echo_msg(2, $app[4]); echo_msg(2, $app[5]); echo_msg(2, ""); msgx('<a href=https://www.gsi.go.jp/>国土地理院</a><br>'); msgx('<a href=https://www.openstreetmap.org/copyright/ja>OpenStreetMap</a>'); echo_msg(2, ""); } function rfmenu_info() { global $base; global $rfriends; global $os_l; global $extdir; global $user_file; global $ext_constp; global $ext_const0; global $config_ver; global $svcmode; global $bindir; global $tmpdir; global $wget_opt_https_proxy; global $wget_opt_proxy_user; global $wget_opt_proxy_pass; $rfriends_ver = trim(file_get_contents($base.$rfriends)); echo_msg(2, $rfriends_ver); echo_msg(2, "rfriends2017(yahoo.co.jp), @rfriends2017"); echo_msg(2, "config ver. : $config_ver"); echo_msg(2, ""); if (($rasp = rfgw_is_rasp()) !== false) { echo_msg(2,"Hardware : ".$rasp); $rf3 = '/boot/rf3info'; if (!file_exists($rf3)) { $rf3 = '/boot/firmware/rfriends.create'; } if (file_exists($rf3)) { $ft = filectime($rf3); echo_msg(2,"Create : ".date('Y-m-d H:i:s',$ft)); } exec('uptime -s',$out,$ret); echo_msg(2,"Boot : ".$out[0]); echo_msg(2,""); } echo_msg(2, "OS : $os_l"); $pretty = rfgw_get_prettyname(); if ($pretty != "") echo_msg(2, "NAME : $pretty"); $ppid = rfgw_get_accessid(); echo_msg(2, "ACCESS   : $ppid"); $hn = getHostName(); echo_msg(2, "HOSTNAME : $hn"); if (isset($_SERVER['SERVER_ADDR']) === FALSE) { $ip = rfgw_getip(); } else { $ip = $_SERVER['SERVER_ADDR']; } echo_msg(2, "SERVERADDR   : $ip"); if ($wget_opt_https_proxy != "") { echo_msg(2,""); echo_msg(2, "https_proxy  : $wget_opt_https_proxy"); echo_msg(2, "proxy_user   : $wget_opt_proxy_user"); echo_msg(2, "proxy_pass   : ********"); } if (isset($_SERVER['REMOTE_ADDR']) === FALSE) { $remote_ip = ""; } else { $remote_ip = $_SERVER['REMOTE_ADDR']; } echo_msg(2,""); echo_msg(2, "REMOTEADDR   : $remote_ip"); $mgn = disp_ntp(); } function rfmenu_info_service() { global $svcmode; global $ext_const0; $fn2 = "rf_ext_ver"; if (function_exists($fn2)) { $ver = $fn2(); if ($ver !== false) { $mgc = $svcmode["service_mgc"]; if ($mgc === false) $mgc = ""; echo_msg(2, ""); if ($ext_const0 == $mgc) { echo_msg(2, "$fn2 : $ver ok"); } else { echo_msg(2, "$fn2 : $ver"); } } } if ($svcmode["service_mode"] == 1) { echo_msg(2, ""); echo_msg(2, "[service mode]"); echo_msg(2, ""); echo_msg(2, "service_ext            : ".$svcmode["service_ext"]); echo_msg(2, "service_key            : ".$svcmode["service_key"]); echo_msg(2, "service_mgc            : ".$svcmode["service_mgc"]); echo_msg(2, "service_maintenance    : ".$svcmode["service_maintenance"]); echo_msg(2, "service_update_beta    : ".$svcmode["service_update_beta"]); echo_msg(2, "service_update_beta_mgc: ".$svcmode["service_update_beta_mgc"]); echo_msg(2, "service_update_forbid  : ".$svcmode["service_update_forbid"]); echo_msg(2, "service_log_errors     : ".$svcmode["service_log_errors"]); echo_msg(2, "service_log_ffmpeg     : ".$svcmode["service_log_ffmpeg"]); echo_msg(2, "service_debug          : ".$svcmode["service_debug"]); echo_msg(2, "service_ajax           : ".$svcmode["service_ajax"]); echo_msg(2, ""); echo_msg(2, "display_errors  : ".ini_get("display_errors")); echo_msg(2, "error_reporting : ".ini_get("error_reporting")); echo_msg(2, "log_errors      : ".ini_get("log_errors")); echo_msg(2, "error_log       : ".ini_get("error_log")); } } function rfmenu_nettest() { global $bindir; global $tmpdir; echo_msg(2, "ネットワークテストを行います。"); while(1==1) { echo_msg(2, str_repeat("-", 40)); echo_msg(2, "Network-test メニュー"); echo_msg(2, ""); echo_msg(2, "1. ラジコとの接続状況"); echo_msg(2, "2. ラジコとのwgetテスト"); echo_msg(2, "3. ラジコとの認証テスト(簡易)"); echo_msg(2, "4. ラジコとの認証テスト(詳細)"); echo_msg(2, ""); echo_msg(2, "5. らじるとの接続状況"); echo_msg(2, "6. らじるとのwgetテスト"); echo_msg(2, ""); $ans = echo_select(2, "番号を選択(1-6,end=ret) : "); $ans2 = rfmenu_check_range($ans,1,6); if ($ans2 === false) { $ans2 = ""; } if ($ans2 == "") break; $ret = rf_network_test($ans2,0); if ($ret != 0) { echo_msg(2, ""); echo_msg(2, "--- error occured"); } rf_pause(); } } function rf_network_test($no,$exty) { global $radiko_host; global $radiru_host; global $radiru_configurl; global $tmpdir; switch($no) { case 1: echo_msg(2, "1. ラジコとの接続状況($radiko_host)"); echo_msg(2, ""); echo_msg(2, "=== ping $radiko_host"); $ret = rfgw_ping_test($radiko_host); echo_msg(2, ""); echo_msg(2, "=== nslookup $radiko_host"); echo_msg(2, ""); $ret = rfgw_nslookup($radiko_host); break; case 2: echo_msg(2, "2. ラジコとのwgetテスト"); echo_msg(2, ""); $cmd = "wget -d https://radiko.jp -O $tmpdir"."nettest.log"; echo_msg(2, "=== $cmd"); echo_msg(2, ""); $ret = rf_wget_test($cmd); break; case 3: echo_msg(2, "3. ラジコとの認証テスト(簡易)"); echo_msg(2, ""); echo_msg(2, "=== radiko_hls (mode=1)"); $mode = 1; $ret = rf_radiko_hls($mode,$exty); if ($ret === false) { $ret = 1; } else { $ret = 0; } break; case 4: echo_msg(2, "4. ラジコとの認証テスト(詳細)"); echo_msg(2, ""); echo_msg(2, "=== nslookup $radiko_host"); echo_msg(2, ""); $ret = rfgw_nslookup($radiko_host); echo_msg(2, "=== radiko_hls (mode=2)"); $mode = 2; $ret = rf_radiko_hls($mode,$exty); if ($ret !== false) { $ret = 0; break; } echo_msg(2, ""); echo_msg(2, "=== radiko_hls (mode=3)"); $mode = 3; $ret = rf_radiko_hls($mode,$exty); if ($ret !== false) { $ret = 0; } else { $ret = 1; } break; case 5: echo_msg(5, "2. らじるとの接続状況($radiru_host)"); echo_msg(2, ""); echo_msg(2, "=== ping $radiru_host"); $ret = rfgw_ping_test("www.".$radiru_host); echo_msg(2, ""); echo_msg(2, "=== nslookup $radiru_host"); echo_msg(2, ""); $ret = rfgw_nslookup("www.".$radiru_host); break; case 6: echo_msg(2, "6. らじるとのwgetテスト"); echo_msg(2, ""); $cmd = "wget -d $radiru_configurl -O $tmpdir"."nettest2.log"; echo_msg(2, "=== $cmd"); echo_msg(2, ""); $ret = rf_wget_test($cmd); break; case 7: echo_msg(2, "7. updateサイトの確認"); $ret = rfmenu_update_test(); break; default: break; } return $ret; } function rfmenu_update_test() { global $scrdir; global $DS; global $rfriends; global $bindir; $cmd = "wget --spider -T 1 -t 1 "; $str = file($scrdir."update"); if ($str === false) { return 1; } $n = count_73($str); if ($n <= 0) { return 1; } $updt = rf_update_dir(); foreach($str as $s) { $url = trim($s); if (strlen($url) < 8) continue; if (substr($url,0,1) == ";") continue; if (substr($url,-1) != "/") { $url .= "/"; } $flf = $url.$updt.$rfriends.".flg"; echo_msg(2, ""); $cmdx = $bindir.$cmd.$flf." 2>&1"; echo_msg(2, "=== $cmdx"); echo_msg(2, ""); unset($out); $r = exec($cmdx,$out,$ret); if ($ret != 0) { echo_msg(2, "error"); continue; } foreach($out as $o) { echo_msg(2,trim($o)); } } return 0; } function rfmenu_gpstest($area) { global $bindir; global $tmpdir; global $nowarea; global $home_area_code; global $radiko_auth_mode3_dat; echo_msg(2, "現在地変更を行います。(gpsテスト)"); if ($area !== false) { $no = rf_convjp($area); $ret = rf_device_f_lat_lon($no); $lat = $ret[0]; $lon = $ret[1]; $ret = file_put_contents($radiko_auth_mode3_dat, "$lat,$lon", LOCK_EX); if ($ret !== false) { echo_scr(2, ""); echo_msgbox(2, "現在地 : $area($lat,$lon)"); return; } } echo_scr(2, ""); echo_msgbox(2, "現在地の変更に失敗しました。"); } 