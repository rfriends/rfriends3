<?php
 function rfgw_get_editor() { global $access_type; global $editor_cui; global $editor_gui; global $snd_player; global $editor_cui_win; global $editor_gui_win; global $snd_player_win; global $editor_cui_lnx; global $editor_gui_lnx; global $snd_player_lnx; global $editor_cui_osx; global $editor_gui_osx; global $snd_player_osx; rfgw_init_editor(); $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $fl[0] = $editor_cui_win; $fl[1] = $editor_gui_win; $fl[2] = $snd_player_win; break; case "OSX": $fl[0] = $editor_cui_osx; $fl[1] = $editor_gui_osx; $fl[2] = $snd_player_osx; break; case "LNX": $fl[0] = $editor_cui_lnx; $fl[1] = $editor_gui_lnx; $fl[2] = $snd_player_lnx; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $fl; } function rfgw_set_default_editor() { global $access_type; global $editor_cui; global $editor_gui; global $snd_player; global $editor_cui_win; global $editor_gui_win; global $snd_player_win; global $editor_cui_lnx; global $editor_gui_lnx; global $snd_player_lnx; global $editor_cui_osx; global $editor_gui_osx; global $snd_player_osx; global $editor; rfgw_init_editor(); $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $editor_cui_win = $editor_cui; $editor_gui_win = $editor_gui; $snd_player_win = $snd_player; break; case "OSX": $editor_cui_osx = $editor_cui; $editor_gui_osx = $editor_gui; $snd_player_osx = $snd_player; break; case "LNX": $editor_cui_lnx = $editor_cui; $editor_gui_lnx = $editor_gui; $snd_player_lnx = $snd_player; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return; } function rfgw_init_editor() { global $access_type; global $editor_cui; global $editor_gui; global $snd_player; global $editor_cui_win; global $editor_gui_win; global $snd_player_win; global $editor_cui_lnx; global $editor_gui_lnx; global $snd_player_lnx; global $editor_cui_osx; global $editor_gui_osx; global $snd_player_osx; global $default_editor_cui_win; global $default_editor_gui_win; global $default_snd_player_win; global $default_editor_cui_lnx; global $default_editor_gui_lnx; global $default_snd_player_lnx; global $default_editor_cui_osx; global $default_editor_gui_osx; global $default_snd_player_osx; global $editor; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $editor_cui = $default_editor_cui_win; $editor_gui = $default_editor_gui_win; $snd_player = $default_snd_player_win; $edit = $editor_cui_win; break; case "OSX": $editor_cui = $default_editor_cui_osx; $editor_gui = $default_editor_gui_osx; $snd_player = $default_snd_player_osx; $edit = $editor_cui_osx; break; case "LNX": $editor_cui = $default_editor_cui_lnx; $editor_gui = $default_editor_gui_lnx; $snd_player = $default_snd_player_lnx; $edit = $editor_cui_lnx; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } if ($edit == '') { $edit = $editor_cui; } return; } function rfgw_line_notify($tmode,$mes) { global $tmpdir; global $send_mail_line_token; global $rfriends_name; global $line_url; global $line_auth; $exeos = get_rfriends_exeos(); if ($tmode == 1) { $exec_cmd = "wget "; } else { $exec_cmd = "wget -q "; } $exec_cmd .= $line_auth; if ($rfriends_name == '') { if (($hname = gethostname()) === false) { $hname = ""; } } else { $hname = $rfriends_name; } $mes2 = $hname."\r\n".$mes; switch ($exeos) { case "WIN": case "OSX": case "LNX": $fn = make_fn("line_notify"); $fn = $tmpdir.$fn; file_put_contents($fn,"message=".$mes2); $exec_cmd .= " -O- --post-file=$fn $line_url"; $output = external_shell_program($exec_cmd); fin_unlink($fn); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $output; } function rfgw_get_atom($fil) { global $bindir; $pgm = $bindir."AtomicParsley"; $out = []; $ext = pathinfo($fil, PATHINFO_EXTENSION); if ($ext != "m4a") return $out; $cmd = $pgm." \"$fil\" -T 1"; exec($cmd,$out,$ret); if ($ret != 0) { return false; } if (count_73($out) < 1) { return false; } $str = $out[0]; $pos = strpos($str,"Atom ftyp"); if ($pos !== false) { $out[0] = substr($str,$pos); } $out = preg_grep('/^Atom /',$out); return $out; } function rfgw_get_access_flg() { global $access_type; $flg = $access_type; if ($flg == 0) { $flg = rfgw_check_sshd(); } return $flg; } function rfgw_get_ppid_sub($out, $id) { $id1[0] = ""; $id1[1] = ""; $id1[2] = ""; $id1[3] = ""; foreach ($out as $str) { $str = preg_replace('/\s+/', ' ', trim($str)); $dx = explode(' ', $str); $n = count_73($dx); if ($n < 4) { break; } if ($dx[0] == $id) { $id1[0] = $dx[0]; $id1[1] = $dx[1]; $id1[2] = $dx[2]; $id1[3] = $str; break; } } return $id1; } function rfgw_get_ppid() { $p_pid = -1; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $pid = getmypid(); $id = shell_exec("wmic process where (processid=$pid) get parentprocessid"); $id2 = explode("\n", $id); $p_pid = $id2[1]; break; case "OSX": case "LNX": if (function_exists('posix_getppid')) { $p_pid = posix_getppid(); } else { $pid = getmypid(); $cmd = 'ps ax -o pid,ppid,command'; exec($cmd, $out); if (count_73($out) == 0) { break; } $id = rfgw_get_ppid_sub($out, $pid); $p_pid = $id[1]; } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return intval($p_pid); } function rfgw_get_accessid() { $ret = "unknown"; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": case "LNX": $pid = getmypid(); $cmd = 'ps ax -o pid,ppid,tty,command'; exec($cmd, $out); if (count_73($out) == 0) { break; } $id0 = rfgw_get_ppid_sub($out, $pid); if ($id0[1] == "") { break; } $id1 = rfgw_get_ppid_sub($out, $id0[1]); if ($id1[1] == "") { break; } $id2 = rfgw_get_ppid_sub($out, $id1[1]); if ($id2[1] == "") { break; } $id3 = rfgw_get_ppid_sub($out, $id2[1]); if ($id3[1] == "") { break; } $ret = $id3[3]; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_get_prettyname() { $ret = ""; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": $cmd = 'sw_vers -productName'; exec($cmd, $out1); $cmd = 'sw_vers -productVersion'; exec($cmd, $out2); $ret = $out1[0]." ".$out2[0]; break; case "LNX": $cmd = 'cat /etc/*release|grep -i -m 1 pretty'; exec($cmd, $out); if (count_73($out) == 0) break; $ret = str_ireplace("pretty_name=","",$out[0]); $ret = str_replace('"','',$ret); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_check_sshd() { $ret = 0; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": case "LNX": exec("pidof sshd",$str); if ($str != "") $ret = 1; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_reconnect_bd() { global $bd_name; global $bd_address; if ($bd_address != "") { if (filter_var($bd_address,FILTER_VALIDATE_MAC) === false) { echo_msg(2,"($bd_address) is not vaild."); return; } } if ($bd_address != "") { echo_msg(2, "$bd_name の電源をONにしてください。"); } else { return; } $mes = "再接続しますか。(y/N)"; $ans = echo_yesno(2, $mes); if ($ans == "y" || $ans == "Y") { rfgw_wakeup_bluetooth($bd_address); } echo_msg(2, ""); return; } function rfgw_wakeup_bluetooth($bdaddr) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": case "LNX": if ($bdaddr != "") { $cmd = "sudo bluetoothctl -- connect $bdaddr"; exec($cmd); } else { return; } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return ; } function rfgw_amixer_utl($val) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": return 1; break; case "OSX": case "LNX": $dev = rf_amixer_get_dev(); if ($dev == '') { return 1; } switch($val) { case 0: $cmd = "command -v amixer"; break; case 1: $cmd = "amixer sget $dev"; break; case 2: $cmd = "amixer sset $dev on"; break; case 3: $cmd = "amixer sset $dev off"; break; case 4: $v = rf_amixer_get_volume(); $l = $v[0] + 10; $r = $v[1] + 10; if ($l > 100) $l = 100; if ($r > 100) $r = 100; $cmd = "amixer sset $dev $l%,$r%"; break; case 5: $v = rf_amixer_get_volume(); $l = $v[0] - 10; $r = $v[1] - 10; if ($l < 0) $l = 0; if ($r < 0) $r = 0; $cmd = "amixer sset $dev $l%,$r%"; break; case 6: $n = echo_ask(2, "音量を入力 (0-100)  "); echo_msg(2, ""); $n = $n + 0; if ($n < 0) $n = 0; if ($n > 100) $n = 100; $v = sprintf("%3d",$n)."%"; $cmd = "amixer sset $dev $v"; break; default: return 1; break; } exec($cmd,$outs,$ret); if ($val != 1) return $ret; echo_msg(2,""); foreach($outs as $out) { echo_msg(2,$out); } echo_msg(2,""); return $ret; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return 1; } function rfgw_dispsch($ex_type) { global $schradiko_head; global $schradiru_head; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $at_que_no; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": if ($ex_type == $ex_radiko || $ex_type == 3) { $head = $schradiko_head; } else { $head = $schradiru_head; } $n = dispsch($head); break; case "OSX": $exque = get_at_que_no($at_que_no); if ($ex_type == $ex_radiko || $ex_type == 3) { $atqueno = $exque[0]; } else { $atqueno = $exque[1]; } $n = dispsch_osx($atqueno, 1); break; case "LNX": $exque = get_at_que_no($at_que_no); if ($ex_type == $ex_radiko || $ex_type == 3) { $atqueno = $exque[0]; } else { $atqueno = $exque[1]; } $n = dispsch_lnx($atqueno, 1); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $n; } function rfgw_getip() { $exeos = get_rfriends_exeos(); $rf_ip = ""; switch ($exeos) { case "WIN": $hn = getHostName(); $rf_ip = getHostByName($hn); break; case "OSX": $hn = getHostName(); $rf_ip = getHostByName($hn); break; case "LNX": $hn = getHostName(); $rf_ip = getHostByName($hn); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $rf_ip; } function rfgw_caffeinate($ex_type, $fnm) { global $rsvdir; global $ex_radiko; global $ex_radiru; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": if ($ex_type == $ex_radiko || $ex_type == $ex_radiru) { } break; case "LNX": break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function read_stdin_k() { global $scrdir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": unset($output); $exec_cmd = $scrdir."ans.bat"; $ret = exec($exec_cmd, $output); $ans = ""; if ($ret !== false) { if (isset($output[0])) $ans = $output[0]; } break; case "OSX": case "LNX": $ans = ""; $ret = @fgets(STDIN); if ($ret !== false) { $ans = trim($ret); } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ans; } function external_shell_program($exec_cmd) { global $bindir; $cmd = $bindir.$exec_cmd; $ret = shell_exec($cmd); return $ret; } function external_exec_program($exec_cmd) { global $bindir; $cmd = $bindir.$exec_cmd; exec($cmd, $result, $ret); if ($ret != 0) { return false; } if ($result == "") $result = false; return $result; } function external_program_null($exec_cmd) { global $null_out; global $bindir; $cmd = $bindir.$exec_cmd." > ".$null_out." 2>&1"; system($cmd, $ret); return $ret; } function external_program($exec_cmd) { global $bindir; $cmd = $bindir.$exec_cmd; system($cmd, $ret); return $ret; } function external_php_program($exec_cmd) { global $phpdir; $cmd = $phpdir."php ".$exec_cmd; system($cmd, $ret); return $ret; } function external_php_exec($exec_cmd) { global $phpdir; $cmd = $phpdir."php ".$exec_cmd; exec($cmd, $out,$ret); if ($ret != 0) $out = array(); return $out; } function rfgw_start_dontsleep($ex_type, $fn, $lmt, $tim, $bonus) { global $scrdir; global $phpdir; global $base; $exeos = get_rfriends_exeos(); $ex = $scrdir."rfriends_dontsleep.php"; $ex2 = $phpdir ."php ". $ex; switch ($exeos) { case "WIN": $cmd = "start /b \"sleep\" $ex2 $ex_type,$fn,$lmt,$tim,$bonus > nul 2>&1"; $fp = popen($cmd, 'r'); pclose($fp); break; case "OSX": case "LNX": $ex = $scrdir."rfriends_dontsleep.php"; $cmd = "$ex $ex_type,$fn,$lmt,$tim,$bonus > /dev/null 2>&1 &"; external_php_program($cmd); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return; } function rfgw_daily() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $str = " (schtasks)"; break; case "OSX": $str = " (launchd)"; break; case "LNX": $str = " (crontab)"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $str; } function rfgw_daily_s() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $str = array("デイリー登録","デイリー取消"); break; case "OSX": $str = array("デイリー登録","デイリー取消"); break; case "LNX": $str = array("読込","編集","書出","デイリー追加"); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $str; } function rfgw_config() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": rfmenu_config_win(); break; case "OSX": rfmenu_config_osx(); break; case "LNX": rfmenu_config_linux(); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_reset_cron() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": rfgw_config_sch_can(); break; case "OSX": crontab_reserve_osx("off"); break; case "LNX": rf_reset_crontab(); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_play_text($fn) { $flg = rfgw_get_access_flg(); $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ret = rf_play_text_win($fn, $flg); break; case "OSX": $ret = rf_play_text_osx($fn, $flg); break; case "LNX": $ret = rf_play_text_lnx($fn, $flg); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_play_snd($fn) { $flg = rfgw_get_access_flg(); $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ret = rf_play_snd_win($fn, $flg); break; case "OSX": $ret = rf_play_snd_osx($fn, $flg); break; case "LNX": $ret = rf_play_snd_lnx($fn, $flg); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_kwedit($kw) { global $kwdir; global $kw_dat; global $station_kw; global $program_kw; $fn = $kwdir.$kw_dat[$kw]; rfgw_play_text($fn); rf_pause(); } function rfgw_info_dir() { global $launchdir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $lst = array(); break; case "OSX": $lst[] = array("launchdir","ジョブデータ",$launchdir); break; case "LNX": $lst = array(); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $lst; } function rfgw_info_ffmpeg() { global $phpdir; global $bindir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": exec($bindir."ffmpeg -version", $ans); break; case "OSX": exec($bindir."ffmpeg -version", $ans); break; case "LNX": exec("ffmpeg -version", $ans); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ans[0]; } function rfgw_info_app() { global $phpdir; global $bindir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": exec($phpdir."php -v", $ans1); exec($bindir."ffmpeg -version", $ans2); exec($bindir."wget -V", $ans3); exec($bindir."curl -V", $ans4); exec($bindir."AtomicParsley -v 2>&1", $ans5); $ans6[0] = ""; break; case "OSX": exec("php -v", $ans1); exec("ffmpeg -version", $ans2); exec("wget -V", $ans3); exec("curl -V", $ans4); exec("AtomicParsley -v 2>&1", $ans5); $ans6[0] = ""; break; case "LNX": exec("php -v", $ans1); exec("ffmpeg -version", $ans2); exec("wget -V", $ans3); exec("curl -V", $ans4); exec("AtomicParsley -v 2>&1", $ans5); exec("echo atd:`pidof atd` cron:`pidof cron` crond:`pidof crond` sshd:`pidof sshd` 2>&1", $ans6); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } $ret[0] = $ans1[0]; $ret[1] = $ans2[0]; $ret[2] = $ans3[0]; $ret[3] = $ans4[0]; $ret[4] = $ans5[0]; $ret[5] = $ans6[0]; return $ret; } function rfgw_info_app_which() { global $phpdir; global $bindir; global $cmd_which; global $headless_browser; global $headless_browser_app; global $default_headless_browser_win_app; global $default_headless_browser_osx_app; global $default_headless_browser_lnx_app; echo_msg(2,"phpdir : $phpdir"); echo_msg(2,"bindir : $bindir"); return; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $app = $phpdir."php.exe"; if (file_exists($app)) echo_msg(2,$app); else echo_msg(2,"php not found"); $app = $bindir."ffmpeg.exe"; if (file_exists($app)) echo_msg(2,$app); else echo_msg(2,"ffmpeg not found"); $app = $bindir."wget.exe"; if (file_exists($app)) echo_msg(2,$app); else echo_msg(2,"wget not found"); $app = $bindir."curl.exe"; if (file_exists($app)) echo_msg(2,$app); else echo_msg(2,"curl not found"); $app = $bindir."AtomicParsley.exe"; if (file_exists($app)) echo_msg(2,$app); else echo_msg(2,"AtomicParsley not found"); if ($headless_browser_app == "") { $app = $bindir.'chrome-win/'.$default_headless_browser_win_app; } else { $app = $headless_browser_app; } if (file_exists($app)) echo_msg(2,$app); else echo_msg(2,"$app not found"); break; case "OSX": system("$cmd_which php"); echo_msg(2,""); system("$cmd_which ffmpeg"); echo_msg(2,""); system("$cmd_which wget"); echo_msg(2,""); system("$cmd_which curl"); echo_msg(2,""); system("$cmd_which AtomicParsley"); echo_msg(2,""); if ($headless_browser_app == "") { $app = $default_headless_browser_osx_app; } else { $app = $headless_browser_app; } system("$cmd_which $app"); echo_msg(2,""); break; case "LNX": system("$cmd_which php"); echo_msg(2,""); system("$cmd_which ffmpeg"); echo_msg(2,""); system("$cmd_which wget"); echo_msg(2,""); system("$cmd_which curl"); echo_msg(2,""); system("$cmd_which AtomicParsley"); echo_msg(2,""); if ($headless_browser_app == "") { $app = $default_headless_browser_lnx_app; } else { $app = $headless_browser_app; } system("$cmd_which $app"); echo_msg(2,""); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_which($app) { global $bindir; global $cmd_which; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $app2 = $bindir.$app; if (strpos($app2,'.exe') === false) $app2 .= '.exe'; if (!file_exists($app2)) return false; return true; break; case "OSX": case "LNX": $ret0 = exec("$cmd_which $app",$result,$ret); if ($ret != 0) return false; return true; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_rasp_temp() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $t = -1; break; case "OSX": $t = -1; break; case "LNX": $fil = "/sys/class/thermal/thermal_zone0/temp"; if (!is_readable($fil)) { $t = -1; break; } $t = @file_get_contents($fil); if ($t === false) { $t = -1; break; } $t = intval($t); $t = (int)($t/1000); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $t; } function rfgw_is_rasp() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $t = false; break; case "OSX": $t = false; break; case "LNX": $fil = "/proc/device-tree/model"; if (!is_readable($fil)) { $t =false; break; } $mdl = @file_get_contents($fil); $t = explode(' ',$mdl); $t = strtolower($t[0]); if ($t == 'raspberry') $t = $mdl; else $t = false; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $t; } function rfgw_rec_can($pid) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ex = "taskkill /f /pid $pid > nul"; break; case "OSX": case "LNX": $ex = "kill -s 2 $pid"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } system($ex, $ret); return $ret; } function rfgw_rec_cnt_all() { global $at_que_no; global $dlmt; global $ex_radiko; global $ex_radiru; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $rcnt = get_schdata_cnt_simple(); break; case "OSX": $exque = get_at_que_no($at_que_no); $rcnt[0] = get_schdata_cnt_osx_simple($exque[0]); $rcnt[1] = get_schdata_cnt_osx_simple($exque[1]); break; case "LNX": $exque = get_at_que_no($at_que_no); $rcnt[0] = get_schdata_cnt_linux_simple($exque[0]); $rcnt[1] = get_schdata_cnt_linux_simple($exque[1]); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $rcnt; } function rfgw_rec_dsp($ex_type, $head, $atqueno,$auto) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $rsvdata = get_schdata($head, $ex_type, 1); break; case "OSX": rf_schdel_expire_osx($atqueno); $rsvdata = get_schdata_osx($atqueno, $ex_type, 1); break; case "LNX": $rsvdata = get_schdata_linux($atqueno, $ex_type, 1); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $rsvdata; } function rfgw_config_sch_reg() { global $sch_exrecord; global $schrfriends_head; global $sch_daily; global $sch_daily2; global $rf_stp; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $tn= $schrfriends_head; $fn = "ex_rfriends.bat"; $sc = "daily"; $st = $sch_daily; echo_msg(2,"tn : $tn"); echo_msg(2,"fn : $fn"); echo_msg(2,"sc : $sc"); echo_msg(2,"st : $st"); echo_msg(2,""); $taskdel = "SCHTASKS /Delete /TN $tn /f"; external_sys("$taskdel > nul"); sch_reg($fn, $tn, $sc, $st); $tn= $schrfriends_head."2"; $taskdel = "SCHTASKS /Delete /TN $tn /f"; external_sys("$taskdel > nul"); if ($sch_daily2 != "") { $fn = "ex_rfriends.bat"; $sc = "daily"; $st = $sch_daily2; sch_reg($fn, $tn, $sc, $st); } $que = "SCHTASKS /query | find \"$sch_exrecord\""; external_sys("$que > nul"); break; case "OSX": case "LNX": $rf_stp = 11; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_config_sch_can() { global $schrfriends_head; global $sch_daily; global $rf_stp; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $tn =$schrfriends_head; echo_msg(2,"tn : $tn"); echo_msg(2,""); $taskdel = "SCHTASKS /Delete /TN $tn /f"; external_sys("$taskdel > nul"); $tn= $schrfriends_head."2"; $taskdel = "SCHTASKS /Delete /TN $tn /f"; external_sys("$taskdel > nul"); break; case "OSX": case "LNX": $rf_stp = 11; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_ret_extsys($ex, $opt) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $fp = popen('start "" '."\"$ex\" \"$opt\"", 'r'); pclose($fp); break; case "OSX": $expgm = "open -a '$ex' '$opt' > /dev/null 2>&1 &"; external_sys($expgm); break; case "LNX": $expgm = "'$ex' '$opt' > /dev/null 2>&1 &"; external_sys($expgm); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_batsh_sub($dir, $ex, $opt, $mode, $start_opt) { $sh = "sh"; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $fl = $dir.$ex.".bat"; if ($mode == 0) { $expgm = "cmd.exe /c $fl $opt"; external_sys($expgm); } else { $m = ""; if ($start_opt == 1) { $m = "/min"; } $fp = popen("start $m $fl $opt", 'r'); pclose($fp); } break; case "OSX": case "LNX": $fl = $dir.$ex.".sh"; if ($mode == 0) { $expgm = "$sh $fl $opt"; } else { $expgm = "$sh $fl $opt"." > /dev/null &"; } external_sys($expgm); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_get_batsh($ex_type, $fnm) { global $rsvdir; global $scrdir; global $logdir; global $tmpdir; global $rec_sleep_pgm; global $rec_pgm; global $rec_fin_pgm; global $base; global $rec_sleep_program; global $bindir; global $phpdir; global $null_out; global $end_log; global $svcmode; $exeos = get_rfriends_exeos(); $lf = PHP_EOL; $log = $tmpdir. $fnm.".out"; $log2= $tmpdir. $fnm.".err"; $log0= $tmpdir. $fnm.".slp"; $loge= $tmpdir. $fnm.".end"; if (($end_log == 0) && ($svcmode["service_maintenance"] == 0)) { $loge = $null_out; } $pg0 = $scrdir.$rec_sleep_pgm; $pg1 = $scrdir.$rec_pgm; $pg2 = $scrdir.$rec_fin_pgm; $rec_sleep_program = 0; $php = $phpdir."php"; $ffmpeg_inp_null = rfgw_inpnull(); switch ($exeos) { case "WIN": if ($rec_sleep_program == 1) { $dat = array( "@echo off".$lf, "title rfriends,$fnm".$lf, "call $php $pg0 0,1,$ex_type,$fnm > nul 2>&1".$lf, "call $php $pg1 0,1,$ex_type,$fnm > $log 2> $log2 $ffmpeg_inp_null".$lf, "call $php $pg2 0,1,$ex_type,$fnm > $loge 2>&1".$lf ); } else { $dat = array( "@echo off".$lf, "title rfriends,$fnm".$lf, "call $php $pg1 0,1,$ex_type,$fnm > $log 2> $log2 $ffmpeg_inp_null".$lf, "call $php $pg2 0,1,$ex_type,$fnm > $loge 2>&1".$lf ); } break; case "OSX": case "LNX": if ($rec_sleep_program == 1) { $dat = array( "#!/bin/sh".$lf, "$php $pg0 0,1,$ex_type,$fnm > /dev/null 2>&1".$lf, "$php $pg1 0,1,$ex_type,$fnm \\".$lf, " > $log \\".$lf, "2> $log2 $ffmpeg_inp_null".$lf, "$php $pg2 0,1,$ex_type,$fnm > $loge 2>&1".$lf ); } else { $dat = array( "#!/bin/sh".$lf, "$php $pg1 0,1,$ex_type,$fnm \\".$lf, " > $log \\".$lf, "2> $log2 $ffmpeg_inp_null".$lf, "$php $pg2 0,1,$ex_type,$fnm > $loge 2>&1".$lf ); } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $dat; } function rfgw_at_reserve($tn, $atqueno, $sttime, $fnm, $bs) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ret = at_reserve_win($tn, $sttime, $fnm, $bs); break; case "OSX": $ret = at_reserve_osx($atqueno, $sttime, $fnm, $bs); break; case "LNX": $ret = at_reserve_lnx($atqueno, $sttime, $fnm, $bs); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_rsv_limit_check($ex_type, $head, $atqueno) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $rsvdata = get_schdata($head, $ex_type, 1); break; case "OSX": $rsvdata = get_schdata_osx($atqueno, $ex_type, 1); break; case "LNX": $rsvdata = get_schdata_linux($atqueno, $ex_type, 1); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $rsvdata; } function rfgw_at_rm($jobno) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": break; case "LNX": $atrm_no = "atrm  ".$jobno; exec($atrm_no, $output2, $ret); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return 0; } function rfgw_at_check($atqueno, $filename) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": break; case "LNX": $ret = @exec("atq -q ".$atqueno, $output, $ret); if ($ret === false) return -1; $qn = count_73($output); for ($i = 0; $i < $qn; $i++) { $qno = explode("\t", $output[$i], 2); $ret = rf_get_at_jobsh($qno[0]); if ($ret === false) { continue; } if (strpos($ret, $filename) !== false) { return $qno[0]; } } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return 0; } function rfgw_ext_batsh($fnm) { global $rsvdir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $bs = $rsvdir. $fnm.".bat"; break; case "OSX": case "LNX": $bs = $rsvdir. $fnm.".sh"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $bs; } function rfgw_chmod($bs,$pm) { $exeos = get_rfriends_exeos(); $ret = true; switch ($exeos) { case "WIN": break; case "OSX": case "LNX": $ret = chmod($bs,$pm); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_cleanupsch() { global $schradiko_head; global $schradiru_head; global $at_que_no; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $cnt = cleanupsch($schradiko_head); echo_prn(1, "Deleted Schedule Count(Radiko) =  $cnt"); $cnt = cleanupsch($schradiru_head); echo_prn(1, "Deleted Schedule Count(Radiru) =  $cnt"); break; case "OSX": $exque = get_at_que_no($at_que_no); $cnt = rf_schdel_expire_osx($exque[0]); echo_prn(1, "Deleted Schedule Count(Radiko) =  $cnt"); $cnt = rf_schdel_expire_osx($exque[1]); echo_prn(1, "Deleted Schedule Count(Radiru) =  $cnt"); break; case "LNX": break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_w_l() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ex = "w"; break; case "OSX": case "LNX": $ex = "l"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ex; } function rfgw_ffmpeg_opt($ex_type) { global $http_seekable; global $ffmpeg_useropt; global $ffmpeg_seekable; global $ffmpeg_buf_radiko; global $ffmpeg_buf_radiru; global $ffmpeg_buf_timefree; global $ffmpeg_buf_radiru_vod; global $ffmpeg_buf_radiru_gogaku; global $ffmpeg_radiko_opt_lnx; global $ffmpeg_radiru_opt_lnx; global $ffmpeg_radiru_vod_opt_lnx; global $ffmpeg_timefree_opt_lnx; global $ffmpeg_radiru_gogaku_opt_lnx; global $ffmpeg_radiko_opt_win; global $ffmpeg_radiru_opt_win; global $ffmpeg_radiru_vod_opt_win; global $ffmpeg_timefree_opt_win; global $ffmpeg_radiru_gogaku_opt_win; global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": switch ($ex_type) { case $ex_radiru: $opt = $ffmpeg_radiru_opt_win; $buf = $ffmpeg_buf_radiru; break; case $ex_radiru_vod: $opt = $ffmpeg_radiru_vod_opt_win; $buf = $ffmpeg_buf_radiru_vod; break; case $ex_timefree: $opt = $ffmpeg_timefree_opt_win; $buf = $ffmpeg_buf_timefree; break; case $ex_radiru_gogaku: $opt = $ffmpeg_radiru_gogaku_opt_win; $buf = $ffmpeg_buf_radiru_gogaku; break; case $ex_radiko: default: $opt = $ffmpeg_radiko_opt_win; $buf = $ffmpeg_buf_radiko; break; } break; case "OSX": case "LNX": switch ($ex_type) { case $ex_radiru: $opt = $ffmpeg_radiru_opt_lnx; $buf = $ffmpeg_buf_radiru; break; case $ex_radiru_vod: $opt = $ffmpeg_radiru_vod_opt_lnx; $buf = $ffmpeg_buf_radiru_vod; break; case $ex_timefree: $opt = $ffmpeg_timefree_opt_lnx; $buf = $ffmpeg_buf_timefree; break; case $ex_radiru_gogaku: $opt = $ffmpeg_radiru_gogaku_opt_lnx; $buf = $ffmpeg_buf_radiru_gogaku; break; case $ex_radiko: default: $opt = $ffmpeg_radiko_opt_lnx; $buf = $ffmpeg_buf_radiko; } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } if (strpos($opt,$http_seekable) !== false) { $chg = 0; $ffmpegver = rf_ffmpeg_43(); switch ($ffmpeg_seekable) { case 2: $chg = 1; break; case 1: break; case 0: if ($ffmpegver == 0) $chg = 1; break; default: break; } if ($chg == 1) { $opt = str_replace($http_seekable,"",$opt); rf_error_log("ffmpeg_seekable : $ffmpeg_seekable ffmpegver : $ffmpegver chg : $chg"); } } if ($buf == 0) { $rtbuf = ""; } else { $rtbuf = sprintf("-rtbufsize %4d",$buf)."M"; } $optx = "$rtbuf $ffmpeg_useropt $opt"; return $optx; } function rfgw_inpnull() { $ffmpeg_inp_null = ""; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ffmpeg_inp_null = ""; break; case "OSX": case "LNX": $ffmpeg_inp_null = " < /dev/null"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ffmpeg_inp_null; } function rfgw_ps($dat) { $exeos = get_rfriends_exeos(); if ($exeos == "WIN") { $ret = rf_ps_win($dat); } elseif ($exeos == "OSX") { $ret = rf_ps_osx($dat); } else { $ret = rf_ps_lnx($dat); } return $ret; } function rfgw_ffmpeg_pid($mode) { $exeos = get_rfriends_exeos(); if ($exeos == "WIN") { $pid_data = rf_ffmpeg_pid_win($mode); } elseif ($exeos == "OSX") { $pid_data = rf_ffmpeg_pid_osx($mode); } else { $pid_data = rf_ffmpeg_pid_lnx($mode); } return $pid_data; } function rfgw_ffplay_pid() { $exeos = get_rfriends_exeos(); if ($exeos == "WIN") { $pid_data = rf_ffplay_pid_win(); } elseif ($exeos == "OSX") { $pid_data = rf_ffplay_pid_osx(); } else { $pid_data = rf_ffplay_pid_lnx(); } return $pid_data; } function rfgw_rec_sleep($slp1) { global $bindir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $nw1 = time(); shell_exec($bindir . "rfdontsleep.exe"); $nw2 = time(); $diff = $nw2 - $nw1; if ($diff > 3) { slp_write_msg($slp1, $nw2, "busy  $diff sec ???"); } break; case "OSX": break; case "LNX": break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } } function rfgw_program_del($test_mode, $ex_type, $para, $head) { global $schradiko_head; global $schradiru_head; global $launchdir; global $launch_at_head; global $at_que_no; global $ex_radiko; global $ex_radiru; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $tn = $para[12]; $taskdel = "SCHTASKS /Delete /TN $tn /f"; exec($taskdel,$output,$ret); break; case "OSX": $exque = get_at_que_no($at_que_no); if ($ex_type == $ex_radiko) { $atqueno = $exque[0]; } else { $atqueno = $exque[1]; } $fl = get_fnam($para, $ex_type); $flm = $launchdir.$launch_at_head."_".$atqueno."_".$fl.".plist"; if (!file_exists($flm)) { $flm = $launchdir.$launch_at_head."_".$atqueno."_".$fl."_manual.plist"; if (!file_exists($flm)) { $flm = $launchdir.$launch_at_head."_".$atqueno."_".$fl."_retry.plist"; } if (!file_exists($flm)) { return; } } rf_launchdel_osx($atqueno, $flm); break; case "LNX": $job = $para[12]; external_sys("atrm $job"); echo_msg(2, "Deleted $job"); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return 0; } function rfgw_addimg_app() { global $add_img_app_win; global $add_img_app_osx; global $add_img_app_lnx; global $cmd_which; global $bindir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $app = $add_img_app_win; if (!file_exists($bindir.$app.".exe")) { if ($app == "neroAacTag") { $app = "AtomicParsley"; } else if ($app == "AtomicParsley") { $app = "neroAacTag"; } } break; case "OSX": $app = $add_img_app_osx; break; case "LNX": $app = $add_img_app_lnx; exec("$cmd_which $app", $out, $ret); if ($ret == 1) { if ($app == "mp4tags") { $app = "AtomicParsley"; } else if ($app == "AtomicParsley") { $app = "mp4tags"; } } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $app; } function rfgw_gdrive_path() { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $pt = exec("echo %APPDATA%"); break; case "OSX": case "LNX": $pt = exec('echo $HOME'); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $pt; } function rfgw_gdrive_rename($gdcmd, $ot) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ret = rf_move($gdcmd, $ot); break; case "OSX": return true; break; case "LNX": $exec_cmd = "chmod +x $gdcmd"; $ret = passthru($exec_cmd); $exec_cmd = "sudo cp -p $gdcmd $ot"; $ret = passthru($exec_cmd); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_gdrive_download($fl, $gdcmd) { global $bindir; global $tmpdir; global $gdrive_url; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": case "LNX": $ret = rf_wget($gdrive_url.$fl, $tmpdir.$gdcmd, ""); break; case "OSX": $exec_cmd = "brew install $gdcmd"; return true; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ret; } function rfgw_gdrive_file($gdcmd) { global $bindir; $sz = PHP_INT_SIZE; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $windows_386 = "gdrive-windows-386.exe"; $windows_x64 = "gdrive-windows-x64.exe"; $fl = $windows_386; if ($sz == 8) { $fl = $windows_x64; } $ot = $bindir.$gdcmd.".exe"; break; case "OSX": $fl = "gdrive"; $ot = $bindir.$gdcmd; break; case "LNX": $linux_386 = "gdrive-linux-386"; $linux_x64 = "gdrive-linux-x64"; $rpi = "gdrive-linux-rpi"; $fl = $linux_386; if ($sz == 8) { $fl = $linux_x64; } if (rfgw_is_rasp() !== false) { $fl = $rpi; } $ot = "/usr/local/bin/$gdcmd"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } $ret[0] = $fl; $ret[1] = $ot; return $ret; } function rfgw_fin($ex_type, $fnm) { global $launchdir; global $launch_at_head; global $at_que_no; global $ex_radiko; global $ex_radiru; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": $exque = get_at_que_no($at_que_no); if ($ex_type == $ex_radiko || $ex_type == 3) { $atqueno = $exque[0]; } else { $atqueno = $exque[1]; } $flm = $launchdir.$launch_at_head."_".$atqueno."_".$fnm.".plist"; echo_prn(1, "delete $flm"); $ret = fin_unlink($flm); break; case "LNX": break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return; } function rfgw_whiptail($tcmd,$ttl,$cmd,$mes1,$y,$x,$n,$mes2) { global $scrdir; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": echo "--- not supported.\n"; $ans[0] = 1; $ans[1] = ""; break; case "OSX": echo "--- not supported.\n"; $ans[0] = 1; $ans[1] = ""; break; case "LNX": $output = null; $ret = null; $mes3 = ""; if ($n > 0) { foreach($mes2 as $k => $v) { $mes3 .= "$k \"$v \" "; } } $ans0 = exec("whiptail $tcmd \"$ttl\" $cmd \"$mes1\" $y $x $n $mes3 3>&1 1>&2 2>&3",$output,$ret); $ans[0] = $ret; $ans[1] = $ans0; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $ans; } function rfgw_pathinfo($path) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $fpath = rf_pathinfo($path); break; case "OSX": case "LNX": $fpath = pathinfo($path); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $fpath; } function rfgw_ping_test($addr) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $cmd = "ping $addr"; exec($cmd,$out,$ret); foreach($out as $outs) { $t = mb_convert_encoding($outs, "utf-8", "sjis-win"); echo_msg(2,$t); } return; break; case "OSX": $cmd = "ping -c 5"; break; case "LNX": $cmd = "ping -c 5"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } exec($cmd." $addr",$outs,$ret); foreach($outs as $out) { echo_msg(2,$out); } return; } function rfgw_nslookup($addr) { $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $cmd = "nslookup $addr"; exec($cmd,$outs,$ret); foreach($outs as $out) { $t = mb_convert_encoding($out, "utf-8", "sjis-win"); echo_msg(2,$t); } return $ret; break; case "OSX": $cmd = "nslookup"; $cmd3 = "cat /etc/resolv.conf"; break; case "LNX": $cmd = "nslookup"; $cmd2 = "command -v ".$cmd; echo " \n"; system("$cmd2",$ret); if ($ret != 0) { echo "$cmd not found \n"; echo "'dnsutils'をインストールしてください \n"; echo "sudo apt install dnsutils \n"; return; } $cmd3 = "cat /etc/resolv.conf"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } exec($cmd3,$outs,$ret); foreach($outs as $out) { echo_msg(2,$out); } return $ret; } function rfgw_headless_browser($url) { global $bindir; global $DS; global $headless_browser; global $headless_browser_app; global $default_headless_browser_win_app; global $default_headless_browser_osx_app; global $default_headless_browser_lnx_app; global $default_headless_browser_win_opt; global $default_headless_browser_osx_opt; global $default_headless_browser_lnx_opt; if ($headless_browser != 'on') return false; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": if ($headless_browser_app == "") { $app = $bindir.'chrome-win'.$DS.$default_headless_browser_win_app; } else { $app = $headless_browser_app; } $cmd = $app.' '.$default_headless_browser_win_opt; break; case "OSX": if ($headless_browser_app == "") { $app = $default_headless_browser_osx_app; } else { $app = $headless_browser_app; } $cmd = $app.' '.$default_headless_browser_osx_opt; break; case "LNX": if ($headless_browser_app == "") { $app = $default_headless_browser_lnx_app; } else { $app = $headless_browser_app; } $cmd = $app.' '.$default_headless_browser_lnx_opt; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } $exec_cmd = $cmd." ".$url; $out = @shell_exec($exec_cmd); if ($out === false) return false; if (empty($out)) return false; return $out; } function rfgw_headless_examine() { global $bindir; global $DS; global $cmd_which; global $headless_browser; global $headless_browser_app; global $default_headless_browser_win_app; global $default_headless_browser_osx_app; global $default_headless_browser_lnx_app; global $headless_browser_exists; $headless_browser_exists = 0; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": if ($headless_browser_app == "") { $app = $bindir.'chrome-win'.$DS.$default_headless_browser_win_app; } else { $app = $headless_browser_app; } if (file_exists($app)) $headless_browser_exists = 1; break; case "OSX": if ($headless_browser_app == "") { $app = $default_headless_browser_osx_app; } else { $app = $headless_browser_app; } $ret0 = exec("$cmd_which $app",$out,$ret); if ($ret0 !== false) $headless_browser_exists = 1; break; case "LNX": if ($headless_browser_app == "") { $app = $default_headless_browser_lnx_app; } else { $app = $headless_browser_app; } $ret0 = exec("$cmd_which $app",$out,$ret); if ($ret0 !== false) $headless_browser_exists = 1; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $headless_browser_exists; } function rfgw_symlink_make($bdir,$link,$real) { global $DS; $linkdir = $bdir.$link; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $cmd = "mklink /J $linkdir $real"; break; case "OSX": $cmd = "ln -s $real $linkdir"; break; case "LNX": $cmd = "ln -s $real $linkdir"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } $out = exec($cmd,$outs,$ret); if ($out === false) return false; return true; } function rfgw_symlink_remove($bdir,$link) { global $DS; $linkdir = $bdir.$link; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $cmd = "rm $linkdir"; break; case "OSX": $cmd = "unlink $linkdir"; break; case "LNX": $cmd = "unlink $linkdir"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } exec($cmd,$outs,$ret); if ($ret === false) return false; return true; } function rfgw_symlink_status($bdir,$link) { global $DS; $linkdir = $bdir.$link; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $ret = rfgw_symlink_status_win($bdir,$link); return $ret; break; case "OSX": $cmd = "readlink -f ".$bdir.$link; break; case "LNX": $cmd = "readlink -f ".$bdir.$link; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } $dir = exec($cmd,$outs,$ret); if ($dir === false) return false; if (substr($dir,-1) != $DS) $dir = $dir.$DS; return $dir; } function rfgw_symlink_status_win($bdir,$link) { global $DS; $cmd = "dir $bdir"; exec($cmd,$outs,$ret); if ($ret != 0) { rf_error_log("status_win false : $cmd"); return false; } foreach($outs as $out) { $out = mb_convert_encoding($out, "utf-8", "sjis-win"); $p = strpos($out,'<JUNCTION>'); if ($p === false) continue; $out = preg_replace('/\s+/', ' ', $out); $out2 = explode(' ',$out); $cnt = count_73($out2); if ($cnt < 5) { rf_error_log("status_win out : $out  cnt : $cnt"); continue; } if ($out2[3] != $link) { rf_error_log("status_win  out2[3] : ".$out2[3]."  link : $link"); continue; } $dir = str_replace(array("[","]"),"",$out2[4],$cnt); if ($cnt != 2) { rf_error_log("status_win  out2 : ".$out2[4]); return false; } if (substr($dir,-1) != $DS) $dir = $dir.$DS; return $dir; } rf_error_log("status_win no junction : $cmd"); return false; } function rfgw_extract_unzip($fl,$dstdir,$pn) { global $bindir; global $cmd_which; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $cmd = $bindir."unzip -d $dstdir $fl"; break; case "OSX": $cmd = "unzip -d $dstdir $fl"; break; case "LNX": $cmd = "unzip -d $dstdir $fl"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } if ($pn != "") { $cmd = $cmd ." -P $pn"; } $r = exec($cmd,$outs,$ret); if ($r === false) { return false; } return true; } function rfgw_extract_7z($fl,$dstdir,$pn) { global $bindir; global $cmd_which; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $cmd = $bindir."7za x -y -o$dstdir $fl"; break; case "OSX": $cmd = "7z x -y -o$dstdir $fl"; break; case "LNX": $cmd = "7z x -y -o$dstdir $fl"; break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } if ($pn != "") { $cmd = $cmd ." -p$pn"; } $r = exec($cmd,$outs,$ret); if ($r === false) { rf_error_log("fail extract $exeos : $cmd"); return false; } rf_error_log("success extract $exeos : $cmd"); return true; } function rfgw_rm_atque($dsp) { global $rsvdir; global $at_que_no; $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": $rcnt = -1; break; case "OSX": $rcnt = -1; break; case "LNX": $rcnt = rm_atque_linux($dsp); break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $rcnt; } function rfgw_atjobs($atqueno) { $jobs = array(); $exeos = get_rfriends_exeos(); switch ($exeos) { case "WIN": break; case "OSX": break; case "LNX": $ret = @exec("atq -q ".$atqueno, $output, $ret); if ($ret === false) return $jobs; $qn = count_73($output); for ($i = 0; $i < $qn; $i++) { $qno = explode("\t", $output[$i], 2); $jobno = $qno[0]; $jobsh = @exec("at -c $jobno 2>/dev/null", $retval); if ($jobsh === false) continue; $jobsh2 = explode(" ", $jobsh); if (count_73($jobsh2) != 2) continue; if ($jobsh2[0] != "sh") continue; $fnam = trim($jobsh2[1]); if (strpos($fnam, ".sh") === false) continue; $jobs[$fnam] = $jobno; } break; default: echo "--- rfriends_exeos is not defined.\n"; exit(1); break; } return $jobs; } 