<?php
 function rfmenu_rec_now($msel) { global $ttl_no; global $ttl_mes; global $usrdir; switch ($msel) { case 1: rfmenu_subtitle("録音を中止します。"); rfmenu_rec_abort(); break; case 2: rfmenu_subtitle("再生を中止します。"); rfmenu_play_abort(0); break; case 3: rfmenu_subtitle("録音データを管理します。"); echo_msg(2,"usrdir : $usrdir"); echo_scr(2,""); $mnu = array("使用量","表示・再生","削除"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3]= $mnu[$ans-1]; switch ($ans) { case 1: rfmenu_subtitle("録音データの使用量を表示します。"); rfmenu_info_use(); break; case 2: rfmenu_subtitle("録音データを表示・再生します。"); rf_explorer($usrdir,0); break; case 3: rfmenu_subtitle("録音データを削除します。"); rf_explorer($usrdir,1); break; } break; case 4: rfmenu_subtitle("デイリー処理（手動）を行います。"); rfmenu_info_daily(); break; case 5: rfmenu_subtitle("重複ファイル処理を行います。"); echo_scr(2,""); $mnu = array("ファイル移動(完全)","ファイル移動(部分)","ファイル削除"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3]= $mnu[$ans-1]; switch ($ans) { case 1: rfmenu_subtitle("重複ファイル(完全一致)を移動します。"); rfmenu_info_double(1); break; case 2: rfmenu_subtitle("重複ファイル(部分一致)を移動します。"); rfmenu_info_double(2); break; case 3: rfmenu_subtitle("重複ファイルを削除します。"); rfmenu_info_double_del(); break; } break; case 6: rfmenu_subtitle("番組配送処理を行います。"); rfmenu_info_delivery(); break; case 7: rfmenu_subtitle("バックアップ処理を行います。"); rfmenu_info_backup(); break; case 8: rfmenu_subtitle("ネットワークテストを行います。"); rfmenu_nettest(); break; default: break; } } function rfmenu_rec_radiko($msel) { global $ex_radiko; global $at_que_no; global $premium; global $nowarea; global $radiko_auth_mode3; global $radiko_auth_mode; switch ($msel) { case 1: $now_que_no = ""; if (get_rfriends_exeos() == "LNX") { $now_que_no = "($at_que_no)"; } rfmenu_subtitle("予約済一覧を表示します。$now_que_no"); rfmenu_rec_dsp($ex_radiko,0); break; case 2: rfmenu_subtitle("放送中の番組を予約・再生します。"); rfmenu_rec_today($ex_radiko, ""); break; case 3: rfmenu_subtitle("放送局別予約を行います。"); $ch = rfmenu_rec_ch($ex_radiko); if ($ch == "") { break; } if ($ch !== false) { rfmenu_rec_ch_ex($ex_radiko, $ch); } break; case 4: rfmenu_subtitle("録音データを再生します。"); rf_menu_play($ex_radiko); break; case 5: rfmenu_subtitle("キーワード検索を行います。"); rfmenu_rec_kwsrc($ex_radiko); break; case 6: rfmenu_subtitle("キーワードデータを元に番組予約を行います。"); $ans = echo_yesno(2, "実行しますか? (y/N): "); echo_msg(2, ""); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_radiko, 0, 0, 0, ""); echo_msg(2, "番組予約を行いました。"); rf_pause(); } break; case 7: rfmenu_subtitle("キーワードデータを元に予約リストを作成します。"); echo_msg(2, " 実際の予約はしません。"); echo_msg(2, ""); $ans = echo_yesno(2, "実行しますか? (y/N): "); echo_msg(2, ""); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_radiko, 1, 0, 0, ""); echo_msg(2, "予約リストを作成しました。"); rf_pause(); } break; case 8: if($premium == 1 || $premium == 2) { rfmenu_subtitle("ラジコプレミアムの地区(現在:$premium_area )を変更します。"); rfmenu_set_premium_area(); break; } if ($radiko_auth_mode == 0) { rfmenu_subtitle("エリア判定を更新します。"); echo_msg(2,"auth_mode : $radiko_auth_mode"); echo_msg(2,""); rf_reflesh_auth(); break; } if ($radiko_auth_mode == 2) { rfmenu_subtitle("モード設定を表示します。"); echo_msg(2,"現在のエリア : $nowarea"); echo_msg(2,""); echo_msg(2,"auth_mode : $radiko_auth_mode"); echo_msg(2,"url : $radiko_auth_mode2_url"); echo_msg(2,"url2 : $radiko_auth_mode2_url2"); echo_msg(2,"pref : $radiko_auth_mode2_pref"); break; } if ($radiko_auth_mode == 3) { rfmenu_subtitle("現在地変更を行います。(gpsテスト)。"); echo_msg(2,"auth_mode : $radiko_auth_mode"); echo_msg(2,""); $area = rf_input_pref(); rfmenu_gpstest($area); break; } echo_msg(2,"このモードでは変更できません。"); rf_pause(); break; case 9: rfmenu_subtitle("聴取する番組を選択します。"); rfmenu_onair($ex_radiko); break; default: break; } } function rfmenu_rec_timefree($msel) { global $ex_timefree; switch ($msel) { case 1: rfmenu_subtitle("タイムフリー録音を行います。"); $ch = rfmenu_rec_ch($ex_timefree); if ($ch == "") { return; } if ($ch === false) { echo_msg(2, "入力エラー"); rf_pause(); return; } echo_msg(2, "CH : $ch"); echo_msg(2, ""); $ans1 = rfmenu_rec_date($ex_timefree); if ($ans1 === false) { echo_msg(2, "入力エラー"); rf_pause(); return; } $dt = $ans1[0]; $cnt = $ans1[1]; if ($cnt <= 0) { return; } $dt = strtotime("$dt day"); $rsvdata = rfmenu_radiko_program($ch, $dt, $cnt); rfmenu_rec_sel($ex_timefree, $rsvdata); break; case 2: rfmenu_subtitle("録音データを再生します。"); rf_menu_play($ex_timefree); break; case 3: rfmenu_subtitle("キーワード検索を行います。"); rfmenu_rec_kwsrc($ex_timefree); break; case 4: rfmenu_subtitle("キーワードファイルを元に今からタイムフリー番組の録音を行います。"); rfmenu_rec_kwdat($ex_timefree); break; default: break; } } function rfmenu_rec_radiru($msel) { global $ex_radiru; global $usrdir; global $at_que_no; global $radiru_area_1; switch ($msel) { case 1: $now_que_no = ""; if (get_rfriends_exeos() == "LNX") { $now_que_no = "($at_que_no)"; } rfmenu_subtitle("予約済一覧を表示します。$now_que_no"); rfmenu_rec_dsp($ex_radiru,0); break; case 2: rfmenu_subtitle("放送中の番組を予約・再生します。($radiru_area_1)"); rfmenu_rec_today($ex_radiru, ""); break; case 3: rfmenu_subtitle("放送局別予約を行います。($radiru_area_1)"); $ch = rfmenu_rec_ch($ex_radiru); if ($ch == "") { break; } if ($ch !== false) { rfmenu_rec_ch_ex($ex_radiru, $ch); } break; case 4: rfmenu_subtitle("録音データを再生します。"); rf_menu_play($ex_radiru); break; case 5: rfmenu_subtitle("キーワード検索を行います。"); rfmenu_rec_kwsrc($ex_radiru); break; case 6: rfmenu_subtitle("キーワードデータを元に番組予約を行います"); $ans = echo_yesno(2, "実行しますか? (y/N): "); echo_msg(2, ""); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_radiru, 0, 0, 0, ""); echo_msg(2, "番組予約を行いました。"); rf_pause(); } break; case 7: rfmenu_subtitle("キーワードデータを元に予約リストを作成します。"); echo_msg(2, "実際の予約はしません。"); echo_msg(2, ""); $ans = echo_yesno(2, "実行しますか? (y/N): "); echo_msg(2, ""); if ($ans == "y" || $ans == "Y") { rf_batsh_rec($ex_radiru, 1, 0, 0, ""); echo_msg(2, "予約リストを作成しました。"); rf_pause(); } break; case 8: rfmenu_subtitle("らじるエリアを変更します。"); rfmenu_radiru_area(); rf_pause(); break; case 9: rfmenu_subtitle("聴取する番組を選択します。"); rfmenu_onair($ex_radiru); break; default: break; } } function rfmenu_rec_radiru_vod($msel) { global $ex_radiru_vod; global $ex_radiru_gogaku; global $cfgdir; global $ex_radiru_vod; global $radiru_vod_url; global $radiru_timeofbegin; global $keyword; $h = date("H"); if ($h < $radiru_timeofbegin) { $d = -8; $cnt = 8; } else { $d = -7; $cnt = 8; } switch ($msel) { case 1: rfmenu_subtitle("聞き逃し番組の録音を行います。"); rfmenu_rec_ond(); break; case 2: rfmenu_subtitle("録音データを再生します。"); rf_menu_play($ex_radiru_vod); break; case 3: rfmenu_subtitle("キーワード検索を行います。"); rfmenu_rec_kwsrc($ex_radiru_vod); break; case 4: rfmenu_subtitle("キーワードファイルを元に今から聞き逃し番組の録音を行います。"); echo_msg(2, "録音範囲:00:00 - 23:59"); echo_scr(2, ""); $ret = rfmenu_rec_kwdat($ex_radiru_vod); break; default: break; } } function rfmenu_rec_radiru_gogaku($msel) { global $ex_radiru_vod; global $ex_radiru_gogaku; global $radiru_gogaku_ouchi_nendo; global $cfgdir; switch ($msel) { case 1: rfmenu_subtitle("ゴガク（英語）番組の録音を行います。"); rfmenu_rec_gogaku_new1("daily1"); break; case -1: $nendo = rfmenu_rec_gogaku_ouchicalc(); $nw = time(); $nwy = (int)date("Y", $nw); $nwm = (int)date("m", $nw); echo_msg(2,$nendo."年度に設定されています。"); echo_msg(2,""); $ret = true; while($ret == true) { rfmenu_subtitle("ゴガク（おうちで英語学習".$nendo."）の録音を行います。"); $ret = rfmenu_rec_gogaku_new3("weekly3"); } break; case 2: rfmenu_subtitle("ゴガク（他）番組の録音を行います。"); rfmenu_rec_gogaku_new1("daily3"); break; case 3: rfmenu_subtitle("ゴガクの再生をします。"); rf_menu_play($ex_radiru_gogaku); break; case 4: rfmenu_subtitle("キーワード検索を行います。"); rfmenu_rec_kwsrc($ex_radiru_gogaku); break; case 5: rfmenu_subtitle("キーワードファイルを元に今からゴガク番組の録音を行います。"); echo_msg(2, "録音範囲:00:00-23:59"); echo_scr(2, ""); $ret = rfmenu_rec_kwdat($ex_radiru_gogaku); break; case -1: $ret = true; while($ret !== false) { rfmenu_subtitle("ゴガク（お悩みバスターズ）の録音を行います。"); $ret = rfmenu_rec_gogaku_new4("weekly4"); } break; default: break; } } function rec_podcast($msel) { global $menudef; global $menudef_s; global $menudef_t; global $cfgdir; global $scrdir; global $pcastdir; global $podcastdat; global $ui_mode; global $rfproduct; require_once("rf_podcast.php"); require_once("rf_podcast_sub.php"); $nmax = 80; $pgm = $menudef_t; $tag = $pgm['tag']; if ($ui_mode != 2 && $rfproduct != "rfriends2") { echo_msg(2,"------------------------------------------------"); echo_msg(2,"cuiモードでは処理に時間がかかる可能性があります。"); echo_msg(2,"ブラウザモードを使用ください。"); echo_msg(2,"------------------------------------------------"); rf_pause(); } while(1 == 1) { switch($tag) { case "user": echo_msg(2,""); echo_msg(2,"ユーザプリセットのPodcastをダウンロードします。"); if ($ui_mode != 2) { echo_msg(2,"複数または全部を選択すると、"); echo_msg(2,"それぞれの最新エピソードをダウンロードします。"); } $ret = rf_podcast_user($pgm,$nmax); break; case "user_edit": echo_msg(2,""); rfmenu_subtitle("ユーザプリセットの編集を行います。"); $fn = $podcastdat; rfgw_play_text($cfgdir.$fn); $ret = false; break; case "user_reset": echo_msg(2,""); echo_msg(2,"ユーザプリセットの初期化を行います。"); echo_msg(2,"ユーザプリセットが出荷時の状態になります。"); echo_msg(2,""); $ans = echo_yesno(2, "実行しますか? (y/N): "); if ($ans == "y" || $ans == "Y") { $fn = $podcastdat; fin_unlink($cfgdir.$fn); } $ret = false; break; case "apple_preset": echo_msg(2,""); echo_msg(2,"Apple Podcasts(preset)をダウンロードします。"); echo_msg(2,""); $ret = rf_podcast_apple_preset($pgm,$nmax); break; case "apple": echo_msg(2,""); echo_msg(2,"Apple Podcastsの番組を検索します。"); echo_msg(2,""); $ret = rf_podcast_apple($pgm,$nmax); break; case "audeelist": echo_msg(2,""); echo_msg(2, "AuDeeの番組をダウンロードします"); echo_msg(2,"読み込み中..."); echo_msg(2,""); $ret = rf_podcast_audee_list($pgm,$nmax); break; case "audee": echo_msg(2,""); echo_msg(2, "AuDeeの番組（検索）をダウンロードします"); echo_msg(2,""); $ret = rf_podcast_audee($pgm,$nmax); break; case "lfrradio": echo_msg(2,""); echo_msg(2,"Podcasts(lfrradio)をダウンロードします。"); echo_msg(2,""); $ret = rf_podcast_lfrradio($pgm,$nmax); break; default: $ret = false; break; } if ($ret === false ) break; } } function rfmenu_edit($msel) { global $rf_stp; global $kw_name_dat; global $ttl_no; global $ttl_mes; $kw = ""; $ttl_no[0]= 2; $ttl_no[2]= $msel; switch($msel) { case 1: $kw = "station"; break; case 2: $kw = "common"; break; case 3: rfmenu_subtitle("ラジコキーワードの編集を行います。"); if (premium_check() == -1) { $mnu = array("ラジコ","タイムフリー"); } else { $mnu = array("ラジコ","タイムフリー","エリアフリー"); } $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3]= $mnu[$ans-1]; switch ($ans) { case 1: $kw = "radiko"; break; case 2: $kw = "timefree"; break; case 3: $kw = "premium"; break; } break; case 4: rfmenu_subtitle("らじるキーワードの編集を行います。"); $mnu = array("らじる","地域","聞き逃し","ゴガク"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3]= $mnu[$ans-1]; switch ($ans) { case 1: $kw = "radiru"; break; case 2: $kw = "radiru_other"; break; case 3: $kw = "radiru_vod"; break; case 4: $kw = "radiru_gogaku"; break; } break; case 5: $kw = "program"; break; case 6: $kw = "delivery"; break; case 7: rfmenu_subtitle("キーワードの保存/復元を行います。"); rfmenu_kw_manage(); return; break; default: return; break; } $kwn = $kw_name_dat[$kw]; rfmenu_subtitle("$kwn($kw)キーワードの編集を行います。"); rfgw_kwedit($kw); } function rfmenu_ini($msel) { switch ($msel) { case 1: rfmenu_subtitle("パラメータ設定を行います。"); rfmenu_para(); break; case 2: rfmenu_subtitle("タグ設定を行います。"); rfmenu_tag(); break; case 3: rfmenu_subtitle("デイリー処理自動化を行います。"); rfgw_config(); break; case 4: rfmenu_subtitle("各種データ設定を行います。"); rfmenu_constant(); break; case 5: rfmenu_subtitle("メール設定を行います。"); rfmenu_mail(); break; case 6: rfmenu_subtitle("録音ディレクトリ設定を行います。"); rfmenu_usrdir(); break; case 7: rfmenu_subtitle("ラジコプレミアム設定を行います。"); rfmenu_premium(); break; case 8: rfmenu_subtitle("設定データの保存/復元を行います。"); rfmenu_setting(); break; default: break; } } function rfmenu_about_mes() { echo_msg(2," "); rfmenu_subtitle("rfriendsを初期の状態にリセットします。"); echo_msg(2,"・設定データをバックアップ"); echo_msg(2,"・デイリー処理自動化を解除"); echo_msg(2,"・ラジコの予約を削除"); echo_msg(2,"・らじるの予約を削除"); echo_msg(2,"・実行中の録音をキャンセル"); echo_msg(2,"・各種一時データを削除"); echo_msg(2," "); echo_msg(2,"ただし、録音ディレクトリ内の"); echo_msg(2,"・録音データ"); echo_msg(2,"・キーワード"); echo_msg(2,"・バックアップデータ"); echo_msg(2,"は削除されません。"); echo_msg(2," "); } function rfmenu_about($msel) { global $cfgdir; global $rf_stp; $ret = 0; switch ($msel) { case 1: rfmenu_subtitle("システム更新を行います。"); $ret = rfmenu_update(0); if ($ret == 0) { } break; case 2: rfmenu_subtitle("システムツール更新を行います。"); $ret = rfmenu_update_tool(0); if ($ret == 0) { } break; case 3: rfmenu_about_mes(); $a0 = echo_yesno(2, "本当に実行しますか? (y/N) : "); if (($a0 != "y") && ($a0 != "Y")) { return 0; } rf_factory_reset(0); echo_msg(2, ""); echo_msg(2, "リセットが終了しました。"); echo_msg(2, ""); echo_msg(2, "一旦終了します。"); $rf_stp = 1; echo_fin($rf_stp); exit($rf_stp); break; case 4: rfmenu_subtitle("rfriendsについて"); $mnu = array("マニュアル","使用ソフトウエア","バージョン情報"); $ans = rf_sel_menu($mnu,1); if ($ans < 0) { return; } $ttl_no[0]= 3; $ttl_no[3]= $ans; $ttl_mes[3]= $mnu[$ans-1]; switch ($ans) { case 1: rfmenu_subtitle("マニュアル表示を行います"); rfmenu_info_manual(); break; case 2: rfmenu_subtitle("使用ソフトウエアについて"); rfmenu_info_apps(); rfmenu_info_service(); rf_pause(); break; case 3: rfmenu_subtitle("バージョン情報"); rfmenu_info(); rf_pause(); break; } break; default: break; } return($ret); } 