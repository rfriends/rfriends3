<?php
 function rf_php_ext_check($phpext) { $out = external_php_exec("-m"); if (in_array($phpext,$out)) return true; else return false; } function rf_php_ext() { $out = external_php_exec("-m"); $phpexts = array("xml","json","zip","openssl","mbstring","curl","intl"); $ret = array(); foreach($phpexts as $phpext) { if (in_array($phpext,$out)) { $ret[] = $phpext; } else { $ret[] = $phpext." not found"; } } return $ret; } function rf_get_extype_name($ex_type) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $ex_podcast; switch ($ex_type) { case $ex_radiko: $extype_name = "radiko"; break; case $ex_radiru: $extype_name = "radiru"; break; case $ex_timefree: $extype_name = "timefree"; break; case $ex_radiru_vod: $extype_name = "radiru_vod"; break; case $ex_radiru_gogaku: $extype_name = "radiru_gogaku"; break; case $ex_podcast: $extype_name = "podcast"; break; default: $extype_name = ""; break; } return $extype_name; } function rf_get_extype($ex_type_name) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $ex_podcast; switch ($ex_type_name) { case "radiko": $extype = $ex_radiko; break; case "radiru": $extype = $ex_radiru; break; case "timefree": $extype = $ex_timefree; break; case "radiru_vod": $extype = $ex_radiru_vod; break; case "radiru_gogaku": $extype = $ex_radiru_gogaku; break; case "podcast": $extype = $ex_podcast; break; default: $extype = ""; break; } return $extype; } function delivery_sw() { $lines = rf_get_keyword("dlvy"); if (count_73($lines) == 0) { return false; } $on = $lines[0]; if ($on == "on") { return true; } return false; } function delivery_rec_program_cmd($cmd, $delivery, $xml, $recf, $srcfile, $dstfile, $ex_type, $totime) { $hit = 0; if (!file_exists($srcfile)) { return $hit; } $key = strtolower($delivery."_".$cmd); $lines = rf_get_keyword($key); if (count_73($lines) == 0) { return $hit; } foreach($lines as $kw) { if ($kw == "") { continue; } switch($cmd) { case "copy": $mvflag = 0; $ovflag = 0; $exflag = 1; break; case "copyf": $mvflag = 0; $ovflag = 1; $exflag = 1; break; case "move": $mvflag = 1; $ovflag = 0; $exflag = 1; break; case "movef": $mvflag = 1; $ovflag = 1; $exflag = 1; break; default: $mvflag = 0; $ovflag = 0; $exflag = 0; echo_prn(1, "error : $cmd"); break; } if ($exflag == 0) continue; if (rf_compare_multi_dlvy($xml, $kw) == null ) { continue; } $hit++; if ($mvflag == 1) { rf_movefile($srcfile,$dstfile,$ovflag,$ex_type,$totime); } else { rf_copyfile($srcfile,$dstfile,$ovflag,$ex_type,$totime); } break; } return $hit; } function delivery_rec_program_s($delivery, $xml, $recf, $ext, $srcfile,$ex_type, $totime) { global $DS; $hit = 0; $dkey = strtolower($delivery."_dir"); $ddirs = rf_get_keyword($dkey); if (count_73($ddirs) == 0) { return $hit; } $dir = $ddirs[0]; if (!file_exists($dir)) { echo_prn(1, " not found : $dir"); return $hit; } if (substr($dir,-1) != $DS) $dir .= $DS; $dstfile = $dir.$recf.".".$ext; $hit += delivery_rec_program_cmd("copyf", $delivery, $xml, $recf, $srcfile,$dstfile, $ex_type, $totime); $hit += delivery_rec_program_cmd("copy" , $delivery, $xml, $recf, $srcfile,$dstfile, $ex_type, $totime); $hit += delivery_rec_program_cmd("movef", $delivery, $xml, $recf, $srcfile,$dstfile, $ex_type, $totime); $hit += delivery_rec_program_cmd("move" , $delivery, $xml, $recf, $srcfile,$dstfile, $ex_type, $totime); return $hit; } function delivery_rec_program($ex_type, $para, $recdir, $recf, $ext) { global $ex_radiko; global $ex_radiru; global $ex_timefree; global $ex_radiru_vod; global $ex_radiru_gogaku; global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir; global $usrdir; global $tmpdir; global $kwdir; global $DS; $hit = 0; $st_tm = start_prn(1, "delivery Program Start"); $srcfile = $recdir.$recf.".".$ext; $extype_name = rf_get_extype_name($ex_type); $xml = array("title" => $recf); $totime = $para[1]; $users = rf_get_keyword("dlvy_users"); foreach ($users as $user) { if (!file_exists($srcfile)) { break; } $delivery = "dlvy_".$user."_".$extype_name; $hit += delivery_rec_program_s($delivery, $xml, $recf, $ext, $srcfile,$ex_type, $totime); } echo_prn(1, "Hit Count : $hit"); $en_tm = start_prn(1, "delivery Program End"); } function rf_stradjust($str,$n) { $str = html_entity_decode($str); $str2 = fn_edit(utf8mac2utf8($str)); if ($n <= 0) return $str2; $str3 = rf_strimwidth($str2, 0, $n); return $str3; } function utf8mac2utf8($str) { if (rf_php_ext_check('intl')) { if (Normalizer::isNormalized($str, Normalizer::FORM_D)) { $str = Normalizer::normalize($str, Normalizer::FORM_C); } return $str; } $jsonstr = substr(json_encode($str),1,-1); $tbl = [ "\u304b\u309b" => '\u304c', "\u304d\u309b" => '\u304e', "\u304f\u309b" => '\u3050', "\u3051\u309b" => '\u3052', "\u3053\u309b" => '\u3054', "\u3055\u309b" => '\u3056', "\u3057\u309b" => '\u3058', "\u3059\u309b" => '\u305a', "\u305b\u309b" => '\u305c', "\u305d\u309b" => '\u305e', "\u305f\u309b" => '\u3060', "\u3061\u309b" => '\u3062', "\u3064\u309b" => '\u3065', "\u3066\u309b" => '\u3067', "\u3068\u309b" => '\u3069', "\u306f\u309a" => '\u3071', "\u3072\u309a" => '\u3074', "\u3075\u309a" => '\u3077', "\u3078\u309a" => '\u307a', "\u307b\u309a" => '\u307d', "\u306f\u309b" => '\u3070', "\u3072\u309b" => '\u3073', "\u3075\u309b" => '\u3076', "\u3078\u309b" => '\u3079', "\u307b\u309b" => '\u307c', ]; $search = array_keys($tbl); $replace = array_values($tbl); $jsonstr = str_replace($search, $replace, $jsonstr); $jsonstr = str_replace("\u3099",'\u309b',$jsonstr); $jsonstr = str_replace("\u309a",'\u309c',$jsonstr); $str2 = json_decode(sprintf('"%s"', $jsonstr)); $str2 = mb_convert_kana($str2,"aks","utf-8"); $str2 = mb_convert_kana($str2,"KV","utf-8"); return $str2; } function url2dom($url) { $html = @file_get_contents($url); if ($html === false) return false; $domDocument = new DOMDocument(); @$domDocument->loadHTML($html);; return $domDocument; } function url2xml($url) { for ($i=0;$i<3;$i++) { $html = @file_get_contents($url); if ($html !== false) break; sleep(1); } if ($html === false) { return false; } $domDocument = new DOMDocument(); $internalErrors = libxml_use_internal_errors(true); $domDocument->loadHTML($html); libxml_use_internal_errors($internalErrors); $xmlString = $domDocument->saveXML(); $xmlObject = @simplexml_load_string($xmlString); return $xmlObject; } function url2xpath($url) { $html = @file_get_contents($url); if ($html === false) return false; $domDocument = new DOMDocument(); @$domDocument->loadHTML($html); $xpath = new DOMXPath($domDocument); return $xpath; } function url2xml_ex($url) { $html = @file_get_contents_headless($url); if ($html === false) return false; $domDocument = new DOMDocument(); $internalErrors = libxml_use_internal_errors(true); @$domDocument->loadHTML($html); libxml_use_internal_errors($internalErrors); $xmlString = $domDocument->saveXML(); $xmlObject = rf_simplexml_load_string($xmlString); return $xmlObject; } function url2dom_ex($url) { $html = @file_get_contents_headless($url); if ($html === false) return false; $domDocument = new DOMDocument(); @$domDocument->loadHTML($html);; return $domDocument; } function url2xpath_ex($url) { $html = @file_get_contents_headless($url); if ($html === false) return false; $domDocument = new DOMDocument(); @$domDocument->loadHTML($html); $xpath = new DOMXPath($domDocument); return $xpath; } function file_get_contents_headless($url) { global $headless_browser; if ($headless_browser == 'on') { $html = rfgw_headless_browser($url); if ($html !== false) return $html; } return false; } function file_get_contents_android($url) { $header = array( "Content-Type: application/x-www-form-urlencoded", "User-Agent: Mozilla/5.0 (Linux; Android 11; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.210 Mobile Safari/537.36
", "Referer: https://yahoo.co.jp" ); $options =array( 'http' =>array( 'method' => "GET", 'header' => implode("\r\n", $header), ) ); $html = file_get_contents($url, false, stream_context_create($options)); return $html; } function rf_pathinfo($path) { global $DS; $fpath = array(); $parts = explode($DS,$path); $cnt = count_73($parts); if ($cnt <= 1) { $dirname = ""; $basename = $path; } else { $basename = $parts[$cnt - 1]; $len = strlen($path) - strlen($basename) - 1; $dirname = substr($path,0,$len); } $parts = explode(".",$basename); $cnt = count_73($parts); if ($cnt <= 1) { $filename = $basename; } else { $extension = $parts[$cnt - 1]; $fpath["extension"] = $extension; $len = strlen($basename) - strlen($extension) - 1; $filename = substr($basename,0,$len); } $fpath["dirname"] = $dirname; $fpath["basename"] = $basename; $fpath["filename"] = $filename; return $fpath; } function rf_explorer($topdir,$typ) { global $rfriends; global $base; global $cfgdir; global $tmpdir; global $usrdir; global $kwdir; global $logdir; global $radiko_recdir; global $radiru_recdir; global $timefree_recdir; global $radiru_vod_recdir; global $radiru_gogaku_recdir; global $kwbackupdir; global $dir_log; global $dir_radiko; global $dir_radiru; global $dir_timefree; global $dir_radiru_vod; global $dir_radiru_gogaku; global $dir_kw; global $dir_backup; global $DS; if (substr($topdir,-1) != $DS) $topdir .= $DS; $curdir = $topdir; while(1 == 1) { if (substr($curdir,-1) != $DS) $curdir .= $DS; $updir = realpath($curdir."../").$DS; $rmes = "戻る"; if ($curdir == $topdir) $rmes = "終了"; $lists = glob($curdir."*"); $flist = array(); foreach($lists as $list) { $path = rfgw_pathinfo($list); $ttl = $path['basename']; if (is_dir($list)) { $ttl = "[ ".$ttl." ]"; } $flist[]=array('title'=>$ttl ,'val'=>$list); } $opt = array( "title" => "ディレクトリ($curdir)", "input_type" => 0, "page_control" => 1, "return_mes" => "$rmes", "input_mes" => "どれを選択しますか", "mode" => 1, "multi" => 0, "confirm" => 0, "ht_selid" => "" ); $no = rf_pctl_disp($flist, $opt); $ans = $no[0]; if ($ans == "r") { if ($curdir == $topdir) break; $curdir = $updir; continue; } if ($ans == "e") { echo_msg(2, "入力エラー"); rf_pause(); continue; } if ($ans == "z") { echo_msg(2, "リストが空です"); rf_pause(); if ($curdir == $topdir) break; $curdir = $updir; continue; } $item = $flist[$ans - 1]['val']; if (is_dir($item) === true) { $curdir = $item; continue; } $fil = $flist[$ans - 1]['title']; $edit_fn = $curdir.$fil; echo_msg(2, $edit_fn); if ($typ == 0) { $ret = rf_play_file($edit_fn); if ($ret != 0) { echo_msg(2, "表示できませんでした。"); } } else { echo_scr(2,""); $ans = echo_yesno(2, "削除しますか? (y/N): "); if ($ans == "Y" || $ans == "y") { fin_unlink($edit_fn); echo_msg(2, "削除しました。"); } } rf_pause(); echo_scr(2,""); } } function rf_premium_mode($area, $channel) { global $area_code; global $home_area_code; global $radiko_nhk; global $radiko_nhk_fm; global $premium_priority; global $premium; if ($channel == $radiko_nhk_fm) { $mode = 0; echo_msg(2,"ch : $channel forced mode 0"); return $mode; } $nhk_flag = 0; foreach($radiko_nhk as $c) { if ($channel == $c) { $nhk_flag = 1; break; } } $mode = 0; switch($premium) { case 1: if (($area == $home_area_code) && ($nhk_flag == 1)) { break; } if (($area == $home_area_code) && ($premium_priority == 0)) { break; } $mode = 1; break; case 2: if (($area == $home_area_code) && ($nhk_flag == 1)) { break; } if (($area == $home_area_code) && ($premium_priority == 0)){ break; } $mode = 1; break; default: break; } if ($premium > 0) { } return $mode; } function rf_bupdate_chk($bup,$file,$ft) { $dt0 = date("Ymd"); $tm = strtotime($dt0) - $bup*24*60*60; $dt = date("Ymd",$tm); $dt2 = date("Ymd",$ft); $tm2 = strtotime($dt2); if ($tm < $tm2) return false; return true; } function rf_bupdir_chk($bup,$bupm,$bupdir) { global $usrdir; if ($bup == 0) return false; if ($bupm != "move" && $bupm != "movef" && $bupm != "copy" && $bupm != "copyf" && $bupm != "delete") { echo_prn(2, "backup_mode error "); return false; } if (file_exists($bupdir) === false) { echo_prn(2, "backup_dir error "); return false; } if (file_exists($bupdir) === false) { echo_prn(2, "バックアップ先ディレクトリが存在しません。"); return false; } $pos = strpos($bupdir,$usrdir); if ($pos === false)return true; if ($pos == 0) { echo_prn(2, "バックアップ先が異常です。"); return false; } return true; } function rfget_flists($dir){ $list = array(); $files = scandir($dir); foreach($files as $file){ if($file == '.' || $file == '..') continue; if (is_file($dir . $file)){ $list[] = $dir . $file; continue; } if( is_dir($dir . $file) ) { $list = array_merge($list, rfget_flists($dir . $file . DIRECTORY_SEPARATOR)); } } return $list; } function rfbacup_file($bup,$dir) { global $DS; $lists = rfget_flists($dir); $lists2 = array(); foreach($lists as $list) { $pi = rfgw_pathinfo($list); if (array_key_exists('extension',$pi) === false) { $ext = ""; } else { $ext = $pi['extension']; } if ($ext != "m4a" && $ext != "mp3") { continue; } $ft = @filemtime($list); if ($ft === false) { continue; } if (rf_bupdate_chk($bup,$list,$ft) === false) { continue; } $lists2[] = $list; } return $lists2; } function rfbacup_file_ex($bupm,$srcdir,$bupdir,$lists) { global $DS; $cntdo = 0; $sizdo = 0; foreach($lists as $list) { if (!file_exists($list)) { echo_prn(2,"ファイルが存在しません。$list"); echo_prn(2,"スキップします。"); continue; } $siz = @filesize($list); if ($siz === false) { echo_prn(2,"ファイルサイズ取得に失敗しました。$list"); echo_prn(2,"スキップします。"); continue; } $ft = @filemtime($list); if ($ft === false) { echo_prn(2,"ファイル時刻の取得に失敗しました。$list"); echo_prn(2,"スキップします。"); continue; } $pi = rfgw_pathinfo($list); $dir = $pi['dirname']; $ext = $pi['extension']; $fil = $pi['filename'].".".$ext; $pos = strpos($dir,$srcdir); if ($pos === false) { echo_prn(2,"ディレクトリ異常です(1)。$dir"); echo_prn(2,"スキップします。"); continue; } if ($pos != 0) { echo_prn(2,"ディレクトリ異常です(2)。$dir"); echo_prn(2,"スキップします。"); continue; } if ($bupm == "delete") { fin_unlink($list); echo_prn(2, "$bupm : $list"); $cntdo++; $sizdo += $siz; continue; } $dir2 = $bupdir .substr($dir,strlen($srcdir)); if (file_exists($dir2) === false) { $ret = mkdir($dir2,0777,true); if ($ret === false) { echo_prn(2,"ディレクトリ作成に失敗しました。$dir2"); echo_prn(2,"スキップします。"); continue; } } $list2 = $dir2.$DS.$fil; if (file_exists($list2)) { if ($bupm != "movef" && $bupm != "copyf") continue; } if ($bupm == "copyf" || $bupm == "copy" || $bupm == "movef" || $bupm == "move") { echo_prn(2, "$bupm : $list2"); $ret = rf_copy($list,$list2); if ($ret === false) { echo_prn(2,""); echo_prn(2,"ファイルのコピーに失敗しました。$list"); echo_prn(2,"スキップします。"); continue; } rf_touch_tm($list2,$ft); if ($bupm == "movef" || $bupm == "move") { fin_unlink($list); } $cntdo++; $sizdo += $siz; } } $fmtdo = rf_disk_fmt($sizdo,1); echo_prn(2, ""); echo_prn(2, "処理件数 : $cntdo ($fmtdo)"); } function rf_var_dump_file($para,$fil) { global $tmpdir; ob_start(); var_dump($para); $dump = ob_get_contents(); ob_end_clean(); file_put_contents($tmpdir.$fil, $dump, FILE_APPEND ); } function binary_dump($dat) { $bdat = unpack("C*", $dat); $ret = ""; foreach($bdat as $v){ $ret .= sprintf("%02x ",$v); } return $ret; } 